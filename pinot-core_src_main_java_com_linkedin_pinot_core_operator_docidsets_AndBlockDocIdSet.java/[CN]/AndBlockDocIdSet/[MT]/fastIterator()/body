{
  long start=System.currentTimeMillis();
  List<List<IntPair>> sortedRangeSets=new ArrayList<>();
  List<ImmutableRoaringBitmap> childBitmaps=new ArrayList<ImmutableRoaringBitmap>();
  List<FilterBlockDocIdSet> scanBasedDocIdSets=new ArrayList<>();
  List<BlockDocIdIterator> remainingIterators=new ArrayList<>();
  for (  BlockDocIdSet docIdSet : blockDocIdSets) {
    if (docIdSet instanceof SortedDocIdSet) {
      SortedDocIdSet sortedDocIdSet=(SortedDocIdSet)docIdSet;
      List<IntPair> pairs=sortedDocIdSet.getRaw();
      sortedRangeSets.add(pairs);
    }
 else     if (docIdSet instanceof BitmapDocIdSet) {
      BitmapDocIdSet bitmapDocIdSet=(BitmapDocIdSet)docIdSet;
      ImmutableRoaringBitmap childBitmap=bitmapDocIdSet.getRaw();
      childBitmaps.add(childBitmap);
    }
 else     if (docIdSet instanceof ScanBasedSingleValueDocIdSet) {
      scanBasedDocIdSets.add((ScanBasedSingleValueDocIdSet)docIdSet);
    }
 else     if (docIdSet instanceof ScanBasedMultiValueDocIdSet) {
      scanBasedDocIdSets.add((ScanBasedMultiValueDocIdSet)docIdSet);
    }
 else {
      remainingIterators.add(docIdSet.iterator());
    }
  }
  if (sortedRangeSets.size() > 0) {
    List<IntPair> pairList;
    pairList=SortedRangeIntersection.intersectSortedRangeSets(sortedRangeSets);
    answer=new MutableRoaringBitmap();
    for (    IntPair pair : pairList) {
      answer.add(pair.getLeft(),pair.getRight() + 1);
    }
  }
  if (childBitmaps.size() > 0) {
    if (answer == null) {
      answer=(MutableRoaringBitmap)childBitmaps.get(0).clone();
      for (int i=1; i < childBitmaps.size(); i++) {
        answer.and(childBitmaps.get(i));
      }
    }
 else {
      for (int i=0; i < childBitmaps.size(); i++) {
        answer.and(childBitmaps.get(i));
      }
    }
  }
  if (answer == null) {
    answer=new MutableRoaringBitmap();
    answer.add(minDocId,maxDocId + 1);
  }
  for (  FilterBlockDocIdSet scanBasedDocIdSet : scanBasedDocIdSets) {
    ScanBasedDocIdIterator iterator=(ScanBasedDocIdIterator)scanBasedDocIdSet.iterator();
    MutableRoaringBitmap scanAnswer=iterator.applyAnd(answer);
    answer.and(scanAnswer);
  }
  long end=System.currentTimeMillis();
  LOGGER.debug("Time to evaluate and Filter:{}",(end - start));
  BlockDocIdIterator answerDocIdIterator=new RangelessBitmapDocIdIterator(answer.getIntIterator());
  if (remainingIterators.size() == 0) {
    return answerDocIdIterator;
  }
 else {
    BlockDocIdIterator[] docIdIterators=new BlockDocIdIterator[remainingIterators.size() + 1];
    docIdIterators[0]=answerDocIdIterator;
    for (int i=0; i < remainingIterators.size(); i++) {
      docIdIterators[i + 1]=remainingIterators.get(i);
    }
    return new AndDocIdIterator(docIdIterators);
  }
}
