{
  int anomalyResultsSize=anomalyResults.size();
  if (minConsecutiveSize > 1) {
    List<RawAnomalyResultDTO> filteredAndMergedAnomalies=new ArrayList<>();
    if (anomalyResultsSize >= minConsecutiveSize) {
      List<RawAnomalyResultDTO> consecutiveAnomalies=new ArrayList<>();
      List<Double> consecutiveBaselines=new ArrayList<>();
      List<Double> consecutiveCurrents=new ArrayList<>();
      int count=-1;
      for (      RawAnomalyResultDTO currentAnomaly : anomalyResults) {
        count++;
        if (consecutiveAnomalies.isEmpty()) {
          consecutiveAnomalies.add(currentAnomaly);
          consecutiveBaselines.add(baselineValues.get(count));
          consecutiveCurrents.add(currentValues.get(count));
          continue;
        }
        RawAnomalyResultDTO previousAnomaly=consecutiveAnomalies.get(consecutiveAnomalies.size() - 1);
        if (isConsecutiveAnomaly(previousAnomaly,currentAnomaly,bucketMillis)) {
          consecutiveAnomalies.add(currentAnomaly);
          consecutiveBaselines.add(baselineValues.get(count));
          consecutiveCurrents.add(currentValues.get(count));
        }
 else {
          if (hasMinConsecutive(consecutiveAnomalies,minConsecutiveSize)) {
            filteredAndMergedAnomalies.add(getMergedAnomalyResults(consecutiveAnomalies,consecutiveBaselines,consecutiveCurrents,threshold,baselineProp));
          }
          consecutiveAnomalies=new ArrayList<>();
          consecutiveBaselines=new ArrayList<>();
          consecutiveCurrents=new ArrayList<>();
          consecutiveAnomalies.add(currentAnomaly);
          consecutiveBaselines.add(baselineValues.get(count));
          consecutiveCurrents.add(currentValues.get(count));
        }
      }
      if (hasMinConsecutive(consecutiveAnomalies,minConsecutiveSize)) {
        filteredAndMergedAnomalies.add(getMergedAnomalyResults(consecutiveAnomalies,consecutiveBaselines,consecutiveCurrents,threshold,baselineProp));
      }
    }
    return filteredAndMergedAnomalies;
  }
 else {
    return anomalyResults;
  }
}
