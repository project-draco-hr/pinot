{
  File segmentDir=INDEX_DIR.listFiles()[0];
  IndexSegment segment=ColumnarSegmentLoader.load(segmentDir,ReadMode.mmap);
  SegmentMetadataImpl metadata=(SegmentMetadataImpl)segment.getSegmentMetadata();
  Schema schema=segment.getSegmentMetadata().getSchema();
  for (  FieldSpec spec : schema.getAllFieldSpecs()) {
    if (spec.isSingleValueField()) {
      continue;
    }
    ColumnMetadata columnMetadata=metadata.getColumnMetadataFor(spec.getName());
    Dictionary dic=Loaders.Dictionary.load(columnMetadata,new File(segmentDir,spec.getName() + V1Constants.Dict.FILE_EXTENTION),ReadMode.heap);
    DataFileReader indexReader=Loaders.ForwardIndex.loadFwdIndexForColumn(columnMetadata,new File(segmentDir,spec.getName() + V1Constants.Indexes.UN_SORTED_SV_FWD_IDX_FILE_EXTENTION),ReadMode.heap);
    InvertedIndexReader reader=Loaders.InvertedIndex.load(columnMetadata,segmentDir,spec.getName(),ReadMode.heap);
    MultiValueBlockWithoutInvertedIndex fwdIdxBlock=new MultiValueBlockWithoutInvertedIndex(new BlockId(0),(FixedBitCompressedMVForwardIndexReader)indexReader,(ImmutableDictionaryReader)dic,columnMetadata);
    Object e=dic.get(new Random().nextInt(dic.length()));
    Predicate p=new EqPredicate(spec.getName(),Lists.newArrayList(e.toString()));
    Block invertedIndexBlock=new MultiValueBlockWithBitmapInvertedIndex(new BlockId(0),(FixedBitCompressedMVForwardIndexReader)indexReader,reader,(ImmutableDictionaryReader)dic,columnMetadata);
    invertedIndexBlock.applyPredicate(p);
    fwdIdxBlock.applyPredicate(p);
    BlockDocIdIterator it1=invertedIndexBlock.getBlockDocIdSet().iterator();
    BlockDocIdIterator it2=fwdIdxBlock.getBlockDocIdSet().iterator();
    int val1=it1.next();
    int val2=it2.next();
    while (val1 != Constants.EOF) {
      Assert.assertEquals(val1,val2);
      val1=it1.next();
      val2=it2.next();
    }
    Assert.assertEquals(val1,Constants.EOF);
    Assert.assertEquals(val2,Constants.EOF);
  }
}
