{
  Options options=new Options();
  options.addOption("fileType",true,"File type (avro|tsv)");
  options.addOption("keepMetricValues",false,"Keep metric values in buffers (default: false)");
  options.addOption("keepBuffers",false,"Generate buffers (default: false)");
  options.addOption("numTimeBuckets",true,"Number of time buckets (this times time granularity is retention period)");
  options.addOption("ignoreTime",false,"Ignore time column in input");
  CommandLine commandLine=new GnuParser().parse(options,args);
  if (commandLine.getArgs().length < 3) {
    HelpFormatter helpFormatter=new HelpFormatter();
    helpFormatter.printHelp("usage: [opts] configFile outputDir inputFile(s) ...",options);
    return;
  }
  String configJson=commandLine.getArgs()[0];
  String outputDir=commandLine.getArgs()[1];
  String[] inputFiles=Arrays.copyOfRange(commandLine.getArgs(),2,commandLine.getArgs().length);
  String fileType=commandLine.getOptionValue("fileType","avro");
  Boolean keepMetricValues=commandLine.hasOption("keepMetricValues");
  Boolean keepBuffers=commandLine.hasOption("keepBuffers");
  Integer numTimeBuckets=Integer.valueOf(commandLine.getOptionValue("numTimeBuckets","" + (7 * 24)));
  StarTreeConfig config=StarTreeConfig.fromJson(OBJECT_MAPPER.readTree(new File(configJson)));
  List<Iterable<StarTreeRecord>> recordStreams=new ArrayList<Iterable<StarTreeRecord>>();
  if ("avro".equals(fileType)) {
    for (    String inputFile : inputFiles) {
      recordStreams.add(new StarTreeRecordStreamAvroFileImpl(new File(inputFile),config.getDimensionNames(),config.getMetricNames(),config.getTimeColumnName()));
    }
  }
 else   if ("tsv".equals(fileType)) {
    for (    String inputFile : inputFiles) {
      recordStreams.add(new StarTreeRecordStreamTextStreamImpl(new FileInputStream(inputFile),config.getDimensionNames(),config.getMetricNames(),"\t",commandLine.hasOption("ignoreTime")));
    }
  }
 else   if ("sequenceFile".equals(fileType)) {
  }
 else {
    throw new IllegalArgumentException("Invalid file type " + fileType);
  }
  new StarTreeGenAndBootstrapTool(numTimeBuckets,keepMetricValues,keepBuffers,config,recordStreams,new File(outputDir)).run();
}
