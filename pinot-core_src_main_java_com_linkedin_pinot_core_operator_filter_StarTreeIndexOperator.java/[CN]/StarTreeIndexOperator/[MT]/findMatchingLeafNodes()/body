{
  Queue<SearchEntry> matchedEntries=new LinkedList<>();
  Queue<SearchEntry> searchQueue=new LinkedList<>();
  HashBiMap<String,Integer> dimensionIndexToNameMapping=segment.getStarTree().getDimensionNameToIndexMap();
  SearchEntry startEntry=new SearchEntry();
  startEntry.starTreeIndexnode=segment.getStarTree().getRoot();
  startEntry.remainingPredicateColumns=new HashSet<>(predicatesMap.keySet());
  startEntry.remainingGroupByColumns=new HashSet<>(groupByColumns);
  searchQueue.add(startEntry);
  while (!searchQueue.isEmpty()) {
    SearchEntry searchEntry=searchQueue.remove();
    StarTreeIndexNode current=searchEntry.starTreeIndexnode;
    HashSet<String> remainingPredicateColumns=searchEntry.remainingPredicateColumns;
    HashSet<String> remainingGroupByColumns=searchEntry.remainingGroupByColumns;
    if (current.isLeaf() || (remainingPredicateColumns.isEmpty() && remainingGroupByColumns.isEmpty())) {
      matchedEntries.add(searchEntry);
      continue;
    }
    String nextDimension=dimensionIndexToNameMapping.inverse().get(current.getChildDimensionName());
    HashSet<String> newRemainingPredicateColumns=new HashSet<>();
    newRemainingPredicateColumns.addAll(remainingPredicateColumns);
    HashSet<String> newRemainingGroupByColumns=new HashSet<>();
    newRemainingGroupByColumns.addAll(remainingGroupByColumns);
    addMatchingChildrenToQueue(searchQueue,current,nextDimension,newRemainingPredicateColumns,newRemainingGroupByColumns);
  }
  return matchedEntries;
}
