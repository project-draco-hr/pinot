{
  MutableRoaringBitmap finalResult=null;
  if (emptyResult) {
    finalResult=new MutableRoaringBitmap();
    final BitmapDocIdIterator bitmapDocIdIterator=new BitmapDocIdIterator(finalResult.getIntIterator());
    return createBaseFilterBlock(bitmapDocIdIterator);
  }
  Queue<SearchEntry> matchedEntries=findMatchingLeafNodes();
  List<Operator> matchingLeafOperators=new ArrayList<>();
  for (  SearchEntry matchedEntry : matchedEntries) {
    Operator matchingLeafOperator;
    int startDocId=matchedEntry.starTreeIndexnode.getStartDocumentId();
    int endDocId=matchedEntry.starTreeIndexnode.getEndDocumentId();
    List<Operator> filterOperators=createFilterOperatorsForRemainingPredicates(matchedEntry);
    if (filterOperators.size() == 0) {
      matchingLeafOperator=createFilterOperator(startDocId,endDocId);
    }
 else     if (filterOperators.size() == 1) {
      matchingLeafOperator=filterOperators.get(0);
    }
 else {
      matchingLeafOperator=new AndOperator(filterOperators);
    }
    matchingLeafOperators.add(matchingLeafOperator);
  }
  if (matchingLeafOperators.size() == 1) {
    BaseFilterOperator baseFilterOperator=(BaseFilterOperator)matchingLeafOperators.get(0);
    return baseFilterOperator.nextFilterBlock(blockId);
  }
 else {
    OrOperator orOperator=new OrOperator(matchingLeafOperators);
    return orOperator.nextFilterBlock(blockId);
  }
}
