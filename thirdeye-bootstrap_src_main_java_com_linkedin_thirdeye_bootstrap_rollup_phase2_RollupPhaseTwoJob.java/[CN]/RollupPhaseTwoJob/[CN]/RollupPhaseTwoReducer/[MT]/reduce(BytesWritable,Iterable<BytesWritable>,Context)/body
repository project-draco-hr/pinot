{
  DimensionKey rollupDimensionKey=null;
  MetricTimeSeries rollupTimeSeries=new MetricTimeSeries(metricSchema);
  map.clear();
  for (  BytesWritable writable : rollupMapOutputWritableIterable) {
    RollupPhaseTwoMapOutput temp;
    temp=RollupPhaseTwoMapOutput.fromBytes(writable.copyBytes(),metricSchema);
    if (rollupDimensionKey == null) {
      rollupDimensionKey=temp.getRollupDimensionKey();
    }
    map.put(temp.rawDimensionKey,temp.getRawTimeSeries());
    rollupTimeSeries.aggregate(temp.getRawTimeSeries());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("processing key :%s, size:%d",rollupDimensionKeyMD5Writable.toString(),map.size()));
  }
  for (  Entry<DimensionKey,MetricTimeSeries> entry : map.entrySet()) {
    RollupPhaseTwoReduceOutput output;
    output=new RollupPhaseTwoReduceOutput(rollupDimensionKey,rollupTimeSeries,entry.getKey(),entry.getValue());
    byte[] md5=entry.getKey().toMD5();
    keyWritable.set(md5,0,md5.length);
    byte[] outBytes=output.toBytes();
    valWritable.set(outBytes,0,outBytes.length);
    context.write(keyWritable,valWritable);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("end processing key :%s",rollupDimensionKeyMD5Writable.toString()));
  }
}
