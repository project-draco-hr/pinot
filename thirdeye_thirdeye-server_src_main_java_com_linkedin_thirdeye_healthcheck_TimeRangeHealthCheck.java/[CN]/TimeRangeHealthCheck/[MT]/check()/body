{
  for (  String collection : manager.getCollections()) {
    final Map<UUID,Map<TimeRange,Integer>> nodeToTimeRangeMap=new HashMap<UUID,Map<TimeRange,Integer>>();
    File metricStoreDir=new File(PATH_JOINER.join(rootDir,collection,StarTreeConstants.DATA_DIR_NAME,StarTreeConstants.METRIC_STORE));
    File[] metricIndexFiles=metricStoreDir.listFiles(INDEX_FILE_FILTER);
    if (metricIndexFiles != null) {
      for (      File metricIndexFile : metricIndexFiles) {
        List<MetricIndexEntry> indexEntries=StorageUtils.readMetricIndex(metricIndexFile);
        for (        MetricIndexEntry metricIndexEntry : indexEntries) {
          UUID nodeId=metricIndexEntry.getNodeId();
          TimeRange timeRange=metricIndexEntry.getTimeRange();
          Map<TimeRange,Integer> timeRangeToCountMap=nodeToTimeRangeMap.get(nodeId);
          if (timeRangeToCountMap == null) {
            timeRangeToCountMap=new HashMap<TimeRange,Integer>();
            timeRangeToCountMap.put(timeRange,1);
            nodeToTimeRangeMap.put(nodeId,timeRangeToCountMap);
          }
 else {
            Integer count=timeRangeToCountMap.get(timeRange);
            if (count == null) {
              timeRangeToCountMap.put(timeRange,1);
            }
 else {
              timeRangeToCountMap.put(timeRange,count + 1);
            }
          }
        }
      }
    }
    manager.getStarTree(collection).eachLeaf(new StarTreeCallback(){
      @Override public void call(      StarTreeNode leafNode){
        Map<TimeRange,Integer> indexTimeRangeToCount=nodeToTimeRangeMap.get(leafNode.getId());
        if (indexTimeRangeToCount == null) {
          if (leafNode.getRecordStore().getTimeRangeCount().size() != 0) {
            throw new IllegalStateException("Found node " + leafNode.getId() + " which has no metric segments on disk but has metric segments loaded in memory");
          }
        }
 else {
          Map<TimeRange,Integer> nodeTimeRangeToCount=leafNode.getRecordStore().getTimeRangeCount();
          if (indexTimeRangeToCount.size() != nodeTimeRangeToCount.size()) {
            throw new IllegalStateException("Number of timeranges in metric store are not same as index for node " + leafNode.getId());
          }
          for (          Map.Entry<TimeRange,Integer> entry : nodeTimeRangeToCount.entrySet()) {
            TimeRange nodeTimeRange=entry.getKey();
            Integer nodeCount=entry.getValue();
            Integer indexCount=indexTimeRangeToCount.get(nodeTimeRange);
            if (indexCount == null) {
              throw new IllegalStateException("Timerange " + nodeTimeRange.toString() + "exists in metric store but not in index for node "+ leafNode.getId());
            }
            if (indexCount != nodeCount) {
              throw new IllegalStateException("Timerange " + nodeTimeRange.toString() + " appears "+ nodeCount+ " times in metric store but "+ indexCount+ " times in index, for node "+ leafNode.getId());
            }
          }
        }
      }
    }
);
  }
  return Result.healthy();
}
