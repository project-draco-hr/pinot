{
  UUID fileId=UUID.randomUUID();
  File dimensionStore=new File(outputDir,StarTreeConstants.DIMENSION_STORE);
  File metricStore=new File(outputDir,StarTreeConstants.METRIC_STORE);
  FileUtils.forceMkdir(outputDir);
  FileUtils.forceMkdir(dimensionStore);
  FileUtils.forceMkdir(metricStore);
  File combinedDictionaryFile=new File(dimensionStore,fileId + StarTreeConstants.DICT_FILE_SUFFIX);
  Map<UUID,List<Long>> dictionaryMetadata=combineFiles(new File(inputDir,StarTreeConstants.DICT_STORE),combinedDictionaryFile,false);
  File combinedDimensionFile=new File(dimensionStore,fileId + StarTreeConstants.BUFFER_FILE_SUFFIX);
  Map<UUID,List<Long>> dimensionMetadata=combineFiles(new File(inputDir,StarTreeConstants.DIMENSION_STORE),combinedDimensionFile,false);
  File combinedMetricFile=new File(metricStore,fileId + StarTreeConstants.BUFFER_FILE_SUFFIX);
  Map<UUID,List<Long>> metricMetadata=combineFiles(new File(inputDir,StarTreeConstants.METRIC_STORE),combinedMetricFile,true);
  List<DimensionIndexEntry> dimensionIndexEntries=new ArrayList<DimensionIndexEntry>();
  for (  Map.Entry<UUID,List<Long>> entry : dimensionMetadata.entrySet()) {
    UUID nodeId=entry.getKey();
    List<Long> dictionaryPosition=dictionaryMetadata.get(nodeId);
    if (dictionaryPosition == null) {
      throw new IllegalStateException("No dictionary for node " + nodeId);
    }
    int dictionaryStartOffset=dictionaryPosition.get(0).intValue();
    int dictionaryLength=dictionaryPosition.get(1).intValue();
    int bufferStartOffset=entry.getValue().get(0).intValue();
    int bufferLength=entry.getValue().get(1).intValue();
    dimensionIndexEntries.add(new DimensionIndexEntry(nodeId,fileId,dictionaryStartOffset,dictionaryLength,bufferStartOffset,bufferLength));
  }
  File dimensionIndexFile=new File(dimensionStore,fileId + StarTreeConstants.INDEX_FILE_SUFFIX);
  writeObjects(dimensionIndexEntries,dimensionIndexFile);
  List<MetricIndexEntry> metricIndexEntries=new ArrayList<MetricIndexEntry>();
  for (  Map.Entry<UUID,List<Long>> entry : metricMetadata.entrySet()) {
    UUID nodeId=entry.getKey();
    int startOffset=entry.getValue().get(0).intValue();
    int length=entry.getValue().get(1).intValue();
    long minTime=entry.getValue().get(2);
    long maxTime=entry.getValue().get(3);
    metricIndexEntries.add(new MetricIndexEntry(nodeId,fileId,startOffset,length,new TimeRange(minTime,maxTime)));
  }
  File metricIndexFile=new File(metricStore,fileId + StarTreeConstants.INDEX_FILE_SUFFIX);
  writeObjects(metricIndexEntries,metricIndexFile);
}
