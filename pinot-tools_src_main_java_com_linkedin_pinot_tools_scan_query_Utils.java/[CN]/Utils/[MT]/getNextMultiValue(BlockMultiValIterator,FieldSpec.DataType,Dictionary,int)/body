{
  Object[] value;
  int[] dictIds=new int[maxNumMultiValues];
  int numMVValues=bvIter.nextIntVal(dictIds);
switch (dataType) {
case INT_ARRAY:
    value=new Integer[numMVValues];
  for (int i=0; i < numMVValues; ++i) {
    value[i]=((IntDictionary)dictionaryReader).get(dictIds[i]);
  }
break;
case FLOAT_ARRAY:
value=new Float[numMVValues];
for (int dictId=0; dictId < numMVValues; ++dictId) {
value[dictId]=((FloatDictionary)dictionaryReader).get(dictIds[dictId]);
}
break;
case LONG_ARRAY:
value=new Long[numMVValues];
for (int dictId=0; dictId < numMVValues; ++dictId) {
value[dictId]=((LongDictionary)dictionaryReader).get(dictIds[dictId]);
}
break;
case DOUBLE_ARRAY:
value=new Double[numMVValues];
for (int dictId=0; dictId < numMVValues; ++dictId) {
value[dictId]=((DoubleDictionary)dictionaryReader).get(dictIds[dictId]);
}
break;
case STRING_ARRAY:
value=new String[numMVValues];
for (int dictId=0; dictId < numMVValues; ++dictId) {
value[dictId]=((StringDictionary)dictionaryReader).get(dictIds[dictId]);
}
break;
default :
throw new RuntimeException("Unsupported data type.");
}
return value;
}
