{
  rootDir=new File(System.getProperty("java.io.tmpdir"),TestStarTreeImpl.class.getName());
  baseConfig=StarTreeConfig.decode(ClassLoader.getSystemResourceAsStream("sample-config.yml"));
  collection=baseConfig.getCollection();
  collectionDir=new File(rootDir,collection);
  try {
    FileUtils.forceDelete(collectionDir);
  }
 catch (  Exception e) {
  }
  try {
    FileUtils.forceMkdir(collectionDir);
  }
 catch (  Exception e) {
  }
  SplitSpec split=new SplitSpec(5,baseConfig.getSplit().getOrder());
  config=new StarTreeConfig(baseConfig.getCollection(),StarTreeRecordStoreFactoryLogBufferImpl.class.getCanonicalName(),new Properties(),baseConfig.getAnomalyDetectionFunctionClass(),baseConfig.getAnomalyDetectionFunctionConfig(),baseConfig.getAnomalyHandlerClass(),baseConfig.getAnomalyHandlerConfig(),baseConfig.getAnomalyDetectionMode(),baseConfig.getDimensions(),baseConfig.getMetrics(),baseConfig.getTime(),baseConfig.getJoinSpec(),baseConfig.getRollup(),baseConfig.getTopKRollup(),split,false);
  File configFile=new File(collectionDir,"config.yml");
  objectMapper=new ObjectMapper();
  objectMapper.writeValue(configFile,config);
  starTree=new StarTreeImpl(config);
  starTree.open();
  metricSchema=MetricSchema.fromMetricSpecs(config.getMetrics());
  MetricTimeSeries ts=new MetricTimeSeries(metricSchema);
  ts.set(0,"M",1);
  StarTreeRecordImpl.Builder builder=new StarTreeRecordImpl.Builder();
  builder.setDimensionKey(getDimensionKey("A","B","C"));
  builder.setMetricTimeSeries(ts);
  starTree.add(builder.build(config));
  starTree.close();
  IndexMetadata indexMetadata=new IndexMetadata(0L,1L,0L,1L,0L,1L,0L,1L,"HOURLY","MILLISECONDS",1,IndexFormat.VARIABLE_SIZE);
  properties=indexMetadata.toProperties();
}
