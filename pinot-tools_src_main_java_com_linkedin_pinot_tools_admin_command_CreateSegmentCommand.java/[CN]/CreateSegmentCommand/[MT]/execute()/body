{
  File dir=new File(_dataDir);
  if (!dir.exists() || !dir.isDirectory()) {
    throw new RuntimeException("Data directory " + _dataDir + " not found.");
  }
  File[] files=dir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith("avro");
    }
  }
);
  if ((files == null) || (files.length == 0)) {
    throw new RuntimeException("Data directory " + _dataDir + " does not contain AVRO files.");
  }
  File odir=new File(_outDir);
  if (odir.exists()) {
    if (!_overwrite) {
      throw new IOException("Error: Output directory already exists.");
    }
 else {
      FileUtils.deleteDirectory(odir);
    }
  }
  final Schema schema;
  if (_schemaFile != null) {
    File schemaFile=new File(_schemaFile);
    schema=new ObjectMapper().readValue(schemaFile,Schema.class);
  }
 else {
    schema=AvroUtils.extractSchemaFromAvro(files[0]);
  }
  ExecutorService executor=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
  int cnt=0;
  for (  final File file : files) {
    final int segCnt=cnt;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          SegmentGeneratorConfig config=new SegmentGeneratorConfig(schema);
          config.setInputFileFormat(FileFormat.AVRO);
          config.setSegmentVersion(SegmentVersion.v1);
          config.setIndexOutputDir(_outDir);
          config.setResourceName(_resourceName);
          config.setTableName(_tableName);
          config.setTimeColumnName(schema.getTimeColumnName());
          config.setTimeUnitForSegment(schema.getTimeSpec().getIncomingGranularitySpec().getTimeType());
          config.setInputFilePath(file.getAbsolutePath());
          config.setSegmentName(_segmentName + "_" + segCnt);
          final SegmentIndexCreationDriverImpl driver=new SegmentIndexCreationDriverImpl();
          driver.init(config);
          driver.build();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    cnt+=1;
  }
  executor.shutdown();
  executor.awaitTermination(1,TimeUnit.HOURS);
  return true;
}
