{
  Map<String,Object> fieldMap=new HashMap<String,Object>();
  if (_schema.size() > 0) {
    boolean hasError=false;
    boolean hasNull=false;
    boolean hasConversion=false;
    for (    String column : _schema.getColumnNames()) {
      Object value;
      if (column.equals(_schema.getTimeColumnName())) {
        value=row.getValue(_incomingTimeColumnName);
        if (value != null) {
          try {
            value=_timeConverter.convert(value);
          }
 catch (          Exception e) {
            LOGGER.error("Got exception during converter incoming time value: " + value,e);
            value=null;
          }
        }
      }
 else {
        value=row.getValue(column);
      }
      FieldSpec fieldSpec=_schema.getFieldSpecFor(column);
      PinotDataType dest=_columnType.get(column);
      PinotDataType source;
      if (value == null) {
        source=PinotDataType.OBJECT;
        hasNull=true;
        _totalNullCols++;
      }
 else {
        String typeName=(value.getClass().getCanonicalName());
        if ((typeName.equals("java.lang.Object[]")) && ((Object[])value).length != 0) {
          typeName=((Object[])value)[0].getClass().getCanonicalName();
          typeName=typeName + "[]";
        }
        source=_typeMap.get(typeName);
        if (source == null) {
          source=PinotDataType.OBJECT;
        }
      }
      if ((source != dest) && (value != null)) {
        try {
          hasConversion=true;
          value=dest.convert(value,source);
          if (value == null) {
            hasError=true;
          }
        }
 catch (        Exception e) {
          value=null;
          hasError=true;
        }
      }
      if (value == null) {
        _errorCount.put(column,_errorCount.get(column) + 1);
        LOGGER.debug("Invalid value {} in column {} in schema {}",row.getValue(column),column,_schema.getSchemaName());
        try {
          if (fieldSpec.isSingleValueField()) {
            value=fieldSpec.getDefaultNullValue();
          }
 else {
            value=new Object[]{fieldSpec.getDefaultNullValue()};
          }
        }
 catch (        UnsupportedOperationException e) {
        }
      }
      fieldMap.put(column,value);
    }
    if (hasError) {
      _totalErrors++;
    }
    if (hasNull) {
      _totalNulls++;
    }
    if (hasConversion) {
      _totalConversions++;
    }
    row.init(fieldMap);
  }
  return row;
}
