{
  docIdCounter=0;
  config=segmentCreationSpec;
  this.indexCreationInfoMap=indexCreationInfoMap;
  dictionaryCreatorMap=new HashMap<String,SegmentDictionaryCreator>();
  forwardIndexCreatorMap=new HashMap<String,ForwardIndexCreator>();
  this.indexCreationInfoMap=indexCreationInfoMap;
  invertedIndexCreatorMap=new HashMap<String,InvertedIndexCreator>();
  file=outDir;
  if (file.exists()) {
    throw new RuntimeException("Segment output directory " + file.getAbsolutePath() + " already exists.");
  }
  file.mkdir();
  this.schema=schema;
  this.totalDocs=segmentIndexCreationInfo.getTotalDocs();
  this.totalAggDocs=segmentIndexCreationInfo.getTotalAggDocs();
  this.totalRawDocs=segmentIndexCreationInfo.getTotalRawDocs();
  this.totalErrors=segmentIndexCreationInfo.getTotalErrors();
  this.totalNulls=segmentIndexCreationInfo.getTotalNulls();
  this.totalConversions=segmentIndexCreationInfo.getTotalConversions();
  this.totalNullCols=segmentIndexCreationInfo.getTotalNullCols();
  this.paddingCharacter=segmentCreationSpec.getPaddingCharacter();
  for (  final FieldSpec spec : schema.getAllFieldSpecs()) {
    final ColumnIndexCreationInfo info=indexCreationInfoMap.get(spec.getName());
    if (info.isCreateDictionary()) {
      dictionaryCreatorMap.put(spec.getName(),new SegmentDictionaryCreator(info.hasNulls(),info.getSortedUniqueElementsArray(),spec,file,paddingCharacter));
    }
 else {
      throw new RuntimeException("Creation of indices without dictionaries is not implemented!");
    }
  }
  for (  final String column : dictionaryCreatorMap.keySet()) {
    ColumnIndexCreationInfo indexCreationInfo=indexCreationInfoMap.get(column);
    boolean[] isSorted=new boolean[1];
    isSorted[0]=indexCreationInfo.isSorted();
    dictionaryCreatorMap.get(column).build(isSorted);
    indexCreationInfo.setSorted(isSorted[0]);
    dictionaryCache.put(column,new HashMap<Object,Object>());
    int uniqueValueCount=indexCreationInfo.getDistinctValueCount();
    if (schema.getFieldSpecFor(column).isSingleValueField()) {
      if (indexCreationInfo.isSorted()) {
        forwardIndexCreatorMap.put(column,new SingleValueSortedForwardIndexCreator(file,uniqueValueCount,schema.getFieldSpecFor(column)));
      }
 else {
        forwardIndexCreatorMap.put(column,new SingleValueUnsortedForwardIndexCreator(schema.getFieldSpecFor(column),file,uniqueValueCount,totalDocs,indexCreationInfo.getTotalNumberOfEntries(),indexCreationInfo.hasNulls()));
      }
    }
 else {
      forwardIndexCreatorMap.put(column,new MultiValueUnsortedForwardIndexCreator(schema.getFieldSpecFor(column),file,uniqueValueCount,totalDocs,indexCreationInfo.getTotalNumberOfEntries(),indexCreationInfo.hasNulls()));
    }
  }
  for (  String column : config.getInvertedIndexCreationColumns()) {
    if (!schema.hasColumn(column)) {
      LOGGER.warn("Skipping enabling index on column:{} since its missing in schema",column);
      continue;
    }
    ColumnIndexCreationInfo indexCreationInfo=indexCreationInfoMap.get(column);
    int uniqueValueCount=indexCreationInfo.getDistinctValueCount();
    OffHeapBitmapInvertedIndexCreator invertedIndexCreator=new OffHeapBitmapInvertedIndexCreator(file,uniqueValueCount,totalDocs,indexCreationInfo.getTotalNumberOfEntries(),schema.getFieldSpecFor(column));
    invertedIndexCreatorMap.put(column,invertedIndexCreator);
  }
}
