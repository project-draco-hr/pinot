{
  PropertiesConfiguration properties=new PropertiesConfiguration(new File(file,V1Constants.MetadataKeys.METADATA_FILE_NAME));
  properties.setProperty(SEGMENT_CREATOR_VERSION,config.getCreatorVersion());
  properties.setProperty(SEGMENT_PADDING_CHARACTER,StringEscapeUtils.escapeJava(Character.toString(config.getPaddingCharacter())));
  properties.setProperty(SEGMENT_NAME,segmentName);
  properties.setProperty(TABLE_NAME,config.getTableName());
  properties.setProperty(DIMENSIONS,config.getDimensions());
  properties.setProperty(METRICS,config.getMetrics());
  properties.setProperty(TIME_COLUMN_NAME,config.getTimeColumnName());
  properties.setProperty(TIME_INTERVAL,"not_there");
  properties.setProperty(SEGMENT_TOTAL_RAW_DOCS,String.valueOf(totalRawDocs));
  properties.setProperty(SEGMENT_TOTAL_AGGREGATE_DOCS,String.valueOf(totalAggDocs));
  properties.setProperty(SEGMENT_TOTAL_DOCS,String.valueOf(totalDocs));
  properties.setProperty(STAR_TREE_ENABLED,String.valueOf(config.isEnableStarTreeIndex()));
  properties.setProperty(SEGMENT_TOTAL_ERRORS,String.valueOf(totalErrors));
  properties.setProperty(SEGMENT_TOTAL_NULLS,String.valueOf(totalNulls));
  properties.setProperty(SEGMENT_TOTAL_CONVERSIONS,String.valueOf(totalConversions));
  properties.setProperty(SEGMENT_TOTAL_NULL_COLS,String.valueOf(totalNullCols));
  StarTreeIndexSpec starTreeIndexSpec=config.getStarTreeIndexSpec();
  if (starTreeIndexSpec != null) {
    properties.setProperty(STAR_TREE_SPLIT_ORDER,starTreeIndexSpec.getDimensionsSplitOrder());
    properties.setProperty(STAR_TREE_MAX_LEAF_RECORDS,starTreeIndexSpec.getMaxLeafRecords());
    properties.setProperty(STAR_TREE_SKIP_STAR_NODE_CREATION_FOR_DIMENSIONS,starTreeIndexSpec.getSkipStarNodeCreationForDimensions());
    properties.setProperty(STAR_TREE_SKIP_MATERIALIZATION_CARDINALITY,starTreeIndexSpec.getskipMaterializationCardinalityThreshold());
    properties.setProperty(STAR_TREE_SKIP_MATERIALIZATION_FOR_DIMENSIONS,starTreeIndexSpec.getskipMaterializationForDimensions());
  }
  String timeColumn=config.getTimeColumnName();
  if (indexCreationInfoMap.get(timeColumn) != null) {
    properties.setProperty(SEGMENT_START_TIME,indexCreationInfoMap.get(timeColumn).getMin());
    properties.setProperty(SEGMENT_END_TIME,indexCreationInfoMap.get(timeColumn).getMax());
    properties.setProperty(TIME_UNIT,config.getSegmentTimeUnit());
  }
  if (config.containsCustomProperty(SEGMENT_START_TIME)) {
    properties.setProperty(SEGMENT_START_TIME,config.getStartTime());
  }
  if (config.containsCustomProperty(SEGMENT_END_TIME)) {
    properties.setProperty(SEGMENT_END_TIME,config.getEndTime());
  }
  if (config.containsCustomProperty(TIME_UNIT)) {
    properties.setProperty(TIME_UNIT,config.getSegmentTimeUnit());
  }
  for (  Map.Entry<String,String> entry : config.getCustomProperties().entrySet()) {
    properties.setProperty(entry.getKey(),entry.getValue());
  }
  for (  Map.Entry<String,ColumnIndexCreationInfo> entry : indexCreationInfoMap.entrySet()) {
    String column=entry.getKey();
    ColumnIndexCreationInfo columnIndexCreationInfo=entry.getValue();
    int dictionaryElementSize=dictionaryCreatorMap.get(column).getStringColumnMaxLength();
    boolean hasInvertedIndex=true;
    addColumnMetadataInfo(properties,column,columnIndexCreationInfo,totalDocs,totalRawDocs,totalAggDocs,schema.getFieldSpecFor(column),dictionaryElementSize,hasInvertedIndex);
  }
  properties.save();
}
