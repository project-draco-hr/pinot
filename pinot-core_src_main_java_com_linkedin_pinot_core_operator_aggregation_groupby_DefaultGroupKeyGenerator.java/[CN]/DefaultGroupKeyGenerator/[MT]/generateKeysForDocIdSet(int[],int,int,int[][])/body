{
  for (int i=0; i < _numGroupByColumns; i++) {
    if (_isSingleValueGroupByColumn[i]) {
      _singleBlockValSets[i].readIntValues(docIdSet,startIndex,length,_reusableSingleDictIds[i],0);
    }
  }
  int outIndex=0;
  int endIndex=startIndex + length;
switch (_storageType) {
case ARRAY_BASED:
    for (int i=startIndex; i < endIndex; i++) {
      docIdToGroupKeys[outIndex]=generateKeysForDocIdArrayBased(outIndex,docIdSet[i]);
      outIndex++;
    }
  break;
case LONG_MAP_BASED:
for (int i=startIndex; i < endIndex; i++) {
  docIdToGroupKeys[outIndex]=generateKeysForDocIdLongMapBased(outIndex,docIdSet[i]);
  outIndex++;
}
break;
case ARRAY_MAP_BASED:
for (int i=startIndex; i < endIndex; i++) {
docIdToGroupKeys[outIndex]=generateKeysForDocIdArrayMapBased(outIndex,docIdSet[i]);
outIndex++;
}
break;
default :
throw new RuntimeException("Unsupported storage type.");
}
}
