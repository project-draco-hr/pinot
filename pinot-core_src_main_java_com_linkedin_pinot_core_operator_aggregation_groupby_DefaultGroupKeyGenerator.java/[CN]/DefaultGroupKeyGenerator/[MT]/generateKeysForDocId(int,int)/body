{
  LongList groupKeysList=new LongArrayList();
  groupKeysList.add(0L);
  for (int i=_numGroupByColumns - 1; i >= 0; i--) {
    if (_isSingleValueGroupByColumn[i]) {
      int dictId=_reusableSingleDictIds[i][index];
      int size=groupKeysList.size();
      for (int j=0; j < size; j++) {
        groupKeysList.set(j,groupKeysList.getLong(j) * _cardinalities[i] + dictId);
      }
    }
 else {
      BlockMultiValIterator blockValIterator=_multiValIterators[i];
      blockValIterator.skipTo(docId);
      int numMultiValues=blockValIterator.nextIntVal(_reusableMultiValDictIdBuffer);
      int originalSize=groupKeysList.size();
      for (int j=0; j < numMultiValues - 1; j++) {
        for (int k=0; k < originalSize; k++) {
          groupKeysList.add(groupKeysList.getLong(k));
        }
      }
      for (int j=0; j < numMultiValues; j++) {
        for (int k=0; k < originalSize; k++) {
          int idx=j * originalSize + k;
          groupKeysList.set(idx,(groupKeysList.getLong(idx) * _cardinalities[i]) + _reusableMultiValDictIdBuffer[j]);
        }
      }
    }
  }
  int numGroupKeys=groupKeysList.size();
  int[] groupKeys=new int[numGroupKeys];
  for (int i=0; i < numGroupKeys; i++) {
    int groupKey=updateRawKeyToGroupKeyMapping(groupKeysList.getLong(i));
    groupKeys[i]=groupKey;
  }
  return groupKeys;
}
