{
  for (  String dimension : dimensionNames) {
    LOGGER.info("{} records passed metric threshold for dimension {}",thresholdPassCount.get(dimension),dimension);
    TopKDimensionSpec topkSpec=topKDimensionSpecMap.get(dimension);
    if (topkSpec != null && topkSpec.getDimensionName() != null && topkSpec.getMetricName() != null && topkSpec.getTop() != 0) {
      LOGGER.info("Picking Top {} values based on Metric {}",topkSpec.getTop(),topkSpec.getMetricName());
      MinMaxPriorityQueue<DimensionValueMetricPair> topKQueue=MinMaxPriorityQueue.maximumSize(topkSpec.getTop()).create();
      Map<String,Number[]> dimensionToMetricsMap=dimensionNameToValuesMap.get(dimension);
      for (      Entry<String,Number[]> entry : dimensionToMetricsMap.entrySet()) {
        topKQueue.add(new DimensionValueMetricPair(entry.getKey(),entry.getValue()[metricToIndexMapping.get(topkSpec.getMetricName())]));
      }
      for (      DimensionValueMetricPair pair : topKQueue) {
        topkDimensionValues.addValue(dimension,pair.getDimensionValue());
      }
    }
  }
  if (topkDimensionValues.getTopKDimensions().size() > 0) {
    String topkValuesPath=configuration.get(TOPK_PHASE_OUTPUT_PATH.toString());
    LOGGER.info("Writing top k values to {}",topkValuesPath);
    FSDataOutputStream topKDimensionValuesOutputStream=fileSystem.create(new Path(topkValuesPath + File.separator + TOPK_VALUES_FILE));
    OBJECT_MAPPER.writeValue(topKDimensionValuesOutputStream,topkDimensionValues);
    topKDimensionValuesOutputStream.close();
  }
}
