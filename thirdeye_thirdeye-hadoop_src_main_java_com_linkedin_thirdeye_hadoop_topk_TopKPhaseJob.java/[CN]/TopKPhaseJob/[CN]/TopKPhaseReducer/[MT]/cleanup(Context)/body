{
  for (  String dimension : dimensionNames) {
    LOGGER.info("{} records passed metric threshold for dimension {}",thresholdPassCount.get(dimension),dimension);
    TopKDimensionToMetricsSpec topkSpec=topKDimensionToMetricsSpecMap.get(dimension);
    if (topkSpec != null && topkSpec.getDimensionName() != null && topkSpec.getTopk() != null) {
      Map<String,Integer> topkMetricsMap=topkSpec.getTopk();
      for (      Entry<String,Integer> topKEntry : topkMetricsMap.entrySet()) {
        String metric=topKEntry.getKey();
        int k=topKEntry.getValue();
        MinMaxPriorityQueue<DimensionValueMetricPair> topKQueue=MinMaxPriorityQueue.maximumSize(k).create();
        Map<String,Number[]> dimensionToMetricsMap=dimensionNameToValuesMap.get(dimension);
        for (        Entry<String,Number[]> entry : dimensionToMetricsMap.entrySet()) {
          topKQueue.add(new DimensionValueMetricPair(entry.getKey(),entry.getValue()[metricToIndexMapping.get(metric)]));
        }
        LOGGER.info("Picking Top {} values for {} based on Metric {} : {}",k,dimension,metric,topKQueue);
        for (        DimensionValueMetricPair pair : topKQueue) {
          topkDimensionValues.addValue(dimension,pair.getDimensionValue());
        }
      }
    }
  }
  if (topkDimensionValues.getTopKDimensions().size() > 0) {
    String topkValuesPath=configuration.get(TOPK_PHASE_OUTPUT_PATH.toString());
    LOGGER.info("Writing top k values to {}",topkValuesPath);
    FSDataOutputStream topKDimensionValuesOutputStream=fileSystem.create(new Path(topkValuesPath + File.separator + ThirdEyeConstants.TOPK_VALUES_FILE));
    OBJECT_MAPPER.writeValue(topKDimensionValuesOutputStream,topkDimensionValues);
    topKDimensionValuesOutputStream.close();
  }
}
