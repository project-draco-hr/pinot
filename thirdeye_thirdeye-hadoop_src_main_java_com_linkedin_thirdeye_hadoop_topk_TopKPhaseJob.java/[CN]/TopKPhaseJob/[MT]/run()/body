{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(TopKPhaseJob.class);
  Configuration configuration=job.getConfiguration();
  FileSystem fs=FileSystem.get(configuration);
  LOGGER.info("Properties {}",props);
  String inputPathDir=getAndSetConfiguration(configuration,TOPK_PHASE_INPUT_PATH);
  LOGGER.info("Input path dir: " + inputPathDir);
  for (  String inputPath : inputPathDir.split(ThirdEyeConstants.FIELD_SEPARATOR)) {
    LOGGER.info("Adding input:" + inputPath);
    Path input=new Path(inputPath);
    FileInputFormat.addInputPath(job,input);
  }
  Path outputPath=new Path(getAndSetConfiguration(configuration,TOPK_PHASE_OUTPUT_PATH));
  LOGGER.info("Output path dir: " + outputPath.toString());
  if (fs.exists(outputPath)) {
    fs.delete(outputPath,true);
  }
  FileOutputFormat.setOutputPath(job,outputPath);
  Schema avroSchema=ThirdeyeAvroUtils.getSchema(inputPathDir);
  LOGGER.info("Schema : {}",avroSchema.toString(true));
  String metricTypesProperty=ThirdeyeAvroUtils.getMetricTypesProperty(props.getProperty(ThirdEyeConfigProperties.THIRDEYE_METRIC_NAMES.toString()),props.getProperty(ThirdEyeConfigProperties.THIRDEYE_METRIC_TYPES.toString()),avroSchema);
  props.setProperty(ThirdEyeConfigProperties.THIRDEYE_METRIC_TYPES.toString(),metricTypesProperty);
  ThirdEyeConfig thirdeyeConfig=ThirdEyeConfig.fromProperties(props);
  LOGGER.info("Thirdeye Config {}",thirdeyeConfig.encode());
  job.getConfiguration().set(TOPK_PHASE_THIRDEYE_CONFIG.toString(),OBJECT_MAPPER.writeValueAsString(thirdeyeConfig));
  job.setMapperClass(TopKPhaseMapper.class);
  job.setInputFormatClass(AvroKeyInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setCombinerClass(TopKPhaseCombiner.class);
  job.setReducerClass(TopKPhaseReducer.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(NullWritable.class);
  job.setNumReduceTasks(1);
  job.waitForCompletion(true);
  return job;
}
