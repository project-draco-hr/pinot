{
  ServerInstance s=new ServerInstance("localhost",8080);
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    f.cancel(false);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    Assert.assertTrue(listener.isCancelled(),"Cancelled ?");
    Assert.assertEquals(listener.getNumRuns(),1,"Num Runs of listener");
    Assert.assertTrue(listener.isDone(),"Is Done ? ");
    Assert.assertNull(listener.getMessage(),"No Reponse :");
    Assert.assertNull(listener.getError(),"No Error :");
    listener.close();
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    f.cancel(false);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    Assert.assertTrue(listener.isCancelled(),"Cancelled ?");
    Assert.assertEquals(listener.getNumRuns(),1,"Num Runs of listener");
    Assert.assertTrue(listener.isDone(),"Is Done ? ");
    Assert.assertNull(listener.getMessage(),"No Reponse :");
    Assert.assertNull(listener.getError(),"No Error :");
    listener.close();
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    Exception expectedError=new Exception("error processing");
    f.onError(expectedError);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    Assert.assertFalse(listener.isCancelled(),"Cancelled ?");
    Assert.assertEquals(listener.getNumRuns(),1,"Num Runs of listener");
    Assert.assertTrue(listener.isDone(),"Is Done ? ");
    Assert.assertNull(listener.getMessage(),"No Reponse :");
    Assert.assertEquals(listener.getError(),expectedError,"Error");
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    Exception expectedError=new Exception("error processing");
    f.onError(expectedError);
    WaitForCompletion w=new WaitForCompletion(listener);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    Assert.assertFalse(listener.isCancelled(),"Cancelled ?");
    Assert.assertEquals(listener.getNumRuns(),1,"Num Runs of listener");
    Assert.assertTrue(listener.isDone(),"Is Done ? ");
    Assert.assertNull(listener.getMessage(),"No Reponse :");
    Assert.assertEquals(listener.getError(),expectedError,"Error");
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    String message="dummy Message";
    setResponse(f,message);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    Assert.assertFalse(listener.isCancelled(),"Cancelled ?");
    Assert.assertEquals(listener.getNumRuns(),1,"Num Runs of listener");
    Assert.assertTrue(listener.isDone(),"Is Done ? ");
    Assert.assertEquals(listener.getMessage(),message,"Response Check:");
    Assert.assertNull(listener.getError(),"No Error :");
    listener.close();
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    String message="dummy Message";
    setResponse(f,message);
    WaitForCompletion w=new WaitForCompletion(listener);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    Assert.assertFalse(listener.isCancelled(),"Cancelled ?");
    Assert.assertEquals(listener.getNumRuns(),1,"Num Runs of listener");
    Assert.assertTrue(listener.isDone(),"Is Done ? ");
    Assert.assertEquals(listener.getMessage(),message,"Response Check:");
    Assert.assertNull(listener.getError(),"No Error :");
    listener.close();
  }
}
