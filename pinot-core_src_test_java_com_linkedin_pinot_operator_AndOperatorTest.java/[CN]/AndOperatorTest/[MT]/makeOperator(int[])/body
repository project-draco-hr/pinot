{
  return new Operator(){
    boolean alreadyInvoked=false;
    @Override public boolean open(){
      return true;
    }
    @Override public Block nextBlock(){
      if (alreadyInvoked) {
        return null;
      }
      alreadyInvoked=true;
      return new Block(){
        @Override public BlockId getId(){
          return null;
        }
        @Override public boolean applyPredicate(        Predicate predicate){
          return false;
        }
        @Override public BlockDocIdSet getBlockDocIdSet(){
          return new BlockDocIdSet(){
            int counter=0;
            @Override public BlockDocIdIterator iterator(){
              return new BlockDocIdIterator(){
                @Override public int advance(                int targetDocId){
                  int ret=Constants.EOF;
                  while (counter < list.length) {
                    if (list[counter] >= targetDocId) {
                      ret=list[counter];
                      break;
                    }
                    counter=counter + 1;
                  }
                  return ret;
                }
                @Override public int next(){
                  if (counter == list.length) {
                    return Constants.EOF;
                  }
                  int ret=list[counter];
                  counter=counter + 1;
                  return ret;
                }
                @Override public int currentDocId(){
                  return 0;
                }
              }
;
            }
            @Override public <T>T getRaw(){
              return null;
            }
          }
;
        }
        @Override public BlockValSet getBlockValueSet(){
          return null;
        }
        @Override public BlockDocIdValueSet getBlockDocIdValueSet(){
          return null;
        }
        @Override public BlockMetadata getMetadata(){
          return null;
        }
      }
;
    }
    @Override public Block nextBlock(    BlockId BlockId){
      return null;
    }
    @Override public boolean close(){
      return false;
    }
  }
;
}
