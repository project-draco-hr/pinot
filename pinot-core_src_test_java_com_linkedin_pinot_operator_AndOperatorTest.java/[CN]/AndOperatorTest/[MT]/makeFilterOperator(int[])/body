{
  return new BaseFilterOperator(){
    boolean alreadyInvoked=false;
    @Override public boolean open(){
      return false;
    }
    @Override public boolean close(){
      return false;
    }
    @Override public BaseFilterBlock nextFilterBlock(    BlockId blockId){
      if (alreadyInvoked) {
        return null;
      }
      alreadyInvoked=true;
      return new BaseFilterBlock(){
        @Override public BlockId getId(){
          return null;
        }
        @Override public FilterBlockDocIdSet getFilteredBlockDocIdSet(){
          return new FilterBlockDocIdSet(){
            @Override public BlockDocIdIterator iterator(){
              return new BlockDocIdIterator(){
                int counter=0;
                @Override public int advance(                int targetDocId){
                  int ret=Constants.EOF;
                  while (counter < list.length) {
                    if (list[counter] >= targetDocId) {
                      ret=list[counter];
                      break;
                    }
                    counter=counter + 1;
                  }
                  return ret;
                }
                @Override public int next(){
                  if (counter == list.length) {
                    return Constants.EOF;
                  }
                  int ret=list[counter];
                  counter=counter + 1;
                  return ret;
                }
                @Override public int currentDocId(){
                  return counter;
                }
              }
;
            }
            @Override public <T>T getRaw(){
              return null;
            }
            @Override public void setStartDocId(            int startDocId){
            }
            @Override public void setEndDocId(            int endDocId){
            }
            @Override public int getMinDocId(){
              return list[0];
            }
            @Override public int getMaxDocId(){
              return list[list.length - 1];
            }
          }
;
        }
      }
;
    }
  }
;
}
