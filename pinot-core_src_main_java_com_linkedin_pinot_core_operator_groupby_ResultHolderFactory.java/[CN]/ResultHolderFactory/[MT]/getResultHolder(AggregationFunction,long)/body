{
  String functionName=function.getName();
  if (maxNumResults <= MAX_NUM_GROUP_KEYS_FOR_ARRAY_BASED) {
    int initialCapacity=(int)Math.min(maxNumResults,INITIAL_RESULT_HOLDER_CAPACITY);
switch (functionName.toLowerCase()) {
case "count":
case "sum":
case "min":
case "max":
      double defaultValue=function.getDefaultValue();
    DoubleResultArray doubleResultArray=new DoubleResultArray(initialCapacity,defaultValue);
  return new DoubleArrayBasedResultHolder(doubleResultArray,initialCapacity,(int)maxNumResults,defaultValue);
case "avg":
DoubleLongResultArray doubleLongResultArray=new DoubleLongResultArray(initialCapacity,new Pair<Double,Long>(0.0,0L));
return new PairArrayBasedResultHolder(doubleLongResultArray,initialCapacity);
case "minmaxrange":
DoubleDoubleResultArray doubleDoubleResultArray=new DoubleDoubleResultArray(initialCapacity,new Pair<Double,Double>(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY));
return new PairArrayBasedResultHolder(doubleDoubleResultArray,initialCapacity);
default :
throw new RuntimeException("Aggregation function not implemented in ResultHolder: " + functionName);
}
}
 else {
switch (functionName.toLowerCase()) {
case "count":
case "sum":
case "min":
case "max":
double defaultValue=function.getDefaultValue();
return new MapBasedDoubleResultHolder(defaultValue);
case "avg":
case "minmaxrange":
return new MapBasedPairResultHolder();
default :
throw new RuntimeException("Aggregation function not implemented in ResultHolder: " + functionName);
}
}
}
