{
  String functionName=function.getName();
  int capacityCap=maxNumResults > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)maxNumResults;
  int initialCapacity=Math.min(capacityCap,INITIAL_RESULT_HOLDER_CAPACITY);
switch (functionName.toLowerCase()) {
case AggregationFunctionFactory.COUNT_AGGREGATION_FUNCTION:
case AggregationFunctionFactory.MAX_AGGREGATION_FUNCTION:
case AggregationFunctionFactory.MIN_AGGREGATION_FUNCTION:
case AggregationFunctionFactory.SUM_AGGREGATION_FUNCTION:
    double defaultValue=function.getDefaultValue();
  DoubleResultArray doubleResultArray=new DoubleResultArray(initialCapacity,defaultValue);
return new DoubleArrayBasedResultHolder(doubleResultArray,initialCapacity,capacityCap);
case AggregationFunctionFactory.AVG_AGGREGATION_FUNCTION:
DoubleLongResultArray doubleLongResultArray=new DoubleLongResultArray(initialCapacity,new Pair<>(0.0,0L));
return new PairArrayBasedResultHolder(doubleLongResultArray,initialCapacity,capacityCap);
case AggregationFunctionFactory.MINMAXRANGE_AGGREGATION_FUNCTION:
DoubleDoubleResultArray doubleDoubleResultArray=new DoubleDoubleResultArray(initialCapacity,new Pair<>(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY));
return new PairArrayBasedResultHolder(doubleDoubleResultArray,initialCapacity,capacityCap);
default :
return new ObjectArrayBasedResultHolder(initialCapacity,capacityCap);
}
}
