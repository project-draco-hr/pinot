{
  LOG.info("BEGIN\t{}: OFFLINE -> ONLINE",message.getPartitionId());
  String collection=message.getResourceName();
  int partitionId=Integer.valueOf(PartitionId.stripResourceId(message.getPartitionName()));
  if (externalDataSource != null) {
    String archiveName=String.format("%s_%d.tgz",collection,partitionId);
    File collectionDir=new File(rootDir,collection);
    File dataDir=new File(collectionDir,StarTreeConstants.DATA_DIR_NAME);
    File tmpFile=new File(tmpDir,archiveName);
    FileUtils.forceMkdir(collectionDir);
    FileUtils.forceMkdir(dataDir);
    if (tmpFile.exists()) {
      FileUtils.forceDelete(tmpFile);
    }
    Set<String> overwriteFilter=new HashSet<String>();
    File[] collectionDirFiles=collectionDir.listFiles();
    if (collectionDirFiles != null) {
      for (      File file : collectionDirFiles) {
        overwriteFilter.add(file.getName());
      }
    }
    File[] dataDirFiles=dataDir.listFiles();
    if (dataDirFiles != null) {
      for (      File file : dataDirFiles) {
        overwriteFilter.add(file.getName());
      }
    }
synchronized (externalDataSource) {
      OutputStream outputStream=new FileOutputStream(tmpFile);
      externalDataSource.copy(URI.create("/" + archiveName),outputStream);
      outputStream.flush();
      outputStream.close();
      LOG.info("Downloaded archive {}",archiveName);
    }
    InputStream inputStream=new FileInputStream(tmpFile);
    ThirdEyeTarUtils.extractGzippedTarArchive(inputStream,collectionDir,overwriteFilter,null);
    LOG.info("Extracted archive {} into {}",archiveName,collectionDir);
    FileUtils.forceDelete(tmpFile);
    LOG.info("Deleted {}",tmpFile);
  }
  starTreeManager.stub(rootDir,collection);
  StarTree starTree=starTreeManager.getStarTree(collection);
  Set<UUID> targetIds=getLeafIds(collection,partitionId,context);
  enableRecordStores(starTree.getRoot(),starTree.getConfig(),targetIds);
  LOG.info("END\t{}: OFFLINE -> ONLINE",message.getPartitionId());
}
