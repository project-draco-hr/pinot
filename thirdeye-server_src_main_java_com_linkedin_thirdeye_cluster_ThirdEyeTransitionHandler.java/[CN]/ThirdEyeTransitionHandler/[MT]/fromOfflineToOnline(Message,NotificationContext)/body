{
  LOG.info("BEGIN\t{}: OFFLINE -> ONLINE",message.getPartitionId());
  String collection=message.getResourceName();
  int partitionId=Integer.valueOf(PartitionId.stripResourceId(message.getPartitionName()));
  String skipBootstrap=context.getManager().getConfigAccessor().get(new HelixConfigScopeBuilder(HelixConfigScope.ConfigScopeProperty.CLUSTER).forCluster(context.getManager().getClusterName()).build(),"skipBootstrap");
  if (archiveSource != null && (skipBootstrap == null || !Boolean.valueOf(skipBootstrap))) {
    String archiveName=String.format("%s_%d.tgz",collection,partitionId);
    File collectionDir=new File(rootDir,collection);
    File dataDir=new File(collectionDir,StarTreeConstants.DATA_DIR_NAME);
    FileUtils.forceMkdir(collectionDir);
    FileUtils.forceMkdir(dataDir);
synchronized (archiveSource) {
      Set<String> overwriteFilter=new HashSet<String>();
      File[] collectionDirFiles=collectionDir.listFiles();
      if (collectionDirFiles != null) {
        for (        File file : collectionDirFiles) {
          overwriteFilter.add(file.getName());
        }
      }
      File[] dataDirFiles=dataDir.listFiles();
      if (dataDirFiles != null) {
        for (        File file : dataDirFiles) {
          overwriteFilter.add(file.getName());
        }
      }
      InputStream inputStream=URI.create(archiveSource.toString() + "/" + archiveName).toURL().openStream();
      ThirdEyeTarUtils.extractGzippedTarArchive(inputStream,collectionDir,overwriteFilter,null);
      inputStream.close();
      LOG.info("Downloaded and extracted archive {} into {}",archiveName,collectionDir);
    }
  }
  starTreeManager.stub(rootDir,collection);
  StarTree starTree=starTreeManager.getStarTree(collection);
  Set<UUID> targetIds=getLeafIds(collection,partitionId,context);
  enableRecordStores(starTree.getRoot(),starTree.getConfig(),starTree.getRecordStoreFactory(),targetIds);
  LOG.info("END\t{}: OFFLINE -> ONLINE",message.getPartitionId());
}
