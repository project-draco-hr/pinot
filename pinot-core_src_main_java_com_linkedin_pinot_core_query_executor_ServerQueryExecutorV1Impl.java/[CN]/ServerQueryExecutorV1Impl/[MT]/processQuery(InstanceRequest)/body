{
  DataTable instanceResponse;
  long start=System.currentTimeMillis();
  try {
    TraceContext.register(instanceRequest);
    final BrokerRequest brokerRequest=instanceRequest.getQuery();
    LOGGER.info("Incoming query is : {}",brokerRequest);
    long startPruningTime=System.nanoTime();
    final List<IndexSegment> queryableSegmentDataManagerList=getPrunedQueryableSegments(instanceRequest);
    long pruningTime=System.nanoTime() - startPruningTime;
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.SEGMENT_PRUNING,pruningTime);
    LOGGER.info("Matched {} segments! ",queryableSegmentDataManagerList.size());
    if (queryableSegmentDataManagerList.isEmpty()) {
      return null;
    }
    long startPlanTime=System.nanoTime();
    final Plan globalQueryPlan=_planMaker.makeInterSegmentPlan(queryableSegmentDataManagerList,brokerRequest,_instanceDataManager.getTableDataManager(brokerRequest.getQuerySource().getTableName()).getExecutorService(),getResourceTimeOut(instanceRequest.getQuery()));
    long planTime=System.nanoTime() - startPlanTime;
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.BUILD_QUERY_PLAN,planTime);
    if (_printQueryPlan) {
      LOGGER.debug("***************************** Query Plan for Request {} ***********************************",instanceRequest.getRequestId());
      globalQueryPlan.print();
      LOGGER.debug("*********************************** End Query Plan ***********************************");
    }
    long executeStartTime=System.nanoTime();
    globalQueryPlan.execute();
    long executeTime=System.nanoTime() - executeStartTime;
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.QUERY_PLAN_EXECUTION,executeTime);
    instanceResponse=globalQueryPlan.getInstanceResponse();
    long end=System.currentTimeMillis();
    LOGGER.info("Searching Instance for Request Id - {}, browse took: {}",instanceRequest.getRequestId(),(end - start));
    LOGGER.debug("InstanceResponse for Request Id - {} : {}",instanceRequest.getRequestId(),instanceResponse.toString());
    instanceResponse.getMetadata().put("timeUsedMs",Long.toString((end - start)));
    instanceResponse.getMetadata().put("requestId",Long.toString(instanceRequest.getRequestId()));
    instanceResponse.getMetadata().put("traceInfo",TraceContext.getTraceInfoOfRequestId(instanceRequest.getRequestId()));
    return instanceResponse;
  }
 catch (  Exception e) {
    _serverMetrics.addMeteredValue(instanceRequest.getQuery(),ServerMeter.QUERY_EXECUTION_EXCEPTIONS,1);
    LOGGER.error(e.getMessage(),e);
    instanceResponse=new DataTable();
    instanceResponse.addException(QueryException.getException(QueryException.QUERY_EXECUTION_ERROR,e));
    TraceContext.logException("ServerQueryExecutorV1Impl","Exception occurs in processQuery");
    long end=System.currentTimeMillis();
    LOGGER.info("Searching Instance for Request Id - {}, browse took: {}",instanceRequest.getRequestId(),(end - start));
    LOGGER.debug("InstanceResponse for Request Id - {} : {}",instanceRequest.getRequestId(),instanceResponse.toString());
    instanceResponse.getMetadata().put("timeUsedMs",Long.toString((end - start)));
    instanceResponse.getMetadata().put("requestId",Long.toString(instanceRequest.getRequestId()));
    instanceResponse.getMetadata().put("traceInfo",TraceContext.getTraceInfoOfRequestId(instanceRequest.getRequestId()));
    return instanceResponse;
  }
 finally {
    if (_instanceDataManager.getTableDataManager(instanceRequest.getQuery().getQuerySource().getTableName()) != null) {
      _instanceDataManager.getTableDataManager(instanceRequest.getQuery().getQuerySource().getTableName()).returnSegmentReaders(instanceRequest.getSearchSegments());
    }
    TraceContext.unregister(instanceRequest);
  }
}
