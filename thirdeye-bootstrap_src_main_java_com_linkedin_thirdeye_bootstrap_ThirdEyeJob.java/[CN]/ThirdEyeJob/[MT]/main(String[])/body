{
  if (args.length != 2) {
    usage();
    System.exit(1);
  }
  PhaseSpec phaseSpec;
  try {
    phaseSpec=PhaseSpec.valueOf(args[0].toUpperCase());
  }
 catch (  Exception e) {
    usage();
    throw e;
  }
  Properties config=new Properties();
  config.load(new FileInputStream(args[1]));
  String root=getAndCheck(ThirdEyeJobConstants.THIRDEYE_ROOT.getPropertyName(),config);
  String collection=getAndCheck(ThirdEyeJobConstants.THIRDEYE_COLLECTION.getPropertyName(),config);
  String inputPaths=getAndCheck(ThirdEyeJobConstants.INPUT_PATHS.getPropertyName(),config);
  long minTime=-1;
  long maxTime=-1;
  if (!PhaseSpec.ANALYSIS.equals(phaseSpec)) {
    FileSystem fileSystem=FileSystem.get(new Configuration());
    InputStream inputStream=fileSystem.open(new Path(phaseSpec.getAnalysisPath(root,collection),AnalysisJobConstants.ANALYSIS_FILE_NAME.toString()));
    AnalysisPhaseStats stats=AnalysisPhaseStats.fromBytes(IOUtils.toByteArray(inputStream));
    inputStream.close();
    if (!inputPaths.equals(stats.getInputPath())) {
      throw new IllegalStateException("Last analysis was done for input paths " + stats.getInputPath() + " not "+ inputPaths);
    }
    minTime=stats.getMinTime();
    maxTime=stats.getMaxTime();
  }
  if (PhaseSpec.SERVER_PUSH.equals(phaseSpec)) {
    String thirdEyeServerUri=config.getProperty(ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getPropertyName());
    if (thirdEyeServerUri == null) {
      throw new IllegalArgumentException("Must provide " + ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getPropertyName() + " in properties");
    }
    Path dataPath=new Path(PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getTimeDir(root,collection,minTime,maxTime) + File.separator + PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getName());
    FileSystem fileSystem=FileSystem.get(new Configuration());
    RemoteIterator<LocatedFileStatus> itr=fileSystem.listFiles(dataPath,false);
    while (itr.hasNext()) {
      LocatedFileStatus fileStatus=itr.next();
      if (fileStatus.getPath().getName().startsWith("task_")) {
        InputStream leafData=fileSystem.open(fileStatus.getPath());
        int responseCode=StarTreeJobUtils.pushToThirdEyeServer(leafData,thirdEyeServerUri,collection);
        leafData.close();
        LOG.info("POST {} to {} for {} #=> {}",fileStatus.getPath(),thirdEyeServerUri,collection,responseCode);
      }
    }
  }
 else {
    Properties jobProperties=phaseSpec.getJobProperties(root,collection,minTime,maxTime,inputPaths);
    Constructor<?> constructor=phaseSpec.getKlazz().getConstructor(String.class,Properties.class);
    Object instance=constructor.newInstance(phaseSpec.getName(),jobProperties);
    Method runMethod=instance.getClass().getMethod("run");
    runMethod.invoke(instance);
  }
}
