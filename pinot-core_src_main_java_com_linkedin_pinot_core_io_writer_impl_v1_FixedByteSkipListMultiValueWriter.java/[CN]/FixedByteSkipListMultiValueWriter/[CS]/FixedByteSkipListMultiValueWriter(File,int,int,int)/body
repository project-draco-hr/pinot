{
  float averageValuesPerDoc=totalNumValues / numDocs;
  this.docsPerChunk=(int)(Math.ceil(PREFERRED_NUM_VALUES_PER_CHUNK / averageValuesPerDoc));
  this.numChunks=(numDocs + docsPerChunk - 1) / docsPerChunk;
  chunkOffsetHeaderSize=numChunks * SIZE_OF_INT * NUM_COLS_IN_HEADER;
  bitsetSize=(totalNumValues + 7) / 8;
  rawDataSize=totalNumValues * columnSizeInBytes;
  totalSize=chunkOffsetHeaderSize + bitsetSize + rawDataSize;
  indexDataBuffer=PinotDataBuffer.fromFile(file,0,totalSize,ReadMode.mmap,FileChannel.MapMode.READ_WRITE,file.getAbsolutePath() + "." + this.getClass().getCanonicalName());
  chunkOffsetsBuffer=indexDataBuffer.view(0,chunkOffsetHeaderSize);
  int bitsetEndPos=chunkOffsetHeaderSize + bitsetSize;
  bitsetBuffer=indexDataBuffer.view(chunkOffsetHeaderSize,bitsetEndPos);
  rawDataBuffer=indexDataBuffer.view(bitsetEndPos,bitsetEndPos + rawDataSize);
  chunkOffsetsWriter=new FixedByteSingleValueMultiColWriter(chunkOffsetsBuffer,numDocs,NUM_COLS_IN_HEADER,new int[]{SIZE_OF_INT});
  customBitSet=PinotDataCustomBitSet.withDataBuffer(bitsetSize,bitsetBuffer);
  rawDataWriter=new FixedByteSingleValueMultiColWriter(rawDataBuffer,totalNumValues,1,new int[]{columnSizeInBytes});
}
