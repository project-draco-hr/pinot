{
  DetectionTaskInfo detectionTaskInfo=(DetectionTaskInfo)taskInfo;
  List<TaskResult> taskResult=new ArrayList<>();
  LOG.info("Begin executing task {}",taskInfo);
  resultDAO=taskContext.getResultDAO();
  anomalyFunctionFactory=taskContext.getAnomalyFunctionFactory();
  anomalyFunctionSpec=detectionTaskInfo.getAnomalyFunctionSpec();
  anomalyFunction=anomalyFunctionFactory.fromSpec(anomalyFunctionSpec);
  windowStart=detectionTaskInfo.getWindowStartTime();
  windowEnd=detectionTaskInfo.getWindowEndTime();
  TimeGranularity timeGranularity=new TimeGranularity(anomalyFunctionSpec.getBucketSize(),anomalyFunctionSpec.getBucketUnit());
  metricFunction=new MetricFunction(anomalyFunctionSpec.getMetricFunction(),anomalyFunctionSpec.getMetric());
  String filters=anomalyFunctionSpec.getFilters();
  LOG.info("Running anomaly detection job with metricFunction: {}, collection: {}",metricFunction,anomalyFunctionSpec.getCollection());
  CollectionSchema collectionSchema=null;
  try {
    collectionSchema=CACHE_REGISTRY_INSTANCE.getCollectionSchemaCache().get(anomalyFunctionSpec.getCollection());
    collectionDimensions=collectionSchema.getDimensionNames();
  }
 catch (  Exception e) {
    LOG.error("Exception when reading collection schema cache",e);
  }
  knownAnomalies=getExistingAnomalies();
  TimeSeriesRequest topLevelRequest=new TimeSeriesRequest();
  topLevelRequest.setCollectionName(anomalyFunctionSpec.getCollection());
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(metricFunction.getMetricName(),anomalyFunctionSpec.getMetricFunction(),anomalyFunctionSpec.getCollection());
  topLevelRequest.setMetricExpressions(metricExpressions);
  topLevelRequest.setAggregationTimeGranularity(timeGranularity);
  topLevelRequest.setStart(windowStart);
  topLevelRequest.setEnd(windowEnd);
  topLevelRequest.setEndDateInclusive(false);
  if (StringUtils.isNotBlank(filters)) {
    topLevelRequest.setFilterSet(ThirdEyeUtils.getFilterSet(filters));
  }
  String exploreDimension=detectionTaskInfo.getGroupByDimension();
  if (StringUtils.isNotBlank(exploreDimension)) {
    topLevelRequest.setGroupByDimensions(Collections.singletonList(detectionTaskInfo.getGroupByDimension()));
  }
  LOG.info("Running anomaly detection job with windowStartProp: {}, windowEndProp: {}, metricExpressions: {}, timeGranularity: {}, windowStart: {}, windowEnd: {}",windowStart,windowEnd,metricExpressions,timeGranularity);
  List<RawAnomalyResultDTO> results=exploreCombination(topLevelRequest);
  LOG.info("{} anomalies found in total",anomalyCounter);
  return taskResult;
}
