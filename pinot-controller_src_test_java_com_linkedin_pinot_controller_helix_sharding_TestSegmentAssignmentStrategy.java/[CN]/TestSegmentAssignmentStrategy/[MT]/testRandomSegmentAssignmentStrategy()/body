{
  final int numRelicas=2;
  final int numInstancesPerReplica=10;
  final int totalNumInstances=numRelicas * numInstancesPerReplica;
  final DataResource resource=ControllerRequestBuilderUtil.createOfflineClusterCreationConfig(totalNumInstances,numRelicas,RESOURCE_NAME_RANDOM,"RandomAssignmentStrategy");
  _pinotResourceManager.handleCreateNewDataResource(resource);
  final DataResource addTableResourceRandom=ControllerRequestBuilderUtil.createOfflineClusterAddTableToResource(RESOURCE_NAME_RANDOM,"testTable");
  _pinotResourceManager.handleAddTableToDataResource(addTableResourceRandom);
  Thread.sleep(3000);
  for (int i=0; i < 10; ++i) {
    addOneSegment(RESOURCE_NAME_RANDOM);
    Thread.sleep(2000);
    final List<String> taggedInstances=_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,BrokerRequestUtils.getOfflineResourceNameForResource(RESOURCE_NAME_RANDOM));
    final Map<String,Integer> instance2NumSegmentsMap=new HashMap<String,Integer>();
    for (    final String instance : taggedInstances) {
      instance2NumSegmentsMap.put(instance,0);
    }
    final ExternalView externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,BrokerRequestUtils.getOfflineResourceNameForResource(RESOURCE_NAME_RANDOM));
    Assert.assertEquals(externalView.getPartitionSet().size(),i + 1);
    for (    final String segmentId : externalView.getPartitionSet()) {
      Assert.assertEquals(externalView.getStateMap(segmentId).size(),numRelicas);
    }
  }
}
