{
  List<ScatterGatherPerfServer> servers=null;
  if (_mode != ExecutionMode.RUN_CLIENT) {
    servers=runServer();
  }
  if (_mode != ExecutionMode.RUN_SERVER) {
    int port=_startPortNum;
    RoutingTableConfig config=new RoutingTableConfig();
    Map<String,PerTableRoutingConfig> cfg=config.getPerTableRoutingCfg();
    PerTableRoutingConfig c=new PerTableRoutingConfig(null);
    Map<Integer,List<ServerInstance>> instanceMap=c.getNodeToInstancesMap();
    port=_startPortNum;
    int numUniqueServers=_remoteServerHosts.size();
    for (int i=0; i < _numServers; i++) {
      List<ServerInstance> instances=new ArrayList<ServerInstance>();
      String server=null;
      if (_mode == ExecutionMode.RUN_BOTH)       server="localhost";
 else       server=_remoteServerHosts.get(i % numUniqueServers);
      ServerInstance instance=new ServerInstance(server,port++);
      instances.add(instance);
      instanceMap.put(i,instances);
    }
    String server=null;
    if (_mode == ExecutionMode.RUN_BOTH)     server="localhost";
 else     server=_remoteServerHosts.get(0);
    c.getDefaultServers().add(new ServerInstance(server,port - 1));
    cfg.put(_resourceName,c);
    System.out.println("Routing Config is :" + cfg);
    List<Thread> clientThreads=new ArrayList<Thread>();
    List<ScatterGatherPerfClient> clients=new ArrayList<ScatterGatherPerfClient>();
    AggregatedHistogram<Histogram> latencyHistogram=new AggregatedHistogram<Histogram>();
    for (int i=0; i < _numClients; i++) {
      ScatterGatherPerfClient c2=new ScatterGatherPerfClient(config,_requestSize,_resourceName,_asyncRequestDispatch,_numRequests,_maxActiveConnectionsPerClientServerPair,_numResponseReaderThreads);
      Thread t=new Thread(c2);
      clients.add(c2);
      latencyHistogram.add(c2.getLatencyHistogram());
      clientThreads.add(t);
    }
    System.out.println("Starting the clients !!");
    long startTimeMs=0;
    for (    Thread t2 : clientThreads)     t2.start();
    System.out.println("Waiting for clients to finish");
    for (    Thread t2 : clientThreads)     t2.join();
    Thread.sleep(3000);
    System.out.println("Client threads done !!");
    int totalRequestsMeasured=0;
    long beginRequestTime=Long.MAX_VALUE;
    long endResponseTime=Long.MIN_VALUE;
    for (    ScatterGatherPerfClient c3 : clients) {
      int numRequestsMeasured=c3.getNumRequestsMeasured();
      totalRequestsMeasured+=numRequestsMeasured;
      beginRequestTime=Math.min(beginRequestTime,c3.getBeginFirstRequestTime());
      endResponseTime=Math.max(endResponseTime,c3.getEndLastResponseTime());
    }
    long totalTimeTakenMs=endResponseTime - beginRequestTime;
    System.out.println("Overall Total Num Requests :" + totalRequestsMeasured);
    System.out.println("Overall Total time :" + totalTimeTakenMs);
    System.out.println("Overall Throughput (Requests/Second) :" + ((totalRequestsMeasured * 1.0 * 1000) / totalTimeTakenMs));
    latencyHistogram.refresh();
    System.out.println("Latency :" + new LatencyMetric<AggregatedHistogram<Histogram>>(latencyHistogram));
  }
  if (_mode == ExecutionMode.RUN_BOTH) {
    for (    ScatterGatherPerfServer s : servers) {
      s.shutdown();
    }
  }
}
