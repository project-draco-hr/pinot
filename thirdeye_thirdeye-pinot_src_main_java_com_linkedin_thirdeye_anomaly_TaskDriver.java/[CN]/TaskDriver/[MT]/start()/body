{
  List<Callable<Void>> callables=new ArrayList<>();
  for (int i=0; i < MAX_PARALLEL_TASK; i++) {
    Callable<Void> callable=new Callable<Void>(){
      @Override public Void call() throws Exception {
        while (!shutdown) {
          LOG.info(Thread.currentThread().getId() + " : Finding next task to execute for threadId:{}",Thread.currentThread().getId());
          AnomalyTaskSpec anomalyTaskSpec=selectAndUpdate();
          LOG.info(Thread.currentThread().getId() + " : Executing task: {} {}",anomalyTaskSpec.getTaskId(),anomalyTaskSpec.getTaskInfo());
          TaskRunner taskRunner=new TaskRunner(anomalyFunctionFactory);
          TaskInfo taskInfo=null;
          try {
            taskInfo=OBJECT_MAPPER.readValue(anomalyTaskSpec.getTaskInfo(),TaskInfo.class);
          }
 catch (          Exception e) {
            LOG.error("Exception in converting taskInfo string to TaskInfo {}",anomalyTaskSpec.getTaskInfo(),e);
          }
          LOG.info(Thread.currentThread().getId() + " : Task Info {}",taskInfo);
          List<AnomalyResult> anomalyResults=taskRunner.execute(taskInfo,taskContext);
          LOG.info(Thread.currentThread().getId() + " : DONE Executing task: {}",anomalyTaskSpec.getTaskId());
          updateStatus(anomalyTaskSpec.getTaskId(),JobStatus.RUNNING,JobStatus.COMPLETED);
        }
        return null;
      }
    }
;
    callables.add(callable);
  }
  for (  Callable<Void> callable : callables) {
    taskExecutorService.submit(callable);
  }
  LOG.info(Thread.currentThread().getId() + " : Started task driver");
}
