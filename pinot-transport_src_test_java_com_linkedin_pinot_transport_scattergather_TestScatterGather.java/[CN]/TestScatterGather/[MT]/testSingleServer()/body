{
  MetricsRegistry registry=new MetricsRegistry();
  int serverPort=7071;
  NettyTCPServer server1=new NettyTCPServer(serverPort,new TestRequestHandlerFactory(0,1),null);
  Thread t1=new Thread(server1);
  t1.start();
  ScheduledExecutorService timedExecutor=new ScheduledThreadPoolExecutor(1);
  ExecutorService poolExecutor=MoreExecutors.sameThreadExecutor();
  ExecutorService service=new ThreadPoolExecutor(1,1,1,TimeUnit.DAYS,new LinkedBlockingDeque<Runnable>());
  EventLoopGroup eventLoopGroup=new NioEventLoopGroup();
  NettyClientMetrics clientMetrics=new NettyClientMetrics(registry,"client_");
  PooledNettyClientResourceManager rm=new PooledNettyClientResourceManager(eventLoopGroup,new HashedWheelTimer(),clientMetrics);
  KeyedPoolImpl<ServerInstance,NettyClientConnection> pool=new KeyedPoolImpl<ServerInstance,NettyClientConnection>(1,1,300000,1,rm,timedExecutor,poolExecutor,registry);
  rm.setPool(pool);
  ScatterGatherImpl scImpl=new ScatterGatherImpl(pool,service);
  SegmentIdSet pg=new SegmentIdSet();
  pg.addSegment(new SegmentId("0"));
  ServerInstance serverInstance1=new ServerInstance("localhost",serverPort);
  List<ServerInstance> instances=new ArrayList<ServerInstance>();
  instances.add(serverInstance1);
  Map<ServerInstance,SegmentIdSet> pgMap=new HashMap<ServerInstance,SegmentIdSet>();
  pgMap.put(serverInstance1,pg);
  String request="request_0";
  Map<SegmentIdSet,String> pgMapStr=new HashMap<SegmentIdSet,String>();
  pgMapStr.put(pg,request);
  ScatterGatherRequest req=new TestScatterGatherRequest(pgMap,pgMapStr);
  CompositeFuture<ServerInstance,ByteBuf> fut=scImpl.scatterGather(req);
  Map<ServerInstance,ByteBuf> v=fut.get();
  ByteBuf b=v.get(serverInstance1);
  byte[] b2=new byte[b.readableBytes()];
  b.readBytes(b2);
  String response=new String(b2);
  AssertJUnit.assertEquals("response_0_0",response);
  AssertJUnit.assertEquals(1,v.size());
  server1.shutdownGracefully();
  pool.shutdown();
  service.shutdown();
  eventLoopGroup.shutdownGracefully();
}
