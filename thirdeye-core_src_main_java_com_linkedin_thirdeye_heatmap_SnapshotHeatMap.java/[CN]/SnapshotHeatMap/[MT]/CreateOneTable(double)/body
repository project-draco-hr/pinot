{
  int rowNum=_nRecords;
  int colNum=_maxRecords + 1;
  RealMatrix table=new Array2DRowRealMatrix(rowNum,colNum);
  String[][] recordTable=new String[rowNum][colNum];
  double variance=0.0;
  for (int ii=0; ii < rowNum; ii++) {
    double[] valueList=_snapshotDictionary.get(_dimensionValue[ii]);
    variance+=(valueList[1] - r * valueList[0]) * (valueList[1] - r * valueList[0]);
  }
  _knob=Math.sqrt(variance);
  for (int row_index=0; row_index < rowNum; row_index++) {
    double[] valueList=_snapshotDictionary.get(_dimensionValue[row_index]);
    if (row_index == 0) {
      table.setEntry(row_index,0,loss(r,valueList[0],valueList[1],_knob));
    }
 else {
      table.setEntry(row_index,0,table.getEntry(row_index - 1,0) + loss(r,valueList[0],valueList[1],_knob));
    }
    recordTable[row_index][0]="Rest";
  }
  for (int col_index=1; col_index < colNum; col_index++) {
    table.setEntry(0,col_index,0);
    recordTable[0][col_index]=_dimensionValue[0];
  }
  for (int row_index=1; row_index < rowNum; row_index++) {
    double[] valueList=_snapshotDictionary.get(_dimensionValue[row_index]);
    for (int col_index=1; col_index < colNum; col_index++) {
      double tmp1=table.getEntry(row_index - 1,col_index - 1);
      double tmp2=table.getEntry(row_index - 1,col_index) + loss(r,valueList[0],valueList[1],_knob);
      table.setEntry(row_index,col_index,Math.min(tmp1,tmp2));
      if (tmp1 < tmp2) {
        recordTable[row_index][col_index]=String.format("%s,%s",_dimensionValue[row_index],recordTable[row_index - 1][col_index - 1]);
      }
 else {
        String tmp_str=recordTable[row_index - 1][col_index];
        if (tmp_str.contains("Rest")) {
          recordTable[row_index][col_index]=recordTable[row_index - 1][col_index];
        }
 else         recordTable[row_index][col_index]=String.format("%s,%s",recordTable[row_index - 1][col_index],"Rest");
      }
    }
  }
  TableReturn rightLowerCell=new TableReturn();
  return rightLowerCell;
}
