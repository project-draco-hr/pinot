{
  File dictDir=new File(outputDir,StarTreeConstants.DICT_STORE);
  FileUtils.forceMkdir(dictDir);
  File dictFile=new File(dictDir,nodeId);
  FileOutputStream fos=new FileOutputStream(dictFile);
  ObjectOutputStream oos=new ObjectOutputStream(fos);
  oos.writeObject(dictionary);
  oos.flush();
  oos.close();
  List<DimensionKey> dimensionKeys=new ArrayList<DimensionKey>(records.keySet());
  Collections.sort(dimensionKeys);
  int dimensionBufferSize=dimensionKeys.size() * config.getDimensions().size() * Integer.SIZE / 8;
  File dimensionDir=new File(outputDir,StarTreeConstants.DIMENSION_STORE);
  File dimensionFile=new File(dimensionDir,nodeId);
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug("Dimension buffer for node {}: bytes={}, numKeys={}, numDimensions={}, file={}",nodeId,dimensionBufferSize,dimensionKeys.size(),config.getDimensions().size(),dimensionFile);
  }
  ByteBuffer dimensionBuffer=ByteBuffer.allocate(dimensionBufferSize);
  for (  DimensionKey dimensionKey : dimensionKeys) {
    StorageUtils.addToDimensionStore(config,dimensionBuffer,dimensionKey,dictionary);
  }
  dimensionBuffer.flip();
  FileUtils.forceMkdir(dimensionDir);
  FileChannel dimensionFileChannel=new RandomAccessFile(dimensionFile,"rw").getChannel();
  dimensionFileChannel.write(dimensionBuffer);
  dimensionFileChannel.close();
  List<MetricTimeSeries> timeSeriesList=new ArrayList<MetricTimeSeries>();
  for (  DimensionKey dimensionKey : dimensionKeys) {
    MetricTimeSeries timeSeries=records.get(dimensionKey);
    timeSeriesList.add(timeSeries);
  }
  ByteBuffer metricBuffer=createMetricBuffer(config,timeSeriesList);
  File metricDir=new File(outputDir,StarTreeConstants.METRIC_STORE);
  FileUtils.forceMkdir(metricDir);
  long minTime=-1;
  long maxTime=-1;
  for (  DimensionKey dimensionKey : dimensionKeys) {
    MetricTimeSeries timeSeries=records.get(dimensionKey);
    for (    Long time : timeSeries.getTimeWindowSet()) {
      if (minTime == -1 || time < minTime) {
        minTime=time;
      }
      if (maxTime == -1 || time > maxTime) {
        maxTime=time;
      }
    }
  }
  RandomAccessFile metricFile=new RandomAccessFile(new File(metricDir,nodeId + "_" + minTime+ ":"+ maxTime),"rw");
  FileChannel metricFileChannel=metricFile.getChannel();
  metricFileChannel.write(metricBuffer);
  metricFileChannel.close();
  metricFile.close();
}
