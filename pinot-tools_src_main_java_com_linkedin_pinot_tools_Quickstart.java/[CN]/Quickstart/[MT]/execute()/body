{
  _quickStartDataDir=new File("quickStartData" + System.currentTimeMillis());
  String quickStartDataDirName=_quickStartDataDir.getName();
  if (!_quickStartDataDir.exists()) {
    _quickStartDataDir.mkdir();
  }
  File schemaFile=new File(quickStartDataDirName + "/baseball.schema");
  File dataFile=new File(quickStartDataDirName + "/baseball.csv");
  File tableCreationJsonFileName=new File(quickStartDataDirName + "/baseballTable.json");
  FileUtils.copyURLToFile(Quickstart.class.getClassLoader().getResource("sample_data/baseball.schema"),schemaFile);
  FileUtils.copyURLToFile(Quickstart.class.getClassLoader().getResource("sample_data/baseball.csv"),dataFile);
  FileUtils.copyURLToFile(Quickstart.class.getClassLoader().getResource("sample_data/baseballTable.json"),tableCreationJsonFileName);
  File tempDirOne=new File("/tmp/" + System.currentTimeMillis());
  tempDirOne.mkdir();
  File tempDir=new File("/tmp/" + String.valueOf(System.currentTimeMillis()));
  String tableName="baseballStats";
  final QuickstartRunner runner=new QuickstartRunner(schemaFile,_quickStartDataDir,tempDir,tableName,tableCreationJsonFileName.getAbsolutePath());
  runner.clean();
  runner.startAll();
  printStatus(color.CYAN,"Deployed Zookeeper");
  printStatus(color.CYAN,"Deployed controller, broker and server");
  runner.addSchema();
  printStatus(color.CYAN,"Added baseballStats schema");
  runner.addTable();
  printStatus(color.CYAN,"Creating baseballStats table");
  runner.buildSegment();
  printStatus(color.CYAN,"Built index segment for baseballStats");
  runner.pushSegment();
  printStatus(color.CYAN,"Pushing segments to the controller");
  printStatus(color.CYAN,"Waiting for a second for the server to fetch the assigned segment");
  Thread.sleep(5000);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      try {
        printStatus(color.GREEN,"***** shutting down offline quick start *****");
        FileUtils.deleteDirectory(_quickStartDataDir);
        runner.clean();
        runner.stop();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  printStatus(color.YELLOW,"Offline quickstart complete");
  String q1="select count(*) from baseballStats limit 0";
  printStatus(color.YELLOW,"Total number of documents in the table");
  printStatus(color.CYAN,"Query : " + q1);
  printStatus(color.YELLOW,prettyprintResponse(runner.runQuery(q1)));
  printStatus(color.GREEN,"***************************************************");
  String q2="select sum('runs') from baseballStats group by playerName top 5 limit 0";
  printStatus(color.YELLOW,"Top 5 run scorers of all time ");
  printStatus(color.CYAN,"Query : " + q2);
  printStatus(color.YELLOW,prettyprintResponse(runner.runQuery(q2)));
  printStatus(color.GREEN,"***************************************************");
  String q3="select sum('runs') from baseballStats where yearID=2000 group by playerName top 5 limit 0";
  printStatus(color.YELLOW,"Top 5 run scorers of the year 2000");
  printStatus(color.CYAN,"Query : " + q3);
  printStatus(color.YELLOW,prettyprintResponse(runner.runQuery(q3)));
  printStatus(color.GREEN,"***************************************************");
  String q4="select sum('runs') from baseballStats where yearID>=2000 group by playerName limit 0";
  printStatus(color.YELLOW,"Top 10 run scorers after 2000");
  printStatus(color.CYAN,"Query : " + q4);
  printStatus(color.YELLOW,prettyprintResponse(runner.runQuery(q4)));
  printStatus(color.GREEN,"***************************************************");
  String q5="select playerName,runs,homeRuns from baseballStats order by yearID limit 10";
  printStatus(color.YELLOW,"Print playerName,runs,homeRuns for 10 records from the table and order them by yearID");
  printStatus(color.CYAN,"Query : " + q5);
  printStatus(color.YELLOW,prettyprintResponse(runner.runQuery(q5)));
  printStatus(color.GREEN,"***************************************************");
  printStatus(color.GREEN,"you can always go to http://localhost:9000/query/index.html to play around in the query console");
  long st=System.currentTimeMillis();
  while (true) {
    if (System.currentTimeMillis() - st >= (60 * 60) * 1000) {
      break;
    }
  }
  printStatus(color.YELLOW,"running since an hour, stopping now");
  return true;
}
