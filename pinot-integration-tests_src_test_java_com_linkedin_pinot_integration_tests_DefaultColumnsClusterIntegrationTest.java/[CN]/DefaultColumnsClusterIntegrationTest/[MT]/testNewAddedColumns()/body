{
  String pqlQuery;
  String sqlQuery;
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedIntMetric = 1";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedLongMetric = 1";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedFloatMetric = 0.0";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedDoubleMetric = 0.0";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedIntDimension < 0";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedLongDimension < 0";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedFloatDimension < 0.0";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedDoubleDimension < 0.0";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT COUNT(*) FROM mytable WHERE NewAddedStringDimension = 'newAdded'";
  sqlQuery="SELECT COUNT(*) FROM mytable";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT SUM(NewAddedIntMetric) FROM mytable WHERE DaysSinceEpoch <= 16312";
  sqlQuery="SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch <= 16312";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT SUM(NewAddedIntMetric) FROM mytable WHERE DaysSinceEpoch > 16312";
  sqlQuery="SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch > 16312";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT SUM(NewAddedLongMetric) FROM mytable WHERE DaysSinceEpoch <= 16312";
  sqlQuery="SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch <= 16312";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  pqlQuery="SELECT SUM(NewAddedLongMetric) FROM mytable WHERE DaysSinceEpoch > 16312";
  sqlQuery="SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch > 16312";
  runQuery(pqlQuery,Collections.singletonList(sqlQuery));
  JSONObject response;
  JSONObject groupByResult;
  pqlQuery="SELECT SUM(NewAddedFloatMetric) FROM mytable GROUP BY NewAddedStringDimension";
  response=postQuery(pqlQuery);
  groupByResult=response.getJSONArray("aggregationResults").getJSONObject(0).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),0);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),"newAdded");
  pqlQuery="SELECT SUM(NewAddedDoubleMetric) FROM mytable GROUP BY NewAddedIntDimension";
  response=postQuery(pqlQuery);
  groupByResult=response.getJSONArray("aggregationResults").getJSONObject(0).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),0);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),String.valueOf(Integer.MIN_VALUE));
  pqlQuery="SELECT SUM(NewAddedIntMetric) FROM mytable GROUP BY NewAddedLongDimension";
  response=postQuery(pqlQuery);
  groupByResult=response.getJSONArray("aggregationResults").getJSONObject(0).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),TOTAL_DOCS);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),String.valueOf(Long.MIN_VALUE));
  pqlQuery="SELECT SUM(NewAddedIntMetric), SUM(NewAddedLongMetric), SUM(NewAddedFloatMetric), SUM(NewAddedDoubleMetric) " + "FROM mytable GROUP BY NewAddedIntDimension, NewAddedLongDimension, NewAddedFloatDimension, " + "NewAddedDoubleDimension, NewAddedStringDimension";
  response=postQuery(pqlQuery);
  JSONArray groupByResultArray=response.getJSONArray("aggregationResults");
  groupByResult=groupByResultArray.getJSONObject(0).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),TOTAL_DOCS);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),String.valueOf(Integer.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(1),String.valueOf(Long.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(2),String.valueOf(Float.NEGATIVE_INFINITY));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(3),String.valueOf(Double.NEGATIVE_INFINITY));
  groupByResult=groupByResultArray.getJSONObject(1).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),TOTAL_DOCS);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),String.valueOf(Integer.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(1),String.valueOf(Long.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(2),String.valueOf(Float.NEGATIVE_INFINITY));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(3),String.valueOf(Double.NEGATIVE_INFINITY));
  groupByResult=groupByResultArray.getJSONObject(2).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),0);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),String.valueOf(Integer.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(1),String.valueOf(Long.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(2),String.valueOf(Float.NEGATIVE_INFINITY));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(3),String.valueOf(Double.NEGATIVE_INFINITY));
  groupByResult=groupByResultArray.getJSONObject(3).getJSONArray("groupByResult").getJSONObject(0);
  Assert.assertEquals(groupByResult.getInt("value"),0);
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(0),String.valueOf(Integer.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(1),String.valueOf(Long.MIN_VALUE));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(2),String.valueOf(Float.NEGATIVE_INFINITY));
  Assert.assertEquals(groupByResult.getJSONArray("group").getString(3),String.valueOf(Double.NEGATIVE_INFINITY));
  pqlQuery="SELECT * FROM mytable";
  runNoH2ComparisonQuery(pqlQuery);
}
