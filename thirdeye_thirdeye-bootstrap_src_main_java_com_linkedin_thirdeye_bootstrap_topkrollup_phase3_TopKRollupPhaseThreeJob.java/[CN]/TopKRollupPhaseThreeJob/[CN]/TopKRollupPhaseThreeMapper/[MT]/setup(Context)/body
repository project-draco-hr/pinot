{
  LOGGER.info("TopKRollupPhaseThreeJob.TopKRollupPhaseThreeMapper.setup()");
  Configuration configuration=context.getConfiguration();
  FileSystem fileSystem=FileSystem.get(configuration);
  Path configPath=new Path(configuration.get(TOPK_ROLLUP_PHASE3_CONFIG_PATH.toString()));
  Path topKDimensionsPath=new Path(configuration.get(TOPK_DIMENSIONS_PATH.toString()));
  try {
    starTreeConfig=StarTreeConfig.decode(fileSystem.open(configPath));
    config=TopKRollupPhaseThreeConfig.fromStarTreeConfig(starTreeConfig);
    dimensionNames=config.getDimensionNames();
    metricTypes=config.getMetricTypes();
    metricSchema=new MetricSchema(config.getMetricNames(),metricTypes);
    dimensionNameToIndexMapping=new HashMap<String,Integer>();
    for (int i=0; i < dimensionNames.size(); i++) {
      dimensionNameToIndexMapping.put(dimensionNames.get(i),i);
    }
    keyWritable=new BytesWritable();
    valWritable=new BytesWritable();
    topKDimensionValues=new TopKDimensionValues();
    FileStatus[] fileStatuses=fileSystem.listStatus(topKDimensionsPath,new PathFilter(){
      @Override public boolean accept(      Path p){
        return p.getName().startsWith("attempt");
      }
    }
);
    for (    FileStatus fileStatus : fileStatuses) {
      TopKDimensionValues valuesFile=OBJECT_MAPPER.readValue(fileSystem.open(fileStatus.getPath()),TopKDimensionValues.class);
      topKDimensionValues.addMap(valuesFile);
    }
    topKDimensionValuesSet=topKDimensionValues.getTopKDimensions();
    for (    Entry<String,Set<String>> entry : topKDimensionValuesSet.entrySet()) {
      LOGGER.info("entry = {} {}",entry.getKey(),entry.getValue());
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
