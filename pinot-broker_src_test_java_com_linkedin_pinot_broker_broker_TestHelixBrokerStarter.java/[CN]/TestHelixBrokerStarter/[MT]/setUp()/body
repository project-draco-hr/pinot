{
  final String zkPath="/" + HELIX_CLUSTER_NAME;
  if (_zkClient.exists(zkPath)) {
    _zkClient.deleteRecursive(zkPath);
  }
  final String instanceId="localhost_helixController";
  _pinotResourceManager=new PinotHelixResourceManager(ZK_SERVER,HELIX_CLUSTER_NAME,instanceId);
  _pinotResourceManager.start();
  final String helixZkURL=HelixConfig.getAbsoluteZkPathForHelix(ZK_SERVER);
  _helixZkManager=HelixSetupUtils.setup(HELIX_CLUSTER_NAME,helixZkURL,instanceId);
  _helixAdmin=_helixZkManager.getClusterManagmentTool();
  Thread.sleep(3000);
  _helixBrokerStarters=addHelixBrokerInstancesToAutoJoinHelixCluster(1);
  addFakeBrokerInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_SERVER,5);
  addDataServerInstancesToAutoJoinHelixCluster(1);
  _pinotResourceManager.createBrokerResourceTag(createBrokerTagResourceConfig(6,"broker_colocated"));
  final String dataResource="company";
  final DataResource resource=createOfflineClusterConfig(1,1,dataResource,"BalanceNumSegmentAssignmentStrategy");
  _pinotResourceManager.handleCreateNewDataResource(resource);
  for (int i=1; i <= 5; i++) {
    addOneSegment(dataResource);
    Thread.sleep(2000);
    final ExternalView externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,dataResource);
    Assert.assertEquals(externalView.getPartitionSet().size(),i);
  }
}
