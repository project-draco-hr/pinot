{
synchronized (sync) {
    AnomalyFunctionSpec spec=specDAO.findById(id);
    if (spec == null) {
      throw new IllegalArgumentException("No function with id " + id);
    }
    AnomalyFunction anomalyFunction=anomalyFunctionFactory.fromSpec(spec);
    String triggerKey=String.format("ad_hoc_anomaly_function_trigger_%d",spec.getId());
    Trigger trigger=TriggerBuilder.newTrigger().withIdentity(triggerKey).startNow().build();
    String jobKey=String.format("ad_hoc_anomaly_function_job_%d",spec.getId());
    JobDetail job=JobBuilder.newJob(AnomalyDetectionJob.class).withIdentity(jobKey).build();
    job.getJobDataMap().put(AnomalyDetectionJob.FUNCTION,anomalyFunction);
    job.getJobDataMap().put(AnomalyDetectionJob.CLIENT,thirdEyeClient);
    job.getJobDataMap().put(AnomalyDetectionJob.WINDOW_START,windowStartIsoString);
    job.getJobDataMap().put(AnomalyDetectionJob.WINDOW_END,windowEndIsoString);
    job.getJobDataMap().put(AnomalyDetectionJob.RESULT_DAO,resultDAO);
    job.getJobDataMap().put(AnomalyDetectionJob.SESSION_FACTORY,sessionFactory);
    job.getJobDataMap().put(AnomalyDetectionJob.METRIC_REGISTRY,metricRegistry);
    job.getJobDataMap().put(AnomalyDetectionJob.RELATION_DAO,relationDAO);
    quartzScheduler.scheduleJob(job,trigger);
    LOG.info("Started {}: {}",jobKey,spec);
  }
}
