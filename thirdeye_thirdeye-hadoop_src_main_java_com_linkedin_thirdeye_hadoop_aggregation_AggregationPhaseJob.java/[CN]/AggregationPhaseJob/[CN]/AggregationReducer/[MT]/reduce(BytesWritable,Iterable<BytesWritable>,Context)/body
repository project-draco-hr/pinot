{
  GenericRecord outputRecord=new Record(avroSchema);
  AggregationPhaseMapOutputKey keyWrapper=AggregationPhaseMapOutputKey.fromBytes(aggregationKey.getBytes());
  long timeValue=keyWrapper.getTime();
  outputRecord.put(time.getColumnName(),timeValue);
  List<String> dimensionValues=keyWrapper.getDimensions();
  for (int i=0; i < dimensionsNames.size(); i++) {
    String dimensionName=dimensionsNames.get(i);
    String dimensionValue=dimensionValues.get(i);
    outputRecord.put(dimensionName,dimensionValue);
  }
  Number[] aggMetricValues=new Number[numMetrics];
  Arrays.fill(aggMetricValues,0);
  for (  BytesWritable value : values) {
    Number[] metricValues=AggregationPhaseMapOutputValue.fromBytes(value.getBytes(),metricTypes).getMetricValues();
    ThirdeyeAggregateMetricUtils.aggregate(metricTypes,aggMetricValues,metricValues);
  }
  ThirdeyeAggregateMetricUtils.aggregate(metricTypes,metricSums,aggMetricValues);
  for (int i=0; i < numMetrics; i++) {
    String metricName=metricNames.get(i);
    Number metricValue=aggMetricValues[i];
    outputRecord.put(metricName,metricValue);
  }
  numRecords++;
  AvroKey<GenericRecord> outputKey=new AvroKey<GenericRecord>(outputRecord);
  context.write(outputKey,NullWritable.get());
}
