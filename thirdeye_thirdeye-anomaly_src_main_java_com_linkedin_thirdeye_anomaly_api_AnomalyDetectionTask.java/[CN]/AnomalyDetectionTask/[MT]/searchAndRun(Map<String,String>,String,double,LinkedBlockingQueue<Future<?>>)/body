{
  boolean shouldContinueExploring=true;
  Map<DimensionKey,MetricTimeSeries> dataset=getDataset(dimensionValues,groupByDimension);
  sanityCheckDataset(dataset);
  Map<DimensionKey,Double> dimensionKeyContributionMap=computeDatasetProportions(dataset,dimensionKeyContributionMetric);
  Set<DimensionKey> dimensionKeysEvaluated=new HashSet<>();
  Set<DimensionKey> dimensionKeysWithAnomalies=new HashSet<>();
  for (  DimensionKey dimensionKey : dataset.keySet()) {
    if (dimensionKeyContributionMap != null) {
      double proportion=dimensionKeyContributionMap.get(dimensionKey) * proportionMultiplier;
      if (proportion <= driverConfig.getContributionMinProportion()) {
        LOGGER.info("skipping series {} - proportion ({}) below threshold",dimensionKey,String.format("%.4f",proportion));
        continue;
      }
 else {
        LOGGER.info("analyzing series {} - proportion ({})",dimensionKey,String.format("%.4f",proportion));
      }
    }
    LOGGER.info("evaluating series for key {}",dimensionKey);
    MetricTimeSeries series=dataset.get(dimensionKey);
    List<AnomalyResult> anomalyResults=null;
    try {
      anomalyResults=function.analyze(dimensionKey,series,taskInfo.getTimeRange(),functionHistory.getHistoryForDimensionKey(dimensionKey));
      filterAnomalyResults(anomalyResults);
    }
 catch (    FunctionDidNotEvaluateException e) {
      LOGGER.warn("failed to execute function - {}",function.toString(),e);
      continue;
    }
    handleAnomalyResults(dimensionKey,dimensionKeyContributionMap.get(dimensionKey),anomalyResults);
    dimensionKeysEvaluated.add(dimensionKey);
    if (anomalyResults.isEmpty() == false) {
      dimensionKeysWithAnomalies.add(dimensionKey);
    }
    LOGGER.info("finished analysis on {} between {} ({})",dimensionKey,taskInfo.getTimeRange(),DateTimeZone.getDefault());
  }
  int currentExplorationDepth=dimensionValues.size();
  if (groupByDimension != null) {
    currentExplorationDepth++;
  }
  if (currentExplorationDepth >= driverConfig.getMaxExplorationDepth()) {
    shouldContinueExploring=false;
  }
  if (shouldContinueExploring) {
    List<Runnable> runnables=new LinkedList<>();
    Set<String> dimensionsExplored=new HashSet<>(dimensionValues.keySet());
    if (groupByDimension != null) {
      dimensionsExplored.add(groupByDimension);
    }
    Set<String> nextGroupByCandidates=getDimensionKeysToGroupBy(dimensionsExplored);
    for (    DimensionKey dimensionKey : dimensionKeysEvaluated) {
      if (driverConfig.isPruneExplortaionUsingFeedback() && dimensionKeysWithAnomalies.contains(dimensionKey)) {
        LOGGER.info("pruned computation due to anomaly in enclosing series");
        continue;
      }
      if (groupByDimension != null) {
        String fixedDimensionValue=dimensionKey.getDimensionValue(starTreeConfig.getDimensions(),groupByDimension);
        LOGGER.info("fixing dimension '{}' to '{}'",groupByDimension,fixedDimensionValue);
        dimensionValues.put(groupByDimension,fixedDimensionValue);
      }
      for (      final String nextGroupByDimension : nextGroupByCandidates) {
        LOGGER.info("grouping by '{}'",nextGroupByDimension);
        final double nextProportionMultiplier=proportionMultiplier * dimensionKeyContributionMap.get(dimensionKey);
        final HashMap<String,String> nextDimensionValues=new HashMap<>(dimensionValues);
        runnables.add(getRunnableSearchAndRun(futures,nextGroupByDimension,nextProportionMultiplier,nextDimensionValues));
      }
    }
    for (    Runnable runnable : runnables) {
      futures.add(SHARED_EXECUTORS.submit(runnable));
    }
  }
}
