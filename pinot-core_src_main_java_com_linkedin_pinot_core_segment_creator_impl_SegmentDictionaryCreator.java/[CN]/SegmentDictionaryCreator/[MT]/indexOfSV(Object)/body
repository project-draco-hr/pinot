{
switch (spec.getDataType()) {
case INT:
    final int intValue=((Integer)e).intValue();
  return new Integer(searchableByteBuffer.binarySearch(0,intValue));
case FLOAT:
final float floatValue=((Float)e).floatValue();
return new Integer(searchableByteBuffer.binarySearch(0,floatValue));
case DOUBLE:
final double doubleValue=((Double)e).doubleValue();
return new Integer(searchableByteBuffer.binarySearch(0,doubleValue));
case LONG:
final long longValue=((Long)e).longValue();
return new Integer(searchableByteBuffer.binarySearch(0,longValue));
case STRING:
case BOOLEAN:
final StringBuilder bld=new StringBuilder();
for (int i=0; i < (stringColumnMaxLength - ((String)e).length()); i++) {
bld.append(V1Constants.Str.STRING_PAD_CHAR);
}
bld.append(e.toString());
return new Integer(searchableByteBuffer.binarySearch(0,bld.toString()));
default :
break;
}
throw new UnsupportedOperationException("unsupported data type : " + spec.getDataType() + " : "+ " for column : "+ spec.getName());
}
