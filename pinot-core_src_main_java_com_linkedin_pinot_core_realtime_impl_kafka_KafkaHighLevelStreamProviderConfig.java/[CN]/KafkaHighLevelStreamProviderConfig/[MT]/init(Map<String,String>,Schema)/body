{
  decoderProps=new HashMap<String,String>();
  kafkaConsumerProps=new HashMap<>();
  this.indexingSchema=schema;
  if (properties.containsKey(Helix.DataSource.Realtime.Kafka.HighLevelConsumer.GROUP_ID)) {
    this.groupId=properties.get(Helix.DataSource.Realtime.Kafka.HighLevelConsumer.GROUP_ID);
  }
  if (properties.containsKey(Helix.DataSource.Realtime.Kafka.HighLevelConsumer.ZK_CONNECTION_STRING)) {
    this.zkString=properties.get(Helix.DataSource.Realtime.Kafka.HighLevelConsumer.ZK_CONNECTION_STRING);
  }
  if (properties.containsKey(Helix.DataSource.Realtime.Kafka.TOPIC_NAME)) {
    this.kafkaTopicName=properties.get(Helix.DataSource.Realtime.Kafka.TOPIC_NAME);
  }
  if (properties.containsKey(Helix.DataSource.Realtime.Kafka.DECODER_CLASS)) {
    this.decodeKlass=properties.get(Helix.DataSource.Realtime.Kafka.DECODER_CLASS);
  }
  if (groupId == null || zkString == null || kafkaTopicName == null || this.decodeKlass == null) {
    throw new RuntimeException("Cannot initialize KafkaHighLevelStreamProviderConfig as: " + "groupId = " + groupId + ", zkString = "+ zkString+ ", kafkaTopicName = "+ kafkaTopicName+ ", decodeKlass = "+ decodeKlass);
  }
  if (properties.containsKey(Helix.DataSource.Realtime.REALTIME_SEGMENT_FLUSH_SIZE)) {
    realtimeRecordsThreshold=Integer.parseInt(properties.get(Helix.DataSource.Realtime.REALTIME_SEGMENT_FLUSH_SIZE));
  }
  if (properties.containsKey(Helix.DataSource.Realtime.REALTIME_SEGMENT_FLUSH_TIME)) {
    segmentTimeInMillis=Long.parseLong(properties.get(Helix.DataSource.Realtime.REALTIME_SEGMENT_FLUSH_TIME));
  }
  for (  String key : properties.keySet()) {
    if (key.startsWith(Helix.DataSource.Realtime.Kafka.DECODER_PROPS_PREFIX)) {
      decoderProps.put(Helix.DataSource.Realtime.Kafka.getDecoderPropertyKey(key),properties.get(key));
    }
    if (key.startsWith(Helix.DataSource.Realtime.Kafka.KAFKA_CONSUMER_PROPS_PREFIX)) {
      kafkaConsumerProps.put(Helix.DataSource.Realtime.Kafka.getConsumerPropertyKey(key),properties.get(key));
    }
  }
}
