{
  final FileSystem fs=FileSystem.get(new Configuration());
  final Path hdfsDataPath=new Path(dataFilePath);
  final File dataPath=new File(currentDiskWorkDir,"data");
  if (dataPath.exists()) {
    dataPath.delete();
  }
  dataPath.mkdir();
  final Path localFilePath=new Path(dataPath + "/" + hdfsDataPath.getName());
  fs.copyToLocalFile(hdfsDataPath,localFilePath);
  LOGGER.info("Data schema is : {}",schema);
  SegmentGeneratorConfig segmentGeneratorConfig=new SegmentGeneratorConfig(schema);
  segmentGeneratorConfig.setTableName(tableName);
  segmentGeneratorConfig.setInputFilePath(new File(dataPath,hdfsDataPath.getName()).getAbsolutePath());
  segmentGeneratorConfig.setSegmentNamePostfix(seqId);
  segmentGeneratorConfig.setIndexOutputDir(localDiskSegmentDirectory);
  segmentGeneratorConfig.setCreateStarTreeIndex(true);
  String minTime=StarTreeConstants.DATE_TIME_FORMATTER.print(segmentWallClockStartTime);
  String maxTime=StarTreeConstants.DATE_TIME_FORMATTER.print(segmentWallClockEndTime);
  segmentGeneratorConfig.setSegmentName(SegmentNameBuilder.buildBasic(tableName + SEGMENT_JOINER + segmentSchedule,minTime,maxTime,seqId));
  StarTreeIndexSpec starTreeIndexSpec=new StarTreeIndexSpec();
  starTreeIndexSpec.setMaxLeafRecords(starTreeConfig.getSplit().getThreshold());
  starTreeIndexSpec.setDimensionsSplitOrder(starTreeConfig.getSplit().getOrder());
  segmentGeneratorConfig.setStarTreeIndexSpec(starTreeIndexSpec);
  SegmentIndexCreationDriverImpl driver=new SegmentIndexCreationDriverImpl();
  ThirdeyeRecordReader thirdeyeRecordReader=new ThirdeyeRecordReader(segmentGeneratorConfig.getInputFilePath(),schema,properties.get(SEGMENT_CREATION_CONFIG_PATH.toString()));
  driver.init(segmentGeneratorConfig,thirdeyeRecordReader);
  driver.build();
  String segmentName=null;
  File localDiskSegmentDirectoryFile=new File(localDiskSegmentDirectory);
  for (  File file : localDiskSegmentDirectoryFile.listFiles()) {
    segmentName=file.getName();
    if (segmentName.startsWith(tableName)) {
      break;
    }
  }
  String localSegmentPath=new File(localDiskSegmentDirectory,segmentName).getAbsolutePath();
  String localTarPath=localDiskSegmentTarPath + "/" + segmentName+ ".tar.gz";
  LOGGER.info("Trying to tar the segment to: {}",localTarPath);
  TarGzCompressionUtils.createTarGzOfDirectory(localSegmentPath,localTarPath);
  String hdfsTarPath=localHdfsSegmentTarPath + "/" + segmentName+ ".tar.gz";
  LOGGER.info("*********************************************************************");
  LOGGER.info("Copy from : {} to {}",localTarPath,hdfsTarPath);
  LOGGER.info("*********************************************************************");
  fs.copyFromLocalFile(true,true,new Path(localTarPath),new Path(hdfsTarPath));
  return segmentName;
}
