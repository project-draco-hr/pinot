{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(AnalysisPhaseJob.class);
  FileSystem fs=FileSystem.get(getConf());
  Schema schema=new Schema.Parser().parse(fs.open(new Path(getAndCheck(AnalysisJobConstants.ANALYSIS_INPUT_AVRO_SCHEMA.toString()))));
  LOG.info("{}",schema);
  job.setMapperClass(AnalyzeMapper.class);
  AvroJob.setInputKeySchema(job,schema);
  job.setInputFormatClass(AvroKeyInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setCombinerClass(AnalyzeCombiner.class);
  job.setReducerClass(AnalyzeReducer.class);
  job.setNumReduceTasks(1);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(NullWritable.class);
  Configuration configuration=job.getConfiguration();
  String inputPathDir=getAndSetConfiguration(configuration,AnalysisJobConstants.ANALYSIS_INPUT_PATH);
  getAndSetConfiguration(configuration,AnalysisJobConstants.ANALYSIS_CONFIG_PATH);
  getAndSetConfiguration(configuration,AnalysisJobConstants.ANALYSIS_INPUT_AVRO_SCHEMA);
  getAndSetConfiguration(configuration,AnalysisJobConstants.ANALYSIS_OUTPUT_PATH);
  LOG.info("Input path dir: " + inputPathDir);
  for (  String inputPath : inputPathDir.split(",")) {
    Path input=new Path(inputPath);
    FileStatus[] listFiles=fs.listStatus(input);
    boolean isNested=false;
    for (    FileStatus fileStatus : listFiles) {
      if (fileStatus.isDirectory()) {
        isNested=true;
        LOG.info("Adding input:" + fileStatus.getPath());
        FileInputFormat.addInputPath(job,fileStatus.getPath());
      }
    }
    if (!isNested) {
      LOG.info("Adding input:" + inputPath);
      FileInputFormat.addInputPath(job,input);
    }
  }
  Path outputPath=new Path(getAndCheck(AnalysisJobConstants.ANALYSIS_OUTPUT_PATH.toString()));
  fs.delete(outputPath,true);
  FileOutputFormat.setOutputPath(job,outputPath);
  job.waitForCompletion(true);
}
