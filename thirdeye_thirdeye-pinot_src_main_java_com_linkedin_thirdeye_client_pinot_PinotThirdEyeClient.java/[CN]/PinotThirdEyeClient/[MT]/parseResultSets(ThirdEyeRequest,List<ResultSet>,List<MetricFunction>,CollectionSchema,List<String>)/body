{
  int numGroupByKeys=0;
  boolean hasGroupBy=false;
  if (request.getGroupByTimeGranularity() != null) {
    numGroupByKeys+=1;
  }
  if (request.getGroupBy() != null) {
    numGroupByKeys+=request.getGroupBy().size();
  }
  if (numGroupByKeys > 0) {
    hasGroupBy=true;
  }
  int numMetrics=request.getMetricFunctions().size();
  int numCols=numGroupByKeys + numMetrics;
  boolean hasGroupByTime=false;
  TimeGranularity dataGranularity=null;
  long startTime=request.getStartTimeInclusive().getMillis();
  long interval=-1;
  dataGranularity=collectionSchema.getTime().getDataGranularity();
  boolean isISOFormat=false;
  DateTimeFormatter dateTimeFormatter=null;
  String timeFormat=collectionSchema.getTime().getFormat();
  if (timeFormat != null && !timeFormat.equals(TimeSpec.SINCE_EPOCH_FORMAT)) {
    isISOFormat=true;
    dateTimeFormatter=DateTimeFormat.forPattern(timeFormat);
  }
  if (request.getGroupByTimeGranularity() != null) {
    hasGroupByTime=true;
    interval=request.getGroupByTimeGranularity().toMillis();
  }
  LinkedHashMap<String,String[]> dataMap=new LinkedHashMap<>();
  for (int i=0; i < resultSets.size(); i++) {
    ResultSet resultSet=resultSets.get(i);
    int numRows=resultSet.getRowCount();
    for (int r=0; r < numRows; r++) {
      boolean skipRowDueToError=false;
      String[] groupKeys;
      if (hasGroupBy) {
        groupKeys=new String[resultSet.getGroupKeyLength()];
        for (int grpKeyIdx=0; grpKeyIdx < resultSet.getGroupKeyLength(); grpKeyIdx++) {
          String groupKeyVal=resultSet.getGroupKeyString(r,grpKeyIdx);
          if (hasGroupByTime && grpKeyIdx == 0) {
            int timeBucket;
            long millis;
            if (!isISOFormat) {
              millis=dataGranularity.toMillis(Double.valueOf(groupKeyVal).longValue());
            }
 else {
              millis=DateTime.parse(groupKeyVal,dateTimeFormatter).getMillis();
            }
            if (millis < startTime) {
              LOG.error("Data point earlier than requested start time {}: {}",startTime,millis);
              skipRowDueToError=true;
              break;
            }
            timeBucket=(int)((millis - startTime) / interval);
            groupKeyVal=String.valueOf(timeBucket);
          }
          groupKeys[grpKeyIdx]=groupKeyVal;
        }
        if (skipRowDueToError) {
          continue;
        }
      }
 else {
        groupKeys=new String[]{};
      }
      StringBuilder groupKeyBuilder=new StringBuilder("");
      for (      String grpKey : groupKeys) {
        groupKeyBuilder.append(grpKey).append("|");
      }
      String compositeGroupKey=groupKeyBuilder.toString();
      String[] rowValues=dataMap.get(compositeGroupKey);
      if (rowValues == null) {
        rowValues=new String[numCols];
        Arrays.fill(rowValues,"0");
        System.arraycopy(groupKeys,0,rowValues,0,groupKeys.length);
        dataMap.put(compositeGroupKey,rowValues);
      }
      rowValues[groupKeys.length + i]=String.valueOf(Double.parseDouble(rowValues[groupKeys.length + i]) + Double.parseDouble(resultSet.getString(r,0)));
    }
  }
  List<String[]> rows=new ArrayList<>();
  rows.addAll(dataMap.values());
  return rows;
}
