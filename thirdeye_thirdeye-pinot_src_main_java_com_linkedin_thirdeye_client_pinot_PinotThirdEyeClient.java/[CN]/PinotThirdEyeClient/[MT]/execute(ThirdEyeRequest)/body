{
  CollectionSchema collectionSchema=CACHE_INSTANCE.getCollectionSchemaCache().get(request.getCollection());
  TimeSpec dataTimeSpec=collectionSchema.getTime();
  List<MetricFunction> metricFunctions=request.getMetricFunctions();
  List<String> dimensionNames=collectionSchema.getDimensionNames();
  CollectionConfig collectionConfig=null;
  List<ResultSetGroup> resultSetGroups=new ArrayList<>();
  try {
    collectionConfig=CACHE_INSTANCE.getCollectionConfigCache().get(request.getCollection());
  }
 catch (  Exception e) {
    LOG.debug("Collection config for collection {} does not exist",request.getCollection());
  }
  if (collectionConfig != null && collectionConfig.isMetricAsDimension()) {
    List<String> pqls=PqlUtils.getMetricAsDimensionPqls(request,dataTimeSpec,collectionConfig);
    for (    String pql : pqls) {
      LOG.debug("PQL isMetricAsDimension : {}",pql);
      ResultSetGroup result=CACHE_INSTANCE.getResultSetGroupCache().get(new PinotQuery(pql,request.getCollection() + "_OFFLINE"));
      resultSetGroups.add(result);
    }
  }
 else {
    String sql=PqlUtils.getPql(request,dataTimeSpec);
    LOG.debug("PQL: {}",sql);
    ResultSetGroup result=CACHE_INSTANCE.getResultSetGroupCache().get(new PinotQuery(sql,request.getCollection() + "_OFFLINE"));
    resultSetGroups.add(result);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Result for: {} {}",sql,format(result));
    }
  }
  List<ResultSet> resultSets=getResultSets(resultSetGroups);
  List<String[]> resultRows=parseResultSets(request,resultSets,metricFunctions,collectionSchema,dimensionNames);
  PinotThirdEyeResponse resp=new PinotThirdEyeResponse(request,resultRows,dataTimeSpec);
  return resp;
}
