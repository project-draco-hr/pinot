{
  NettyClientMetrics metric=new NettyClientMetrics(null,"abc");
  Timer timer=new HashedWheelTimer();
  String response="dummy response";
  int port=9089;
  MyRequestHandler handler=new MyRequestHandler(response,null);
  MyRequestHandlerFactory handlerFactory=new MyRequestHandlerFactory(handler);
  NettyTCPServer serverConn=new NettyTCPServer(port,handlerFactory,null);
  Thread serverThread=new Thread(serverConn,"ServerMain");
  serverThread.start();
  Thread.sleep(1000);
  ServerInstance server=new ServerInstance("localhost",port);
  EventLoopGroup eventLoopGroup=new NioEventLoopGroup();
  NettyTCPClientConnection clientConn=new NettyTCPClientConnection(server,eventLoopGroup,timer,metric);
  try {
    LOG.info("About to connect the client !!");
    boolean connected=clientConn.connect();
    LOG.info("Client connected !!");
    AssertJUnit.assertTrue("connected",connected);
    Thread.sleep(1000);
    String request="dummy request";
    LOG.info("Sending the request !!");
    ResponseFuture serverRespFuture=clientConn.sendRequest(Unpooled.wrappedBuffer(request.getBytes()),1L,5000L);
    LOG.info("Request  sent !!");
    ByteBuf serverResp=serverRespFuture.getOne();
    byte[] b2=new byte[serverResp.readableBytes()];
    serverResp.readBytes(b2);
    String gotResponse=new String(b2);
    AssertJUnit.assertEquals("Response Check at client",response,gotResponse);
    AssertJUnit.assertEquals("Request Check at server",request,handler.getRequest());
    System.out.println(metric);
  }
  finally {
    if (null != clientConn) {
      clientConn.close();
    }
    if (null != serverConn) {
      serverConn.shutdownGracefully();
    }
  }
}
