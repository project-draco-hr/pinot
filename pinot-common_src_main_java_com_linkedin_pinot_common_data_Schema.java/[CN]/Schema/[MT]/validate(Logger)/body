{
  Collection<FieldSpec> fieldSpecs=getAllFieldSpecs();
  if (ctxLogger == null) {
    ctxLogger=LOGGER;
  }
  boolean isValid=true;
  for (  FieldSpec fieldSpec : fieldSpecs) {
    Object o=null;
    try {
      if (fieldSpec.getDataType().equals(DataType.BOOLEAN) && fieldSpec.getFieldType().equals(FieldType.METRIC)) {
        ctxLogger.error("Boolean field {} cannot be a metric ",fieldSpec.getName());
        isValid=false;
        continue;
      }
      o=fieldSpec.getDefaultNullValue();
    }
 catch (    Exception e) {
    }
    if (o == null) {
      if (fieldSpec.getDataType().equals(DataType.BOOLEAN)) {
        ctxLogger.warn("Ignoring field {} of type {} does not have a default value",fieldSpec.getName(),fieldSpec.getFieldType());
      }
 else {
        ctxLogger.error("Field {} of type {} does not have a default value",fieldSpec.getName(),fieldSpec.getFieldType());
        isValid=false;
      }
    }
  }
  return isValid;
}
