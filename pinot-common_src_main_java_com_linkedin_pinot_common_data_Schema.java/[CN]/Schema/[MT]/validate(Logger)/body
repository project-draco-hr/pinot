{
  if (ctxLogger == null) {
    ctxLogger=LOGGER;
  }
  boolean isValid=true;
  try {
    for (    FieldSpec fieldSpec : fieldSpecMap.values()) {
      FieldType fieldType=fieldSpec.getFieldType();
      DataType dataType=fieldSpec.getDataType();
      String fieldName=fieldSpec.getName();
switch (fieldType) {
case DIMENSION:
case TIME:
switch (dataType) {
case INT:
case LONG:
case FLOAT:
case DOUBLE:
case STRING:
          fieldSpec.getDefaultNullValue();
        break;
default :
      ctxLogger.error("Unsupported data type: {} in dimension/time field: {}",dataType,fieldName);
    isValid=false;
  break;
}
break;
case METRIC:
switch (dataType) {
case INT:
case LONG:
case FLOAT:
case DOUBLE:
fieldSpec.getDefaultNullValue();
break;
default :
ctxLogger.error("Unsupported data type: {} in metric field: {}",dataType,fieldName);
isValid=false;
break;
}
break;
default :
ctxLogger.error("Unsupported field type: {} for field: {}",fieldSpec.getDataType(),fieldName);
isValid=false;
break;
}
}
}
 catch (Exception e) {
ctxLogger.error("Caught exception while validate the schema.",e);
isValid=false;
}
return isValid;
}
