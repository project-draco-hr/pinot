{
  final String resourceName=segmentMetadata.getResourceName();
  final String offlineResourceName=BrokerRequestUtils.getOfflineResourceNameForResource(segmentMetadata.getResourceName());
  final String segmentName=segmentMetadata.getName();
  OfflineDataResourceZKMetadata offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(propertyStore,resourceName);
  if (!SEGMENT_ASSIGNMENT_STRATEGY_MAP.containsKey(resourceName)) {
    SEGMENT_ASSIGNMENT_STRATEGY_MAP.put(resourceName,SegmentAssignmentStrategyFactory.getSegmentAssignmentStrategy(offlineDataResourceZKMetadata.getSegmentAssignmentStrategy()));
  }
  final SegmentAssignmentStrategy segmentAssignmentStrategy=SEGMENT_ASSIGNMENT_STRATEGY_MAP.get(resourceName);
  final IdealState currentIdealState=helixAdmin.getResourceIdealState(helixClusterName,offlineResourceName);
  final Set<String> currentInstanceSet=currentIdealState.getInstanceSet(segmentName);
  if (currentInstanceSet.isEmpty()) {
    final int replicas=offlineDataResourceZKMetadata.getNumDataReplicas();
    final List<String> selectedInstances=segmentAssignmentStrategy.getAssignedInstances(helixAdmin,helixClusterName,segmentMetadata,replicas,serverTenant);
    for (    final String instance : selectedInstances) {
      currentIdealState.setPartitionState(segmentName,instance,ONLINE);
    }
    currentIdealState.setNumPartitions(currentIdealState.getNumPartitions() + 1);
  }
 else {
    for (    final String instance : currentInstanceSet) {
      currentIdealState.setPartitionState(segmentName,instance,OFFLINE);
      currentIdealState.setPartitionState(segmentName,instance,ONLINE);
    }
  }
  return currentIdealState;
}
