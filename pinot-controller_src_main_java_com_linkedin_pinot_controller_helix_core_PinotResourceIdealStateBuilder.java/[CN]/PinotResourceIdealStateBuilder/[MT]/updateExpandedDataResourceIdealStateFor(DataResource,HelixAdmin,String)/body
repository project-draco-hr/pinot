{
  IdealState idealState=helixAdmin.getResourceIdealState(helixClusterName,resource.getResourceName());
  if (Integer.parseInt(idealState.getReplicas()) < resource.getNumberOfCopies()) {
    Random randomSeed=new Random(System.currentTimeMillis());
    int replicas=resource.getNumberOfCopies();
    int currentReplicas=Integer.parseInt(idealState.getReplicas());
    idealState.setReplicas(replicas + "");
    Set<String> segmentSet=idealState.getPartitionSet();
    List<String> instanceList=helixAdmin.getInstancesInClusterWithTag(helixClusterName,resource.getResourceName());
    for (    String segmentName : segmentSet) {
      Set<String> selectedInstanceSet=idealState.getInstanceSet(segmentName);
      int numInstancesToAssign=replicas - currentReplicas;
      int numInstancesAvailable=instanceList.size() - selectedInstanceSet.size();
      for (      String instance : instanceList) {
        if (selectedInstanceSet.contains(instance)) {
          continue;
        }
        if (randomSeed.nextInt(numInstancesAvailable) < numInstancesToAssign) {
          idealState.setPartitionState(segmentName,instance,PinotHelixSegmentOnlineOfflineStateModelGenerator.ONLINE_STATE);
          numInstancesToAssign--;
        }
        if (numInstancesToAssign == 0) {
          break;
        }
        numInstancesAvailable--;
      }
    }
    return idealState;
  }
  if (Integer.parseInt(idealState.getReplicas()) > resource.getNumberOfCopies()) {
    int replicas=resource.getNumberOfCopies();
    int currentReplicas=Integer.parseInt(idealState.getReplicas());
    idealState.setReplicas(replicas + "");
    Set<String> segmentSet=idealState.getPartitionSet();
    for (    String segmentName : segmentSet) {
      Set<String> instanceSet=idealState.getInstanceSet(segmentName);
      int cnt=1;
      for (      final String instance : instanceSet) {
        idealState.setPartitionState(segmentName,instance,PinotHelixSegmentOnlineOfflineStateModelGenerator.DROPPED_STATE);
        if (cnt++ > (currentReplicas - replicas)) {
          break;
        }
      }
    }
    return idealState;
  }
  return idealState;
}
