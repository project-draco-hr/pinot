{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
        struct.requestId=iprot.readI64();
        struct.setRequestIdIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
    struct.totalDocs=iprot.readI64();
    struct.setTotalDocsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.numDocsScanned=iprot.readI64();
struct.setNumDocsScannedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
struct.timeUsedMs=iprot.readI64();
struct.setTimeUsedMsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list166=iprot.readListBegin();
struct.aggregationResults=new ArrayList<AggregationResult>(_list166.size);
AggregationResult _elem167;
for (int _i168=0; _i168 < _list166.size; ++_i168) {
_elem167=new AggregationResult();
_elem167.read(iprot);
struct.aggregationResults.add(_elem167);
}
iprot.readListEnd();
}
struct.setAggregationResultsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list169=iprot.readListBegin();
struct.rowEvents=new ArrayList<RowEvent>(_list169.size);
RowEvent _elem170;
for (int _i171=0; _i171 < _list169.size; ++_i171) {
_elem170=new RowEvent();
_elem170.read(iprot);
struct.rowEvents.add(_elem170);
}
iprot.readListEnd();
}
struct.setRowEventsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 7:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list172=iprot.readListBegin();
struct.segmentStatistics=new ArrayList<ResponseStatistics>(_list172.size);
ResponseStatistics _elem173;
for (int _i174=0; _i174 < _list172.size; ++_i174) {
_elem173=new ResponseStatistics();
_elem173.read(iprot);
struct.segmentStatistics.add(_elem173);
}
iprot.readListEnd();
}
struct.setSegmentStatisticsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 8:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list175=iprot.readListBegin();
struct.exceptions=new ArrayList<ProcessingException>(_list175.size);
ProcessingException _elem176;
for (int _i177=0; _i177 < _list175.size; ++_i177) {
_elem176=new ProcessingException();
_elem176.read(iprot);
struct.exceptions.add(_elem176);
}
iprot.readListEnd();
}
struct.setExceptionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 9:
if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
org.apache.thrift.protocol.TMap _map178=iprot.readMapBegin();
struct.traceInfo=new HashMap<String,String>(2 * _map178.size);
String _key179;
String _val180;
for (int _i181=0; _i181 < _map178.size; ++_i181) {
_key179=iprot.readString();
_val180=iprot.readString();
struct.traceInfo.put(_key179,_val180);
}
iprot.readMapEnd();
}
struct.setTraceInfoIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
