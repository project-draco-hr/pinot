{
  List<String> serverUrls=new ArrayList<>(serverEndPoints.size());
  BiMap<String,String> endpointsToServers=serverEndPoints.inverse();
  for (  String endpoint : endpointsToServers.keySet()) {
    String tableSizeUri="http://" + endpoint + "/table/"+ table+ "/size";
    serverUrls.add(tableSizeUri);
  }
  MultiGetRequest mget=new MultiGetRequest(executor,connectionManager);
  CompletionService<GetMethod> completionService=mget.execute(serverUrls,timeoutMsec);
  Map<String,List<SegmentSizeInfo>> serverSegmentSizes=new HashMap<>(serverEndPoints.size());
  for (int i=0; i < serverUrls.size(); i++) {
    try {
      GetMethod getMethod=completionService.take().get();
      URI uri=getMethod.getURI();
      String instance=endpointsToServers.get(uri.getHost() + ":" + uri.getPort());
      if (getMethod.getStatusCode() >= 300) {
        LOGGER.error("Server: {} returned error: {}",instance,getMethod.getStatusCode());
        continue;
      }
      TableSizeInfo tableSizeInfo=new ObjectMapper().readValue(getMethod.getResponseBodyAsString(),TableSizeInfo.class);
      serverSegmentSizes.put(instance,tableSizeInfo.segments);
    }
 catch (    Exception e) {
    }
  }
  return serverSegmentSizes;
}
