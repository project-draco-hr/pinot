{
  if (predicate == null) {
    return BlockUtils.getDummyBlockDocIdSet(columnMetadata.getTotalDocs());
  }
  return new BlockDocIdSet(){
    @Override public BlockDocIdIterator iterator(){
      return new BlockDocIdIterator(){
        private final List<Integer> filteredIds=DictionaryIdFilterUtils.filter(predicate,dictionary);
        int counter=-1;
        @Override public int skipTo(        int targetDocId){
          if (targetDocId >= columnMetadata.getTotalDocs()) {
            return Constants.EOF;
          }
          counter=targetDocId;
          int[] vals=new int[columnMetadata.getMaxNumberOfMultiValues()];
          int len=indexReader.getIntArray(counter,vals);
          for (int i=0; i < len; i++) {
            if (filteredIds.contains(vals[i])) {
              return counter;
            }
          }
          while (counter < columnMetadata.getTotalDocs()) {
            counter++;
            int[] mval=new int[columnMetadata.getMaxNumberOfMultiValues()];
            int rlen=indexReader.getIntArray(counter,mval);
            for (int i=0; i < rlen; i++) {
              if (filteredIds.contains(mval[i])) {
                break;
              }
            }
          }
          return counter;
        }
        @Override public int next(){
          counter++;
          while (counter < columnMetadata.getTotalDocs()) {
            int[] mval=new int[columnMetadata.getMaxNumberOfMultiValues()];
            int rlen=indexReader.getIntArray(counter,mval);
            for (int i=0; i < rlen; i++) {
              if (filteredIds.contains(mval[i])) {
                break;
              }
            }
            counter++;
          }
          return counter;
        }
        @Override public int currentDocId(){
          return counter;
        }
      }
;
    }
    @Override public Object getRaw(){
      throw new UnsupportedOperationException("cannot get raw from forward index blocks");
    }
  }
;
}
