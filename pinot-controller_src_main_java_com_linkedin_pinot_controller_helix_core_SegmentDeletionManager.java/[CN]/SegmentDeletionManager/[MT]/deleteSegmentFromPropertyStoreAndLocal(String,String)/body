{
  if (_helixAdmin.getResourceExternalView(_helixClusterName,resourceName) == null || _helixAdmin.getResourceIdealState(_helixClusterName,resourceName) == null) {
    LOGGER.warn("Resource: {} is not set up in idealState or ExternalView, won't do anything",resourceName);
    return;
  }
  boolean isSegmentReadyToDelete=false;
  try {
    Map<String,String> segmentToInstancesMapFromExternalView=_helixAdmin.getResourceExternalView(_helixClusterName,resourceName).getStateMap(segmentId);
    Map<String,String> segmentToInstancesMapFromIdealStates=_helixAdmin.getResourceIdealState(_helixClusterName,resourceName).getInstanceStateMap(segmentId);
    if ((segmentToInstancesMapFromExternalView == null || segmentToInstancesMapFromExternalView.isEmpty()) && (segmentToInstancesMapFromIdealStates == null || segmentToInstancesMapFromIdealStates.isEmpty())) {
      isSegmentReadyToDelete=true;
    }
 else {
      LOGGER.info("Segment: {} is still in IdealStates: {} or ExternalView: {}, will wait for next retention period.",segmentId,segmentToInstancesMapFromIdealStates.toString(),segmentToInstancesMapFromExternalView.toString());
    }
  }
 catch (  Exception e) {
    isSegmentReadyToDelete=true;
  }
  if (isSegmentReadyToDelete) {
    LOGGER.info("Trying to delete segment : {} from Property store.",segmentId);
    _propertyStore.remove(ZKMetadataProvider.constructPropertyStorePathForSegment(resourceName,segmentId),AccessOption.PERSISTENT);
switch (BrokerRequestUtils.getResourceTypeFromResourceName(resourceName)) {
case OFFLINE:
      if (_localDiskDir != null) {
        File fileToDelete=new File(new File(_localDiskDir,resourceName),segmentId);
        if (fileToDelete.exists()) {
          FileUtils.deleteQuietly(fileToDelete);
          LOGGER.info("Delete segment : " + segmentId + " from local directory : "+ fileToDelete.getAbsolutePath());
        }
 else {
          LOGGER.warn("Not found local segment file for segment : " + segmentId);
        }
      }
 else {
        LOGGER.info("localDiskDir is not configured, won't delete anything from disk");
      }
    break;
case REALTIME:
  LOGGER.info("No local segment file for RealtimeSegment in Controller");
break;
default :
throw new UnsupportedOperationException("Not support ResourceType for semgnet - " + segmentId);
}
}
 else {
LOGGER.info("Segment: {} is still in IdealStates or ExternalView, will wait for next retention period.",segmentId);
}
}
