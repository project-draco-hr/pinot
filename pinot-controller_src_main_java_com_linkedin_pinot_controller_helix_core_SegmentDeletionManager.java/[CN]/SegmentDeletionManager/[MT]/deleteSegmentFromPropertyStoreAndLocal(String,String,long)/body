{
  if (_helixAdmin.getResourceExternalView(_helixClusterName,tableName) == null || _helixAdmin.getResourceIdealState(_helixClusterName,tableName) == null) {
    LOGGER.warn("Resource: {} is not set up in idealState or ExternalView, won't do anything",tableName);
    return;
  }
  boolean isSegmentReadyToDelete=false;
  try {
    Map<String,String> segmentToInstancesMapFromExternalView=_helixAdmin.getResourceExternalView(_helixClusterName,tableName).getStateMap(segmentId);
    Map<String,String> segmentToInstancesMapFromIdealStates=_helixAdmin.getResourceIdealState(_helixClusterName,tableName).getInstanceStateMap(segmentId);
    if ((segmentToInstancesMapFromExternalView == null || segmentToInstancesMapFromExternalView.isEmpty()) && (segmentToInstancesMapFromIdealStates == null || segmentToInstancesMapFromIdealStates.isEmpty())) {
      isSegmentReadyToDelete=true;
    }
 else {
      long effectiveDeletionDelay=Math.min(deletionDelay * 2,MAX_DELETION_DELAY_SECONDS);
      LOGGER.info("Segment: {} is still in IdealStates: {} or ExternalView: {}, will retry in {} seconds.",segmentId,segmentToInstancesMapFromIdealStates,segmentToInstancesMapFromExternalView,effectiveDeletionDelay);
      deleteSegmentWithDelay(tableName,segmentId,effectiveDeletionDelay);
      return;
    }
  }
 catch (  Exception e) {
    LOGGER.warn("Caught exception while processing segment " + segmentId,e);
    isSegmentReadyToDelete=true;
  }
  if (isSegmentReadyToDelete) {
    String segmentPropertyStorePath=ZKMetadataProvider.constructPropertyStorePathForSegment(tableName,segmentId);
    LOGGER.info("Trying to delete segment : {} from Property store.",segmentId);
    boolean deletionFromPropertyStoreSuccessful=true;
    if (_propertyStore.exists(segmentPropertyStorePath,AccessOption.PERSISTENT)) {
      deletionFromPropertyStoreSuccessful=_propertyStore.remove(segmentPropertyStorePath,AccessOption.PERSISTENT);
    }
    if (!deletionFromPropertyStoreSuccessful) {
      long effectiveDeletionDelay=Math.min(deletionDelay * 2,MAX_DELETION_DELAY_SECONDS);
      LOGGER.warn("Failed to delete segment {} from property store, will retry in {} seconds.",segmentId,effectiveDeletionDelay);
      deleteSegmentWithDelay(tableName,segmentId,effectiveDeletionDelay);
      return;
    }
switch (TableNameBuilder.getTableTypeFromTableName(tableName)) {
case OFFLINE:
      if (_localDiskDir != null) {
        File fileToDelete=new File(new File(_localDiskDir,tableName),segmentId);
        if (fileToDelete.exists()) {
          FileUtils.deleteQuietly(fileToDelete);
          LOGGER.info("Delete segment : " + segmentId + " from local directory : "+ fileToDelete.getAbsolutePath());
        }
 else {
          LOGGER.warn("Not found local segment file for segment : " + segmentId);
        }
      }
 else {
        LOGGER.info("localDiskDir is not configured, won't delete anything from disk");
      }
    break;
case REALTIME:
  LOGGER.info("No local segment file for RealtimeSegment in Controller");
break;
default :
throw new UnsupportedOperationException("Not support ResourceType for semgnet - " + segmentId);
}
}
 else {
long effectiveDeletionDelay=Math.min(deletionDelay * 2,MAX_DELETION_DELAY_SECONDS);
LOGGER.info("Segment: {} is still in IdealStates or ExternalView, will retry in {} seconds.",segmentId,effectiveDeletionDelay);
deleteSegmentWithDelay(tableName,segmentId,effectiveDeletionDelay);
}
}
