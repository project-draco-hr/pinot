{
  try {
    FileTemplateLoader ftl=new FileTemplateLoader(new File(templatePath));
    Configuration emailConfiguration=new Configuration();
    emailConfiguration.setTemplateLoader(ftl);
    Template emailReportTemplate=emailConfiguration.getTemplate("thirdeye-report-email-template.ftl");
    Map<String,Object> rootMap=new HashMap<String,Object>();
    rootMap.put(ReportConstants.REPORT_CONFIG_OBJECT,reportConfig);
    rootMap.put(ReportConstants.TABLES_OBJECT,tables);
    rootMap.put(ReportConstants.ANOMALY_TABLES_OBJECT,anomalyReportTables);
    Writer emailOutput=new StringWriter();
    emailReportTemplate.process(rootMap,emailOutput);
    Properties props=new Properties();
    props.setProperty(ReportConstants.MAIL_SMTP_HOST_KEY,ReportConstants.MAIL_SMTP_HOST_VALUE);
    Session session=Session.getDefaultInstance(props,null);
    Message emailReportMessage=new MimeMessage(session);
    for (    String emailIdFrom : scheduleSpec.getEmailFrom().split(",")) {
      emailReportMessage.setFrom(new InternetAddress(emailIdFrom,scheduleSpec.getNameFrom()));
    }
    for (    String emailIdTo : scheduleSpec.getEmailTo().split(",")) {
      emailReportMessage.addRecipient(Message.RecipientType.TO,new InternetAddress(emailIdTo,scheduleSpec.getNameTo()));
    }
    emailReportMessage.setSubject(reportConfig.getName());
    emailReportMessage.setContent(emailOutput.toString(),"text/html");
    LOGGER.info("Sending email from {} to {}  ",scheduleSpec.getEmailFrom(),scheduleSpec.getEmailTo());
    Transport.send(emailReportMessage);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
