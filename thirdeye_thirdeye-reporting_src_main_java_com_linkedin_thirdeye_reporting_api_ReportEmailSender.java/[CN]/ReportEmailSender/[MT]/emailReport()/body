{
  try {
    FileTemplateLoader ftl=new FileTemplateLoader(new File(templatePath));
    Configuration emailConfiguration=new Configuration();
    emailConfiguration.setTemplateLoader(ftl);
    Template emailReportTemplate=emailConfiguration.getTemplate(reportObjects.getScheduleSpec().getEmailTemplate());
    Writer emailOutput=new StringWriter();
    emailReportTemplate.process(reportObjects,emailOutput);
    Properties props=new Properties();
    props.setProperty(ReportConstants.MAIL_SMTP_HOST_KEY,ReportConstants.MAIL_SMTP_HOST_VALUE);
    Session session=Session.getDefaultInstance(props,null);
    Message emailReportMessage=new MimeMessage(session);
    for (    String emailIdFrom : reportObjects.getScheduleSpec().getEmailFrom().split(",")) {
      emailReportMessage.setFrom(new InternetAddress(emailIdFrom,reportObjects.getScheduleSpec().getNameFrom()));
    }
    for (    String emailIdTo : reportObjects.getScheduleSpec().getEmailTo().split(",")) {
      emailReportMessage.addRecipient(Message.RecipientType.TO,new InternetAddress(emailIdTo,reportObjects.getScheduleSpec().getNameTo()));
    }
    emailReportMessage.setSubject(ReportConstants.REPORT_SUBJECT_PREFIX + " (" + reportObjects.getReportConfig().getCollection().toUpperCase()+ ") "+ reportObjects.getReportConfig().getName());
    emailReportMessage.setContent(emailOutput.toString(),"text/html");
    LOGGER.info("Sending email from {} to {}  ",reportObjects.getScheduleSpec().getEmailFrom(),reportObjects.getScheduleSpec().getEmailTo());
    Transport.send(emailReportMessage);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
