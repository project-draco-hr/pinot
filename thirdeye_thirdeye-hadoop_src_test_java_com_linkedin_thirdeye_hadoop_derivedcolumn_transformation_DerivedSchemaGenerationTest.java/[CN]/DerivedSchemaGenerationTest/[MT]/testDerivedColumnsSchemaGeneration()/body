{
  ThirdEyeConfig thirdeyeConfig=ThirdEyeConfig.fromProperties(props);
  Schema outputSchema=job.newSchema(thirdeyeConfig,inputSchema);
  Assert.assertEquals(inputSchema.getFields().size(),outputSchema.getFields().size(),"Input schema should be same as output schema if no topk/whitelist in config");
  props.setProperty(ThirdEyeConfigConstants.THIRDEYE_TOPK_DIMENSION_NAMES.toString(),"d2,");
  props.setProperty(ThirdEyeConfigConstants.THIRDEYE_TOPK_METRICS.toString() + ".d2","m1");
  props.setProperty(ThirdEyeConfigConstants.THIRDEYE_TOPK_KVALUES.toString() + ".d2","1");
  props.setProperty(ThirdEyeConfigConstants.THIRDEYE_WHITELIST_DIMENSION_NAMES.toString(),"d2,d3");
  props.setProperty(ThirdEyeConfigConstants.THIRDEYE_WHITELIST_DIMENSION.toString() + ".d2","a,b,c");
  props.setProperty(ThirdEyeConfigConstants.THIRDEYE_WHITELIST_DIMENSION.toString() + ".d3","x,y");
  thirdeyeConfig=ThirdEyeConfig.fromProperties(props);
  outputSchema=job.newSchema(thirdeyeConfig,inputSchema);
  Assert.assertEquals(inputSchema.getFields().size() + 2,outputSchema.getFields().size(),"Input schema should not be same as output schema if topk/whitelist in config");
  Assert.assertEquals(outputSchema.getField("d2_raw") != null,true,"Output schema should have _raw entries for columsn in topk/whitelist");
  Assert.assertEquals(outputSchema.getField("d3_raw") != null,true,"Output schema should have _raw entries for columsn in whitelist");
}
