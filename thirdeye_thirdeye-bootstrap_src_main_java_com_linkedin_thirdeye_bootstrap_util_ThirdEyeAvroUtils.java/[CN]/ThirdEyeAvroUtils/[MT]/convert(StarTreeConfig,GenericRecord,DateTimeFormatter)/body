{
  String[] dimensionValues=new String[config.getDimensions().size()];
  for (int i=0; i < config.getDimensions().size(); i++) {
    DimensionSpec dimensionSpec=config.getDimensions().get(i);
    String dimensionValue=getRecordValue(dimensionSpec.getName(),record);
    if (!NULL_VALUE.equals(dimensionValue) && dimensionSpec.getType() != null) {
switch (dimensionSpec.getType()) {
case EMAIL_DOMAIN:
        dimensionValue=parseEmailDomain(dimensionValue,dimensionSpec.getConfig());
      break;
case TERNARY:
    dimensionValue=parseTernaryValue(dimensionValue,dimensionSpec.getConfig());
  break;
}
}
dimensionValues[i]=dimensionValue;
}
DimensionKey dimensionKey=new DimensionKey(dimensionValues);
String timeStr=getRecordValue(config.getTime().getColumnName(),record);
if (timeStr == null) {
LOGGER.warn("Skipping because null time {}",record);
return null;
}
TimeGranularity input=config.getTime().getInput();
TimeGranularity bucket=config.getTime().getBucket();
Long time;
if (dateTimeFormatter == null) {
Long sourceTimeWindow=Long.parseLong(timeStr);
time=bucket.getUnit().convert(sourceTimeWindow * input.getSize(),input.getUnit()) / bucket.getSize();
}
 else {
DateTime sourceTimeWindow=dateTimeFormatter.parseDateTime(timeStr);
time=bucket.getUnit().convert(sourceTimeWindow.getMillis(),TimeUnit.MILLISECONDS) / bucket.getSize();
}
if (time <= 0) {
LOGGER.warn("Skipping because zero or negative time {}",record);
return null;
}
MetricTimeSeries timeSeries=new MetricTimeSeries(MetricSchema.fromMetricSpecs(config.getMetrics()));
for (int i=0; i < config.getMetrics().size(); i++) {
MetricSpec metricSpec=config.getMetrics().get(i);
Number metricValue=getMetricValue(metricSpec,record);
timeSeries.increment(time,metricSpec.getName(),metricValue);
}
return new StarTreeRecordImpl(config,dimensionKey,timeSeries);
}
