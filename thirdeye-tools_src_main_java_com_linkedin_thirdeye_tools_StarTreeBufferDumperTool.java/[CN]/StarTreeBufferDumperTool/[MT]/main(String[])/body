{
  String config=args[0];
  String pathToTreeBinary=args[1];
  String dataDirectory=args[2];
  JsonNode jsonNode=new ObjectMapper().readTree(new FileInputStream(config));
  StarTreeConfig starTreeConfig=StarTreeConfig.fromJson(jsonNode,new File(dataDirectory).getParentFile());
  StarTreeNode starTreeRootNode=StarTreePersistanceUtil.loadStarTree(new FileInputStream(pathToTreeBinary));
  List<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
  StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTreeRootNode);
  List<String> dimensionNames=starTreeConfig.getDimensionNames();
  String[] dimValues=new String[dimensionNames.size()];
  for (  StarTreeNode node : leafNodes) {
    Map<String,Map<String,Integer>> forwardIndex=StarTreePersistanceUtil.readForwardIndex(node.getId().toString(),dataDirectory);
    Map<String,Map<Integer,String>> reverseIndex=StarTreeUtils.toReverseIndex(forwardIndex);
    List<int[]> leafRecords=StarTreePersistanceUtil.readLeafRecords(dataDirectory,node.getId().toString(),starTreeConfig.getDimensionNames().size());
    Arrays.fill(dimValues,"-");
    for (int i=0; i < dimensionNames.size(); i++) {
      String name=dimensionNames.get(i);
      if (node.getAncestorDimensionValues().containsKey(name)) {
        dimValues[i]=node.getAncestorDimensionValues().get(name);
      }
      if (node.getDimensionName().equals(name)) {
        dimValues[i]=node.getDimensionValue();
      }
    }
    System.out.println(node.getId() + Arrays.toString(dimValues));
    for (    int arr[] : leafRecords) {
      Arrays.fill(dimValues,"");
      for (int i=0; i < dimensionNames.size(); i++) {
        String name=dimensionNames.get(i);
        dimValues[i]=reverseIndex.get(name).get(arr[i]);
      }
      System.out.println("\t");
      System.out.println(Arrays.toString(dimValues));
    }
  }
}
