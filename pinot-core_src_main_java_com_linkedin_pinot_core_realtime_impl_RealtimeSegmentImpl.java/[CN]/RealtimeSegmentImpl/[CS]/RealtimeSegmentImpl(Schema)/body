{
  dataSchema=schema;
  dictionaryMap=new HashMap<String,MutableDictionaryReader>();
  maxNumberOfMultivaluesMap=new HashMap<String,Integer>();
  for (  String column : dataSchema.getDimensionNames()) {
    maxNumberOfMultivaluesMap.put(column,0);
    dictionaryMap.put(column,RealtimeDictionaryProvider.getDictionaryFor(dataSchema.getFieldSpecFor(column)));
  }
  docIdGenerator=new AtomicInteger(-1);
  dimemsionTupleMap=new HashMap<Long,DimensionTuple>();
  timeConverter=TimeConverterProvider.getTimeConverterFromGranularitySpecs(schema.getTimeSpec().getIncominGranularutySpec(),schema.getTimeSpec().getOutgoingGranularitySpec());
  incomingTimeColumnName=dataSchema.getTimeSpec().getIncomingTimeColumnName();
  outgoingTimeColumnName=dataSchema.getTimeSpec().getOutGoingTimeColumnName();
  docIdMap=new HashMap<Object,Pair<Long,Object>>();
  invertedIndexMap=new HashMap<String,RealtimeInvertedIndex>();
  for (  String dimension : schema.getDimensionNames()) {
    invertedIndexMap.put(dimension,new DimensionInvertertedIndex(dimension));
  }
  for (  String metric : schema.getMetricNames()) {
    invertedIndexMap.put(metric,new MetricInvertedIndex(metric));
  }
  invertedIndexMap.put(outgoingTimeColumnName,new TimeInvertedIndex(outgoingTimeColumnName));
  dimensionsSerde=new RealtimeDimensionsSerDe(schema.getDimensionNames(),dataSchema,dictionaryMap);
  metricsSerDe=new RealtimeMetricsSerDe(dataSchema);
}
