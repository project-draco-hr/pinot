{
  GenericRow row=new GenericRow();
  Map<String,Object> rowValues=new HashMap<String,Object>();
  Object timeValue=time[docId];
  ByteBuffer dimBuff=dimensionBuffs[docId];
  for (  String dimension : dataSchema.getDimensionNames()) {
    int[] ret=dimensionsSerde.deSerializeAndReturnDicIdsFor(dimension,dimBuff);
    if (dataSchema.getFieldSpecFor(dimension).isSingleValueField()) {
      rowValues.put(dimension,dictionaryMap.get(dimension).get(ret[0]));
    }
 else {
      Object[] mV=new Object[ret.length];
      for (int i=0; i < ret.length; i++) {
        mV[i]=dictionaryMap.get(dimension).get(ret[i]);
      }
      rowValues.put(dimension,mV);
    }
  }
  ByteBuffer metricBuff=metBuffs[docId];
  for (  String metric : dataSchema.getMetricNames()) {
    rowValues.put(metric,metricsSerDe.getRawValueFor(metric,metricBuff));
  }
  rowValues.put(outgoingTimeColumnName,timeValue);
  row.init(rowValues);
  return row;
}
