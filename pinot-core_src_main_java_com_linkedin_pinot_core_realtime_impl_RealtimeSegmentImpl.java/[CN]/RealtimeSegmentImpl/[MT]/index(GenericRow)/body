{
  for (  String dimension : dataSchema.getDimensions()) {
    dictionaryMap.get(dimension).index(row.getValue(dimension));
  }
  IntBuffer dimBuff=createDimBuff(row);
  ByteBuffer metBuff=createMetricsByteBuffer(row);
  dimBuff.rewind();
  metBuff.rewind();
  long dimesionHash=HashUtil.compute(dimBuff);
  Long timeValue=timeConverter.convert(row.getValue(incomingTimeColumnName));
  if (minTimeVal > timeValue)   minTimeVal=timeValue;
  if (maxTimeVal < timeValue)   maxTimeVal=timeValue;
  Pair<Long,Long> dimHashTimePair=Pair.<Long,Long>of(dimesionHash,timeValue);
  if (!dimemsionTupleMap.containsKey(dimesionHash)) {
    DimensionTuple dimTuple=new DimensionTuple(dimBuff,dimesionHash);
    dimTuple.addMetricsbuffFor(timeValue,metBuff,dataSchema);
    dimemsionTupleMap.put(dimesionHash,dimTuple);
    int docId=docIdGenerator.incrementAndGet();
    docIdMap.put(docId,dimHashTimePair);
    updateInvertedIndex(dimBuff,metBuff,timeValue,docId);
  }
 else {
    DimensionTuple tuple=dimemsionTupleMap.get(dimesionHash);
    if (!tuple.containsTime(timeValue)) {
      int docId=docIdGenerator.incrementAndGet();
      docIdMap.put(docId,dimHashTimePair);
      updateInvertedIndex(dimBuff,metBuff,timeValue,docId);
    }
    tuple.addMetricsbuffFor(timeValue,metBuff,dataSchema);
  }
}
