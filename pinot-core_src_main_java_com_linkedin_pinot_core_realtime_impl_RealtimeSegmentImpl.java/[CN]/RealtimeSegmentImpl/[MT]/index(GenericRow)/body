{
  numDocsIndexed++;
  for (  String dimension : dataSchema.getDimensionNames()) {
    dictionaryMap.get(dimension).index(row.getValue(dimension));
    if (!dataSchema.getFieldSpecFor(dimension).isSingleValueField()) {
      Object[] entries=(Object[])row.getValue(dimension);
      if (maxNumberOfMultivaluesMap.get(dimension) < entries.length) {
        maxNumberOfMultivaluesMap.put(dimension,entries.length);
      }
    }
  }
  IntBuffer dimBuff=dimensionsSerde.serialize(row);
  ByteBuffer metBuff=metricsSerDe.serialize(row);
  dimBuff.rewind();
  metBuff.rewind();
  long dimesionHash=HashUtil.compute(dimBuff);
  Object timeValueObj=timeConverter.convert(row.getValue(incomingTimeColumnName));
  long timeValue=-1;
  if (timeValueObj instanceof Integer) {
    timeValue=((Integer)timeValueObj).longValue();
  }
 else {
    timeValue=(Long)timeValueObj;
  }
  if (minTimeVal > timeValue) {
    minTimeVal=timeValue;
  }
  if (maxTimeVal < timeValue) {
    maxTimeVal=timeValue;
  }
  Pair<Long,Object> dimHashTimePair=Pair.<Long,Object>of(dimesionHash,timeValue);
  if (!dimemsionTupleMap.containsKey(dimesionHash)) {
    DimensionTuple dimTuple=new DimensionTuple(dimBuff,dimesionHash);
    dimTuple.addMetricsbuffFor(timeValue,metBuff,dataSchema);
    dimemsionTupleMap.put(dimesionHash,dimTuple);
    int docId=docIdGenerator.incrementAndGet();
    docIdMap.put(docId,dimHashTimePair);
    updateInvertedIndex(dimBuff,metBuff,timeValue,docId);
  }
 else {
    DimensionTuple tuple=dimemsionTupleMap.get(dimesionHash);
    if (!tuple.containsTime(timeValue)) {
      int docId=docIdGenerator.incrementAndGet();
      docIdMap.put(docId,dimHashTimePair);
      updateInvertedIndex(dimBuff,metBuff,timeValue,docId);
    }
    tuple.addMetricsbuffFor(timeValue,metBuff,dataSchema);
  }
}
