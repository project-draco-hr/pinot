{
  if (numDocsIndexed >= capacity) {
    return false;
  }
  for (  String dimension : dataSchema.getDimensionNames()) {
    dictionaryMap.get(dimension).index(row.getValue(dimension));
    if (!dataSchema.getFieldSpecFor(dimension).isSingleValueField()) {
      Object[] entries=(Object[])row.getValue(dimension);
      if ((entries != null) && (maxNumberOfMultivaluesMap.get(dimension) < entries.length)) {
        maxNumberOfMultivaluesMap.put(dimension,entries.length);
      }
    }
  }
  ByteBuffer dimBuff=dimensionsSerde.serialize(row);
  ByteBuffer metBuff=metricsSerDe.serialize(row);
  dimBuff.rewind();
  metBuff.rewind();
  Object timeValueObj=timeConverter.convert(row.getValue(incomingTimeColumnName));
  long timeValue=-1;
  if (timeValueObj instanceof Integer) {
    timeValue=((Integer)timeValueObj).longValue();
  }
 else {
    timeValue=(Long)timeValueObj;
  }
  dictionaryMap.get(outgoingTimeColumnName).index(timeValueObj);
  int timeValueDictId=dictionaryMap.get(outgoingTimeColumnName).indexOf(timeValueObj);
  minTimeVal=Math.min(minTimeVal,timeValue);
  maxTimeVal=Math.max(maxTimeVal,timeValue);
  int docId=docIdGenerator.incrementAndGet();
  dimensionBuffs[docId]=dimBuff;
  metBuffs[docId]=metBuff;
  time[docId]=timeValueDictId;
  updateInvertedIndex(dimBuff,metBuff,timeValueDictId,docId);
  docIdSearchableOffset=docId;
  numDocsIndexed++;
  return true;
}
