{
  List<Integer> rowConvertedToDictionaryId=new LinkedList<Integer>();
  List<Integer> columnOffsets=new LinkedList<Integer>();
  int pointer=0;
  for (int i=0; i < dataSchema.getDimensionNames().size(); i++) {
    columnOffsets.add(pointer);
    if (dataSchema.getFieldSpecFor(dataSchema.getDimensionNames().get(i)).isSingleValueField()) {
      rowConvertedToDictionaryId.add(dictionaryMap.get(dataSchema.getDimensionNames().get(i)).indexOf(row.getValue(dataSchema.getDimensionNames().get(i))));
      pointer+=1;
    }
 else {
      Object[] multivalues=(Object[])row.getValue(dataSchema.getDimensionNames().get(i));
      if (maxNumberOfMultivaluesMap.get(dataSchema.getDimensionNames().get(i)) < multivalues.length) {
        maxNumberOfMultivaluesMap.put(dataSchema.getDimensionNames().get(i),multivalues.length);
      }
      Arrays.sort(multivalues);
      for (      Object multivalue : multivalues) {
        rowConvertedToDictionaryId.add(dictionaryMap.get(dataSchema.getDimensionNames().get(i)).indexOf(multivalue));
      }
      pointer+=multivalues.length;
    }
    if (i == dataSchema.getDimensionNames().size() - 1) {
      columnOffsets.add(pointer);
    }
  }
  IntBuffer buff=IntBuffer.allocate(columnOffsets.size() + rowConvertedToDictionaryId.size());
  for (  Integer offset : columnOffsets) {
    buff.put(offset + columnOffsets.size());
  }
  for (  Integer dicId : rowConvertedToDictionaryId) {
    buff.put(dicId);
  }
  return buff;
}
