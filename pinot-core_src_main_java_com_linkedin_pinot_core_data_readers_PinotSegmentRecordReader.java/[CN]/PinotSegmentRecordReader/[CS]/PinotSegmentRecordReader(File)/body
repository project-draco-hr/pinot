{
  segmentMetadata=new SegmentMetadataImpl(segmentIndexDir);
  SegmentDirectory segmentDirectory=SegmentDirectory.createFromLocalFS(segmentIndexDir,segmentMetadata,ReadMode.heap);
  totalDocs=segmentMetadata.getTotalDocs();
  columns=segmentMetadata.getAllColumns();
  Reader reader=segmentDirectory.createReader();
  singleValueReaderMap=new HashMap<>();
  multiValueReaderMap=new HashMap<>();
  singleValueSortedReaderMap=new HashMap<>();
  pinotDictionaryBufferMap=new HashMap<>();
  columnDataTypeMap=new HashMap<>();
  multiValueArrayMap=new HashMap<>();
  isSingleValueMap=new HashMap<>();
  isSortedMap=new HashMap<>();
  for (  String column : columns) {
    ColumnMetadata columnMetadataFor=segmentMetadata.getColumnMetadataFor(column);
    isSingleValueMap.put(column,columnMetadataFor.isSingleValue());
    isSortedMap.put(column,columnMetadataFor.isSorted());
    if (columnMetadataFor.isSingleValue() && !columnMetadataFor.isSorted()) {
      PinotDataBuffer fwdIndexBuffer=reader.getIndexFor(column,ColumnIndexType.FORWARD_INDEX);
      SingleColumnSingleValueReader fwdIndexReader=new FixedBitSingleValueReader(fwdIndexBuffer,columnMetadataFor.getTotalDocs(),columnMetadataFor.getBitsPerElement(),columnMetadataFor.hasNulls());
      singleValueReaderMap.put(column,fwdIndexReader);
    }
 else     if (columnMetadataFor.isSingleValue() && columnMetadataFor.isSorted()) {
      PinotDataBuffer dataBuffer=reader.getIndexFor(column,ColumnIndexType.FORWARD_INDEX);
      FixedByteSingleValueMultiColReader indexReader=new FixedByteSingleValueMultiColReader(dataBuffer,columnMetadataFor.getCardinality(),2,new int[]{4,4});
      SortedForwardIndexReader fwdIndexReader=new SortedForwardIndexReader(indexReader,totalDocs);
      singleValueSortedReaderMap.put(column,fwdIndexReader);
    }
 else {
      PinotDataBuffer fwdIndexBuffer=reader.getIndexFor(column,ColumnIndexType.FORWARD_INDEX);
      SingleColumnMultiValueReader fwdIndexReader=new FixedBitMultiValueReader(fwdIndexBuffer,segmentMetadata.getTotalDocs(),columnMetadataFor.getTotalNumberOfEntries(),columnMetadataFor.getBitsPerElement(),false);
      multiValueReaderMap.put(column,fwdIndexReader);
    }
    DataType dataType=columnMetadataFor.getDataType();
    PinotDataBuffer dictionaryBuffer=reader.getIndexFor(column,ColumnIndexType.DICTIONARY);
switch (dataType) {
case BOOLEAN:
      pinotDictionaryBufferMap.put(column,new StringDictionary(dictionaryBuffer,columnMetadataFor));
    break;
case DOUBLE:
  pinotDictionaryBufferMap.put(column,new DoubleDictionary(dictionaryBuffer,columnMetadataFor));
break;
case FLOAT:
pinotDictionaryBufferMap.put(column,new FloatDictionary(dictionaryBuffer,columnMetadataFor));
break;
case INT:
pinotDictionaryBufferMap.put(column,new IntDictionary(dictionaryBuffer,columnMetadataFor));
break;
case LONG:
pinotDictionaryBufferMap.put(column,new LongDictionary(dictionaryBuffer,columnMetadataFor));
break;
case STRING:
pinotDictionaryBufferMap.put(column,new StringDictionary(dictionaryBuffer,columnMetadataFor));
break;
case INT_ARRAY:
int[] intArray=new int[columnMetadataFor.getMaxNumberOfMultiValues()];
multiValueArrayMap.put(column,intArray);
break;
case BYTE:
case BYTE_ARRAY:
case CHAR:
case CHAR_ARRAY:
case DOUBLE_ARRAY:
case FLOAT_ARRAY:
case LONG_ARRAY:
case OBJECT:
case SHORT:
case SHORT_ARRAY:
case STRING_ARRAY:
default :
LOGGER.error("Unsupported data type {}",dataType);
break;
}
columnDataTypeMap.put(column,dataType);
}
}
