{
  this.splitDimensionName=dimensionToSplitOn;
synchronized (sync) {
    if (!children.isEmpty()) {
      return;
    }
 else     if (recordStore == null) {
      throw new IllegalStateException("Splitting a node with null record store on dimension " + splitDimensionName);
    }
    StringBuilder nodeName=new StringBuilder();
    for (    String name : ancestorDimensionNames) {
      String value=ancestorDimensionValues.get(name);
      nodeName.append("(").append(name).append(":").append(value).append(").");
    }
    nodeName.append("(").append(dimensionName).append(":").append(dimensionValue).append(")");
    LOGGER.info("Splitting {} on dimension {} (record={})",nodeName.toString(),splitDimensionName,recordStore.getRecordCount());
    nextAncestorDimensionNames=new ArrayList<String>();
    nextAncestorDimensionValues=new HashMap<String,String>();
    if (!StarTreeConstants.STAR.equals(dimensionName)) {
      nextAncestorDimensionNames.addAll(ancestorDimensionNames);
      nextAncestorDimensionNames.add(dimensionName);
      nextAncestorDimensionValues.putAll(ancestorDimensionValues);
      nextAncestorDimensionValues.put(dimensionName,dimensionValue);
    }
    Map<String,List<StarTreeRecord>> groupedRecords=new HashMap<String,List<StarTreeRecord>>();
    for (    StarTreeRecord record : recordStore) {
      String dimensionValue=record.getDimensionKey().getDimensionValue(config.getDimensions(),splitDimensionName);
      List<StarTreeRecord> records=groupedRecords.get(dimensionValue);
      if (records == null) {
        records=new ArrayList<StarTreeRecord>();
        groupedRecords.put(dimensionValue,records);
      }
      records.add(record);
    }
    starNode=new StarTreeNodeImpl(UUID.randomUUID(),splitDimensionName,StarTreeConstants.STAR,nextAncestorDimensionNames,nextAncestorDimensionValues,new HashMap<String,StarTreeNode>(),null,null);
    starNode.init(config,recordStoreFactory);
    otherNode=new StarTreeNodeImpl(UUID.randomUUID(),splitDimensionName,StarTreeConstants.OTHER,nextAncestorDimensionNames,nextAncestorDimensionValues,new HashMap<String,StarTreeNode>(),null,null);
    otherNode.init(config,recordStoreFactory);
    for (    String dimensionValue : groupedRecords.keySet()) {
      if (StarTreeConstants.OTHER.equals(dimensionValue)) {
        continue;
      }
      addChildNode(dimensionValue);
    }
    for (    Map.Entry<String,List<StarTreeRecord>> entry : groupedRecords.entrySet()) {
      String dimensionValue=entry.getKey();
      List<StarTreeRecord> records=entry.getValue();
      StarTreeNode child=children.get(dimensionValue);
      if (child == null) {
        child=otherNode;
      }
      for (      StarTreeRecord record : records) {
        StarTreeRecord recordForUpdate=record;
        if (child == otherNode) {
          recordForUpdate=record.aliasOther(splitDimensionName);
        }
        child.getRecordStore().update(recordForUpdate);
        starNode.getRecordStore().update(recordForUpdate.relax(splitDimensionName));
      }
    }
    recordStore.clear();
    childDimensionName=splitDimensionName;
  }
}
