{
  LOG.info("Starting ThirdeyeAnomalyApplication : Scheduler {} Worker {}",config.isScheduler(),config.isWorker());
  super.initDetectorRelatedDAO();
  ThirdEyeCacheRegistry.initializeDetectorCaches(config);
  final AnomalyFunctionFactory anomalyFunctionFactory=new AnomalyFunctionFactory(config.getFunctionConfigPath());
  if (config.isScheduler()) {
    detectionJobScheduler=new DetectionJobScheduler(anomalyJobDAO,anomalyTaskDAO,anomalyFunctionDAO);
  }
  if (config.isWorker()) {
    taskDriver=new TaskDriver(config.getId(),anomalyJobDAO,anomalyTaskDAO,anomalyResultDAO,anomalyFunctionRelationDAO,anomalyFunctionFactory,hibernateBundle.getSessionFactory());
  }
  if (config.isMonitor()) {
    monitorJobScheduler=new MonitorJobScheduler(anomalyJobDAO,anomalyTaskDAO,config.getMonitorConfiguration());
  }
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      new HibernateSessionWrapper<Void>(hibernateBundle.getSessionFactory()).execute(new Callable<Void>(){
        @Override public Void call() throws Exception {
          if (config.isWorker()) {
            taskDriver.start();
          }
          if (config.isScheduler()) {
            detectionJobScheduler.start();
            environment.jersey().register(new DetectionJobResource(detectionJobScheduler,anomalyFunctionDAO));
          }
          if (config.isMonitor()) {
            monitorJobScheduler.start();
          }
          return null;
        }
      }
);
    }
    @Override public void stop() throws Exception {
      if (config.isWorker()) {
        taskDriver.stop();
      }
      if (config.isScheduler()) {
        detectionJobScheduler.stop();
      }
      if (config.isMonitor()) {
        monitorJobScheduler.stop();
      }
    }
  }
);
}
