{
  LOG.info("Starting ThirdeyeAnomalyApplication : Scheduler {} Worker {}",config.isScheduler(),config.isWorker());
  super.initDAOs(config.getImplMode());
  ThirdEyeCacheRegistry.initializeCaches(config,webappConfigDAO);
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      if (config.isWorker()) {
        anomalyFunctionFactory=new AnomalyFunctionFactory(config.getFunctionConfigPath());
        taskDriver=new TaskDriver(config,anomalyJobDAO,anomalyTaskDAO,anomalyResultDAO,anomalyMergedResultDAO,anomalyFunctionFactory);
        taskDriver.start();
      }
      if (config.isScheduler()) {
        detectionJobScheduler=new DetectionJobScheduler(anomalyJobDAO,anomalyTaskDAO,anomalyFunctionDAO);
        detectionJobScheduler.start();
        environment.jersey().register(new DetectionJobResource(detectionJobScheduler,anomalyFunctionDAO));
      }
      if (config.isMonitor()) {
        monitorJobScheduler=new MonitorJobScheduler(anomalyJobDAO,anomalyTaskDAO,config.getMonitorConfiguration());
        monitorJobScheduler.start();
      }
      if (config.isAlert()) {
        alertJobScheduler=new AlertJobScheduler(anomalyJobDAO,anomalyTaskDAO,emailConfigurationDAO);
        alertJobScheduler.start();
        environment.jersey().register(new AlertJobResource(alertJobScheduler,emailConfigurationDAO));
      }
      if (config.isMerger()) {
        ScheduledExecutorService executorService=Executors.newSingleThreadScheduledExecutor();
        anomalyMergeExecutor=new AnomalyMergeExecutor(anomalyMergedResultDAO,anomalyFunctionDAO,anomalyResultDAO,executorService);
        anomalyMergeExecutor.start();
      }
    }
    @Override public void stop() throws Exception {
      if (config.isWorker()) {
        taskDriver.stop();
      }
      if (config.isScheduler()) {
        detectionJobScheduler.stop();
      }
      if (config.isMonitor()) {
        monitorJobScheduler.stop();
      }
      if (config.isAlert()) {
        alertJobScheduler.stop();
      }
      if (config.isMerger()) {
        anomalyMergeExecutor.stop();
      }
    }
  }
);
}
