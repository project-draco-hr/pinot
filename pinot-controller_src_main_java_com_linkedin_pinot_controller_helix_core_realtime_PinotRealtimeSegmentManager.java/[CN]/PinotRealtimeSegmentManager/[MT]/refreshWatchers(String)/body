{
  LOGGER.info("Received change notification for path: {}",path);
  List<Stat> stats=new ArrayList<>();
  List<ZNRecord> tableConfigs=_pinotHelixResourceManager.getPropertyStore().getChildren(TABLE_CONFIG,stats,0);
  if (tableConfigs == null) {
    return;
  }
  for (  ZNRecord tableConfig : tableConfigs) {
    try {
      AbstractTableConfig abstractTableConfig=AbstractTableConfig.fromZnRecord(tableConfig);
      if (abstractTableConfig.isRealTime()) {
        KafkaStreamMetadata metadata=new KafkaStreamMetadata(abstractTableConfig.getIndexingConfig().getStreamConfigs());
        if (metadata.hasHighLevelKafkaConsumerType()) {
          String realtimeTable=abstractTableConfig.getTableName();
          String realtimeSegmentsPathForTable=_propertyStorePath + SEGMENTS_PATH + "/"+ realtimeTable;
          LOGGER.info("Setting data/child changes watch for real-time table '{}'",realtimeTable);
          _zkClient.subscribeDataChanges(realtimeSegmentsPathForTable,this);
          _zkClient.subscribeChildChanges(realtimeSegmentsPathForTable,this);
          List<String> childNames=_pinotHelixResourceManager.getPropertyStore().getChildNames(SEGMENTS_PATH + "/" + realtimeTable,0);
          if (childNames != null && !childNames.isEmpty()) {
            for (            String segmentName : childNames) {
              if (!SegmentName.isHighLevelConsumerSegmentName(segmentName)) {
                continue;
              }
              String segmentPath=realtimeSegmentsPathForTable + "/" + segmentName;
              RealtimeSegmentZKMetadata realtimeSegmentZKMetadata=ZKMetadataProvider.getRealtimeSegmentZKMetadata(_pinotHelixResourceManager.getPropertyStore(),abstractTableConfig.getTableName(),segmentName);
              if (realtimeSegmentZKMetadata.getStatus() == Status.IN_PROGRESS) {
                LOGGER.info("Setting data change watch for real-time segment currently being consumed: {}",segmentPath);
                _zkClient.subscribeDataChanges(segmentPath,this);
              }
 else {
                _zkClient.unsubscribeDataChanges(segmentPath,this);
              }
            }
          }
        }
      }
    }
 catch (    JSONException e) {
      LOGGER.error("Caught exception while reading table config",e);
    }
catch (    IOException e) {
      LOGGER.error("Caught exception while setting change listeners for realtime tables/segments",e);
    }
  }
}
