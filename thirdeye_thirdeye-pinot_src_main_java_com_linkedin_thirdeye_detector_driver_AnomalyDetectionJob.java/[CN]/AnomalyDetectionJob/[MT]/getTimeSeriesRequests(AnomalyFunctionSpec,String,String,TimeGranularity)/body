{
  Queue<TimeSeriesRequest> timeSeriesRequestQueue=new LinkedList<>();
  TimeSeriesRequest topLevelRequest=new TimeSeriesRequest();
  topLevelRequest.setCollectionName(collection);
  List<MetricFunction> metricFunctions=Collections.singletonList(metricFunction);
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(metricFunctions);
  topLevelRequest.setMetricExpressions(metricExpressions);
  topLevelRequest.setAggregationTimeGranularity(timeGranularity);
  topLevelRequest.setStart(windowStart);
  topLevelRequest.setEnd(windowEnd);
  topLevelRequest.setEndDateInclusive(false);
  LOG.info("Running anomaly detection job with windowStartProp: {}, windowEndProp: {}, metricExpressions: {}, timeGranularity: {}, windowStart: {}, windowEnd: {}",windowStartProp,windowEndProp,metricExpressions,timeGranularity,windowStart,windowEnd);
  String filters=spec.getFilters();
  if (StringUtils.isNotBlank(filters)) {
    topLevelRequest.setFilterSet(spec.getFilterSet());
  }
  String exploreDimensionsString=spec.getExploreDimensions();
  if (StringUtils.isBlank(exploreDimensionsString)) {
    timeSeriesRequestQueue.add(topLevelRequest);
  }
 else {
    List<String> exploreDimensions=Arrays.asList(exploreDimensionsString.split(","));
    for (    String exploreDimension : exploreDimensions) {
      TimeSeriesRequest groupByRequest=new TimeSeriesRequest(topLevelRequest);
      groupByRequest.setGroupByDimensions(Collections.singletonList(exploreDimension));
      timeSeriesRequestQueue.add(groupByRequest);
    }
  }
  return timeSeriesRequestQueue;
}
