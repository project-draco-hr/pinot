{
  LOGGER.info("Loading maxDataTime cache {}",collection);
  long maxTime=0;
  try {
    TimeSpec timeSpec=collectionSchemaCache.get(collection).getTime();
    long prevMaxDataTime=getPrevMaxDataTime(collection,timeSpec);
    String maxTimePql=String.format(COLLECTION_MAX_TIME_QUERY_TEMPLATE,timeSpec.getColumnName(),collection,timeSpec.getColumnName(),prevMaxDataTime);
    PinotQuery maxTimePinotQuery=new PinotQuery(maxTimePql,collection);
    resultSetGroupCache.refresh(maxTimePinotQuery);
    ResultSetGroup resultSetGroup=resultSetGroupCache.get(maxTimePinotQuery);
    if (resultSetGroup.getResultSetCount() == 0 || resultSetGroup.getResultSet(0).getRowCount() == 0) {
      LOGGER.info("resultSetGroup is Empty for collection {} is {}",collection,resultSetGroup);
      this.collectionToPrevMaxDataTimeMap.remove(collection);
    }
 else {
      long endTime=new Double(resultSetGroup.getResultSet(0).getDouble(0)).longValue();
      this.collectionToPrevMaxDataTimeMap.put(collection,endTime);
      maxTime=timeSpec.getDataGranularity().toMillis(endTime + 1) - 1;
    }
  }
 catch (  Exception e) {
    LOGGER.warn("Exception getting maxTime from collection: {}",collection,e);
    this.collectionToPrevMaxDataTimeMap.remove(collection);
  }
  if (maxTime <= 0) {
    maxTime=System.currentTimeMillis();
  }
  return maxTime;
}
