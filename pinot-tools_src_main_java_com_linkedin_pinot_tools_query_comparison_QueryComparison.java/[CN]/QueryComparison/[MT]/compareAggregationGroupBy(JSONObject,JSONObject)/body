{
  JSONArray actualGroupByResults=actualJson.getJSONArray(AGGREGATION_RESULTS);
  JSONArray expectedGroupByResults=expectedJson.getJSONArray(AGGREGATION_RESULTS);
  int numActualGroupBy=actualGroupByResults.length();
  int numExpectedGroupBy=expectedGroupByResults.length();
  Map<String,Integer> functionMap=new HashMap<>();
  for (int i=0; i < numExpectedGroupBy; ++i) {
    JSONObject expectedAggr=expectedGroupByResults.getJSONObject(i);
    String expectedFunction=expectedAggr.getString(FUNCTION).toLowerCase();
    functionMap.put(expectedFunction,i);
  }
  for (int i=0; i < numActualGroupBy; ++i) {
    JSONObject actualAggr=actualGroupByResults.getJSONObject(i);
    String actualFunction=actualAggr.getString(FUNCTION).toLowerCase();
    if (!functionMap.containsKey(actualFunction)) {
      LOGGER.error("Missing group by function in expected response: {}",actualFunction);
      return false;
    }
    JSONObject expectedAggr=expectedGroupByResults.getJSONObject(functionMap.get(actualFunction));
    if (!compareGroupByColumns(actualAggr,expectedAggr)) {
      return false;
    }
    if (!compareAggregationValues(actualAggr,expectedAggr)) {
      return false;
    }
  }
  return true;
}
