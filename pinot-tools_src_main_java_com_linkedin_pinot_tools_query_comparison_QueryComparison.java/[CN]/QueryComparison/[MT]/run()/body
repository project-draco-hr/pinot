{
  startCluster();
  String query;
  ScanBasedQueryProcessor scanBasedQueryProcessor=null;
  BufferedReader resultReader=null;
  BufferedReader queryReader=new BufferedReader(new FileReader(_queryFile));
  if (_resultFile == null) {
    scanBasedQueryProcessor=new ScanBasedQueryProcessor(_segmentsDir.getAbsolutePath());
  }
 else {
    resultReader=new BufferedReader(new FileReader(_resultFile));
  }
  int passed=0;
  int total=0;
  while ((query=queryReader.readLine()) != null) {
    if (query.isEmpty() || query.startsWith("#")) {
      continue;
    }
    try {
      JSONObject refJson;
      if (resultReader != null) {
        refJson=new JSONObject(resultReader.readLine());
      }
 else {
        QueryResponse refResponse=scanBasedQueryProcessor.processQuery(query);
        refJson=new JSONObject(new ObjectMapper().writeValueAsString(refResponse));
      }
      String flowResponse=_clusterStarter.query(query);
      JSONObject flowJson=new JSONObject(flowResponse);
      if (compare(flowJson,refJson)) {
        ++passed;
        LOGGER.info("Comparison PASSED: Id: {} Flow Time: {} ms Ref Time: {} ms Docs Scanned: {}",total,flowJson.get(TIME_USED_MS),refJson.get(TIME_USED_MS),flowJson.get(NUM_DOCS_SCANNED));
        LOGGER.debug("Flow Response: {}",flowJson);
        LOGGER.debug("Ref Response: {}",refJson);
      }
 else {
        LOGGER.error("Comparison FAILED: {}",query);
        LOGGER.info("Flow Response: {}",flowJson);
        LOGGER.info("Ref Response: {}",refJson);
      }
    }
 catch (    Exception e) {
      LOGGER.error("Exception caught while processing query: '{}'",query,e);
    }
 finally {
      ++total;
    }
  }
  LOGGER.info("Total {} out of {} queries passed.",passed,total);
}
