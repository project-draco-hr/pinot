{
  JSONArray actualResult=actualAggr.getJSONArray(GROUP_BY_RESULT);
  JSONArray expectedResult=expectedAggr.getJSONArray(GROUP_BY_RESULT);
  Map<GroupByOperator,Double> expectedMap=new HashMap<>();
  for (int i=0; i < expectedResult.length(); ++i) {
    List<Object> group=jsonArrayToList(expectedResult.getJSONObject(i).getJSONArray(GROUP));
    GroupByOperator groupByOperator=new GroupByOperator(group);
    expectedMap.put(groupByOperator,expectedResult.getJSONObject(i).getDouble(VALUE));
  }
  for (int i=0; i < actualResult.length(); ++i) {
    List<Object> group=jsonArrayToList(actualResult.getJSONObject(i).getJSONArray(GROUP));
    GroupByOperator groupByOperator=new GroupByOperator(group);
    double actualValue=actualResult.getJSONObject(i).getDouble(VALUE);
    if (!expectedMap.containsKey(groupByOperator)) {
      LOGGER.error("Missing group by value for group: {}",group);
      return false;
    }
    double expectedValue=expectedMap.get(groupByOperator);
    if (!fuzzyEqual(actualValue,expectedValue)) {
      LOGGER.error("Aggregation group by value mis-match: actual: {}, expected: {}",actualValue,expectedValue);
      return false;
    }
  }
  return true;
}
