{
  final IndexSegmentImpl heapSegment=(IndexSegmentImpl)ColumnarSegmentLoader.load(INDEX_DIR,ReadMode.heap);
  final IndexSegmentImpl mmapSegment=(IndexSegmentImpl)ColumnarSegmentLoader.load(INDEX_DIR,ReadMode.mmap);
  for (  final String column : ((SegmentMetadataImpl)mmapSegment.getSegmentMetadata()).getColumnMetadataMap().keySet()) {
    final ImmutableDictionaryReader heapDictionary=heapSegment.getDictionaryFor(column);
    final ImmutableDictionaryReader mmapDictionary=mmapSegment.getDictionaryFor(column);
switch (((SegmentMetadataImpl)mmapSegment.getSegmentMetadata()).getColumnMetadataMap().get(column).getDataType()) {
case BOOLEAN:
case STRING:
      Assert.assertEquals(true,heapDictionary instanceof StringDictionary);
    Assert.assertEquals(true,mmapDictionary instanceof StringDictionary);
  break;
case DOUBLE:
Assert.assertEquals(true,heapDictionary instanceof DoubleDictionary);
Assert.assertEquals(true,mmapDictionary instanceof DoubleDictionary);
break;
case FLOAT:
Assert.assertEquals(true,heapDictionary instanceof FloatDictionary);
Assert.assertEquals(true,mmapDictionary instanceof FloatDictionary);
break;
case LONG:
Assert.assertEquals(true,heapDictionary instanceof LongDictionary);
Assert.assertEquals(true,mmapDictionary instanceof LongDictionary);
break;
case INT:
Assert.assertEquals(true,heapDictionary instanceof IntDictionary);
Assert.assertEquals(true,mmapDictionary instanceof IntDictionary);
break;
}
Assert.assertEquals(mmapDictionary.length(),heapDictionary.length());
for (int i=0; i < heapDictionary.length(); i++) {
Assert.assertEquals(mmapDictionary.get(i),heapDictionary.get(i));
}
}
}
