{
switch (type) {
case BOOLEAN:
    Assert.assertEquals(arr[rowId],dataTable.getBoolean(rowId,colId));
  break;
case CHAR:
Assert.assertEquals(arr[rowId],dataTable.getChar(rowId,colId));
break;
case BYTE:
Assert.assertEquals(arr[rowId],dataTable.getByte(rowId,colId));
break;
case SHORT:
Assert.assertEquals(arr[rowId],dataTable.getShort(rowId,colId));
break;
case INT:
Assert.assertEquals(arr[rowId],dataTable.getInt(rowId,colId));
break;
case LONG:
Assert.assertEquals(arr[rowId],dataTable.getLong(rowId,colId));
break;
case FLOAT:
Assert.assertEquals(arr[rowId],dataTable.getFloat(rowId,colId));
break;
case DOUBLE:
Assert.assertEquals(arr[rowId],dataTable.getDouble(rowId,colId));
break;
case STRING:
Assert.assertEquals(arr[rowId],dataTable.getString(rowId,colId));
break;
case BYTE_ARRAY:
byte[] expectedByteArray=(byte[])arr[rowId];
byte[] actualByteArray=(byte[])dataTable.getByteArray(rowId,colId);
Assert.assertEquals(expectedByteArray.length,actualByteArray.length);
Assert.assertTrue(Arrays.equals(expectedByteArray,actualByteArray));
break;
case CHAR_ARRAY:
char[] expectedCharArray=(char[])arr[rowId];
char[] actualChartArray=(char[])dataTable.getCharArray(rowId,colId);
Assert.assertEquals(expectedCharArray.length,actualChartArray.length);
Assert.assertTrue(Arrays.equals(expectedCharArray,actualChartArray));
break;
case INT_ARRAY:
int[] expectedIntArray=(int[])arr[rowId];
int[] actualIntArray=(int[])dataTable.getIntArray(rowId,colId);
Assert.assertEquals(expectedIntArray.length,actualIntArray.length);
Assert.assertTrue(Arrays.equals(expectedIntArray,actualIntArray));
break;
case STRING_ARRAY:
String[] expectedStringArray=(String[])arr[rowId];
String[] actualStringArray=(String[])dataTable.getStringArray(rowId,colId);
Assert.assertEquals(expectedStringArray.length,actualStringArray.length);
Assert.assertTrue(Arrays.equals(expectedStringArray,actualStringArray));
break;
case OBJECT:
Assert.assertEquals(arr[rowId],dataTable.getObject(rowId,colId));
break;
default :
break;
}
}
