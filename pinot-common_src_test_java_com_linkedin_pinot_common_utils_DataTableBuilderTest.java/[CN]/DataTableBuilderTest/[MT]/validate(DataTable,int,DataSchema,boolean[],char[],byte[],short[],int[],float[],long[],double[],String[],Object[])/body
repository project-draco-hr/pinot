{
  for (int rowId=0; rowId < numRows; rowId++) {
    for (int colId=0; colId < schema.columnNames.length; colId++) {
      final DataType type=schema.columnTypes[colId];
switch (type) {
case BOOLEAN:
        Assert.assertEquals(boolArr[rowId],dataTable.getBoolean(rowId,colId));
      break;
case CHAR:
    Assert.assertEquals(cArr[rowId],dataTable.getChar(rowId,colId));
  break;
case BYTE:
Assert.assertEquals(bArr[rowId],dataTable.getByte(rowId,colId));
break;
case SHORT:
Assert.assertEquals(sArr[rowId],dataTable.getShort(rowId,colId));
break;
case INT:
Assert.assertEquals(iArr[rowId],dataTable.getInt(rowId,colId));
break;
case LONG:
Assert.assertEquals(lArr[rowId],dataTable.getLong(rowId,colId));
break;
case FLOAT:
Assert.assertEquals(fArr[rowId],dataTable.getFloat(rowId,colId));
break;
case DOUBLE:
Assert.assertEquals(dArr[rowId],dataTable.getDouble(rowId,colId));
break;
case STRING:
Assert.assertEquals(strArr[rowId],dataTable.getString(rowId,colId));
break;
case OBJECT:
Assert.assertEquals(oArr[rowId],dataTable.getObject(rowId,colId));
break;
default :
break;
}
}
}
}
