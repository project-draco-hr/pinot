{
  String[] columnNames=new String[]{"functionName","GroupByResultMap"};
  DataType[] columnTypes=new DataType[]{DataType.STRING,DataType.OBJECT};
  DataSchema schema=new DataSchema(columnNames,columnTypes);
  DataTableBuilder builder=new DataTableBuilder(schema);
  builder.startRow();
  builder.setColumn(0,"sum_count");
  Map<String,Double> map=new HashMap<String,Double>();
  map.put("2358\tmember\t0",4.0);
  map.put("2359\tmember\t0",1.0);
  map.put("2358\tgroup\t6",1.0);
  map.put("2358\tskill\t4",23.0);
  map.put("2367\tmember\t0",1.0);
  map.put("2358\tupdates\t9",3.0);
  map.put("2358\tgroup\t8",2.0);
  map.put("2359\tgroup\t3",2.0);
  map.put("2361\tgroup\t3",1.0);
  map.put("2358\tmember\t2",9.0);
  builder.setColumn(1,map);
  builder.finishRow();
  builder.addMetaData("timeUsedMs","18");
  builder.addMetaData("requestId","3");
  builder.addMetaData("totalDocs","1001049811");
  builder.addMetaData("numDocsScanned","25");
  builder.seal();
  DataTable dataTable=builder.build();
  byte[] bytes=dataTable.toBytes();
  DataTable newDataTable=new DataTable(bytes);
  Assert.assertEquals(dataTable.numRows,newDataTable.numRows);
  Assert.assertEquals(dataTable.numCols,newDataTable.numCols);
  for (int i=0; i < newDataTable.numRows; i++) {
    for (int j=0; j < newDataTable.numCols; j++) {
switch (columnTypes[j]) {
case STRING:
        Assert.assertEquals(dataTable.getString(i,j),newDataTable.getString(i,j));
      break;
case OBJECT:
    break;
case BOOLEAN:
  break;
case BYTE:
break;
case BYTE_ARRAY:
break;
case CHAR:
break;
case CHAR_ARRAY:
break;
case DOUBLE:
break;
case DOUBLE_ARRAY:
break;
case FLOAT:
break;
case FLOAT_ARRAY:
break;
case INT:
break;
case INT_ARRAY:
break;
case LONG:
break;
case LONG_ARRAY:
break;
case SHORT:
break;
case SHORT_ARRAY:
break;
case STRING_ARRAY:
break;
default :
break;
}
}
}
int size=0;
for (int i=0; i < 10; i++) {
long start=System.nanoTime();
byte[] buffer=dataTable.toBytes();
long end=System.nanoTime();
LOGGER.trace("ser time:\t\t" + (end - start));
size=buffer.length;
start=System.nanoTime();
new DataTable(buffer);
end=System.nanoTime();
LOGGER.trace("deser time:\t\t" + (end - start));
}
LOGGER.trace("SIZE:" + size);
}
