{
  if (connectionPool == null) {
    LOGGER.info("init hasn't been called yet on the live instances listener...");
    return;
  }
  LOGGER.info("Connection pool found, moving on...");
  for (  LiveInstance instance : liveInstances) {
    String instanceId=instance.getInstanceName();
    String sessionId=instance.getSessionId();
    if (instanceId.startsWith("Broker_")) {
      LOGGER.info("skipping broker instances {}",instanceId);
      continue;
    }
    String namePortStr=instanceId.split("Server_")[1];
    String hostName=namePortStr.split("_")[0];
    int port;
    try {
      port=Integer.parseInt(namePortStr.split("_")[1]);
    }
 catch (    Exception e) {
      LOGGER.warn("Port for server instance " + instanceId + " does not appear to be numeric",e);
      port=CommonConstants.Helix.DEFAULT_SERVER_NETTY_PORT;
    }
    ServerInstance ins=new ServerInstance(hostName,port);
    if (liveInstanceToSessionIdMap.containsKey(instanceId)) {
      LOGGER.info("found instance Id : {} with new session Id : {} old session Id {}",instanceId,sessionId,liveInstanceToSessionIdMap.get(instanceId));
      if (!sessionId.equals(liveInstanceToSessionIdMap.get(instanceId))) {
        try {
          connectionPool.validatePool(ins,DO_NOT_RECREATE);
          liveInstanceToSessionIdMap.put(instanceId,sessionId);
        }
 catch (        Exception e) {
          LOGGER.error("Error trying to validate & destroy dead connections for {}",instanceId,e);
        }
      }
    }
 else {
      LOGGER.info("found instance Id : {} with new session Id : {}",instanceId,sessionId);
      try {
        connectionPool.validatePool(ins,DO_NOT_RECREATE);
        liveInstanceToSessionIdMap.put(instanceId,sessionId);
      }
 catch (      Exception e) {
        LOGGER.error("Error trying to destroy dead connections for {}",instanceId,e);
      }
    }
  }
}
