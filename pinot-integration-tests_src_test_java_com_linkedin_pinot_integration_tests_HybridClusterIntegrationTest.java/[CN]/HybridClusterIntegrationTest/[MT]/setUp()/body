{
  FileUtils.deleteDirectory(_tmpDir);
  FileUtils.deleteDirectory(_segmentDir);
  FileUtils.deleteDirectory(_tarDir);
  _tmpDir.mkdirs();
  _segmentDir.mkdirs();
  _tarDir.mkdirs();
  startZk();
  kafkaStarter=KafkaTestUtils.startServer(KafkaTestUtils.DEFAULT_KAFKA_PORT,KafkaTestUtils.DEFAULT_BROKER_ID,KafkaTestUtils.DEFAULT_ZK_STR,KafkaTestUtils.getDefaultKafkaConfiguration());
  KafkaTestUtils.createTopic(KAFKA_TOPIC,KafkaTestUtils.DEFAULT_ZK_STR);
  startController();
  startBroker();
  startServers(2);
  TarGzCompressionUtils.unTar(new File(TestUtils.getFileFromResourceUrl(OfflineClusterIntegrationTest.class.getClassLoader().getResource("On_Time_On_Time_Performance_2014_100k_subset_nonulls.tar.gz"))),_tmpDir);
  _tmpDir.mkdirs();
  final List<File> avroFiles=new ArrayList<File>(SEGMENT_COUNT);
  for (int segmentNumber=1; segmentNumber <= SEGMENT_COUNT; ++segmentNumber) {
    avroFiles.add(new File(_tmpDir.getPath() + "/On_Time_On_Time_Performance_2014_" + segmentNumber+ ".avro"));
  }
  File schemaFile=new File(OfflineClusterIntegrationTest.class.getClassLoader().getResource("On_Time_On_Time_Performance_2014_100k_subset_nonulls.schema").getFile());
  setUpTable("mytable","DaysSinceEpoch","daysSinceEpoch",KafkaTestUtils.DEFAULT_ZK_STR,KAFKA_TOPIC,schemaFile,avroFiles.get(0));
  final List<File> offlineAvroFiles=new ArrayList<File>(OFFLINE_SEGMENT_COUNT);
  for (int i=0; i < OFFLINE_SEGMENT_COUNT; i++) {
    offlineAvroFiles.add(avroFiles.get(i));
  }
  final List<File> realtimeAvroFiles=new ArrayList<File>(REALTIME_SEGMENT_COUNT);
  for (int i=SEGMENT_COUNT - REALTIME_SEGMENT_COUNT; i < SEGMENT_COUNT; i++) {
    realtimeAvroFiles.add(avroFiles.get(i));
  }
  ExecutorService executor=Executors.newCachedThreadPool();
  Class.forName("org.h2.Driver");
  _connection=DriverManager.getConnection("jdbc:h2:mem:");
  executor.execute(new Runnable(){
    @Override public void run(){
      createH2SchemaAndInsertAvroFiles(avroFiles,_connection);
    }
  }
);
  buildSegmentsFromAvro(offlineAvroFiles,executor,0,_segmentDir,_tarDir,"mytable");
  executor.execute(new Runnable(){
    @Override public void run(){
      _queryGenerator=new QueryGenerator(avroFiles,"'mytable'","mytable");
    }
  }
);
  executor.shutdown();
  executor.awaitTermination(10,TimeUnit.MINUTES);
  final CountDownLatch latch=new CountDownLatch(1);
  HelixManager manager=HelixManagerFactory.getZKHelixManager(getHelixClusterName(),"test_instance",InstanceType.SPECTATOR,ZkTestUtils.DEFAULT_ZK_STR);
  manager.connect();
  manager.addExternalViewChangeListener(new ExternalViewChangeListener(){
    @Override public void onExternalViewChange(    List<ExternalView> externalViewList,    NotificationContext changeContext){
      for (      ExternalView externalView : externalViewList) {
        if (externalView.getId().contains("mytable")) {
          Set<String> partitionSet=externalView.getPartitionSet();
          if (partitionSet.size() == OFFLINE_SEGMENT_COUNT) {
            int onlinePartitionCount=0;
            for (            String partitionId : partitionSet) {
              Map<String,String> partitionStateMap=externalView.getStateMap(partitionId);
              if (partitionStateMap.containsValue("ONLINE")) {
                onlinePartitionCount++;
              }
            }
            if (onlinePartitionCount == OFFLINE_SEGMENT_COUNT) {
              System.out.println("Got " + OFFLINE_SEGMENT_COUNT + " online tables, unlatching the main thread");
              latch.countDown();
            }
          }
        }
      }
    }
  }
);
  int i=0;
  for (  String segmentName : _tarDir.list()) {
    System.out.println("Uploading segment " + (i++) + " : "+ segmentName);
    File file=new File(_tarDir,segmentName);
    FileUploadUtils.sendSegmentFile("localhost","8998",segmentName,new FileInputStream(file),file.length());
  }
  latch.await();
  pushAvroIntoKafka(realtimeAvroFiles,KafkaTestUtils.DEFAULT_KAFKA_BROKER,KAFKA_TOPIC);
  int pinotRecordCount, h2RecordCount;
  long timeInTwoMinutes=System.currentTimeMillis() + 2 * 60 * 1000L;
  Statement statement=_connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  do {
    Thread.sleep(5000L);
    JSONObject response=postQuery("select count(*) from 'mytable'");
    JSONArray aggregationResultsArray=response.getJSONArray("aggregationResults");
    JSONObject firstAggregationResult=aggregationResultsArray.getJSONObject(0);
    String pinotValue=firstAggregationResult.getString("value");
    pinotRecordCount=Integer.parseInt(pinotValue);
    statement.execute("select count(*) from mytable");
    ResultSet rs=statement.getResultSet();
    rs.first();
    h2RecordCount=rs.getInt(1);
    rs.close();
    LOGGER.info("H2 record count: " + h2RecordCount + "\tPinot record count: "+ pinotRecordCount);
    Assert.assertTrue(System.currentTimeMillis() < timeInTwoMinutes,"Failed to read all records within two minutes");
    TOTAL_DOCS=response.getLong("totalDocs");
  }
 while (h2RecordCount != pinotRecordCount);
}
