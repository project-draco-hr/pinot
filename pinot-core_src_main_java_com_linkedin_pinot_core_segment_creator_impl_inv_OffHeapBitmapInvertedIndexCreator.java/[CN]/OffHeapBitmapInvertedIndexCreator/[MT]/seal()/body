{
  FileOutputStream fos=null;
  FileInputStream fisOffsets=null;
  FileInputStream fisBitmaps=null;
  final DataOutputStream bitmapsOut;
  final DataOutputStream offsetsOut;
  String tempOffsetsFile=invertedIndexFile + ".offsets";
  String tempBitmapsFile=invertedIndexFile + ".binary";
  try {
    constructPostingLists();
    offsetsOut=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tempOffsetsFile)));
    bitmapsOut=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tempBitmapsFile)));
    int startOffset=4 * (cardinality + 1);
    offsetsOut.writeInt(startOffset);
    MutableRoaringBitmap bitmap=new MutableRoaringBitmap();
    for (int i=0; i < cardinality; i++) {
      bitmap.clear();
      int length=postingListLengths.get(i);
      for (int j=0; j < length; j++) {
        int bufferOffset=postingListStartOffsets.get(i) + j;
        int value=postingListBuffer.get(bufferOffset);
        bitmap.add(value);
      }
      bitmap.serialize(bitmapsOut);
      startOffset+=bitmap.serializedSizeInBytes();
      offsetsOut.writeInt(startOffset);
    }
    offsetsOut.close();
    bitmapsOut.close();
    fos=new FileOutputStream(invertedIndexFile);
    fisOffsets=new FileInputStream(tempOffsetsFile);
    fisBitmaps=new FileInputStream(tempBitmapsFile);
    FileChannel channelOffsets=fisOffsets.getChannel();
    channelOffsets.transferTo(0,channelOffsets.size(),fos.getChannel());
    FileChannel channelBitmaps=fisBitmaps.getChannel();
    channelBitmaps.transferTo(0,channelBitmaps.size(),fos.getChannel());
    LOGGER.debug("persisted bitmap inverted index for column : " + spec.getName() + " in "+ invertedIndexFile.getAbsolutePath());
  }
 catch (  Exception e) {
    LOGGER.error("Exception while creating bitmap index for column:" + spec.getName(),e);
  }
 finally {
    IOUtils.closeQuietly(fos);
    IOUtils.closeQuietly(fisOffsets);
    IOUtils.closeQuietly(fisOffsets);
    IOUtils.closeQuietly(fos);
    IOUtils.closeQuietly(fos);
    MmapUtils.unloadByteBuffer(valueBuffer);
    if (!spec.isSingleValueField()) {
      MmapUtils.unloadByteBuffer(lengths);
    }
    MmapUtils.unloadByteBuffer(postingListBuffer);
    MmapUtils.unloadByteBuffer(postingListCurrentOffsets);
    MmapUtils.unloadByteBuffer(postingListLengths);
    MmapUtils.unloadByteBuffer(postingListStartOffsets);
    FileUtils.deleteQuietly(new File(tempOffsetsFile));
    FileUtils.deleteQuietly(new File(tempBitmapsFile));
  }
}
