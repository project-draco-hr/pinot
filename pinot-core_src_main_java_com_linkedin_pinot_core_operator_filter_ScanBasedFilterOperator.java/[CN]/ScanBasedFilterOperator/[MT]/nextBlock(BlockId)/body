{
  Predicate predicate=getPredicate();
  Dictionary dictionary=dataSource.getDictionary();
  DataSourceMetadata dataSourceMetadata=dataSource.getDataSourceMetadata();
  List<Integer> dictIds=new ArrayList<Integer>();
switch (predicate.getType()) {
case EQ:
    final int valueToLookUP=dictionary.indexOf(((EqPredicate)predicate).getEqualsValue());
  if (valueToLookUP >= 0) {
    dictIds.add(valueToLookUP);
  }
break;
case NEQ:
final int neq=dictionary.indexOf(((NEqPredicate)predicate).getNotEqualsValue());
for (int i=0; i < dictionary.length(); i++) {
if (i != neq) {
dictIds.add(i);
}
}
break;
case IN:
final String[] inValues=((InPredicate)predicate).getInRange();
for (final String value : inValues) {
final int index=dictionary.indexOf(value);
System.out.println(index);
if (index >= 0) {
dictIds.add(index);
}
}
break;
case NOT_IN:
final String[] notInValues=((NotInPredicate)predicate).getNotInRange();
final List<Integer> notInIds=new ArrayList<Integer>();
for (final String notInValue : notInValues) {
notInIds.add(new Integer(dictionary.indexOf(notInValue)));
}
for (int i=0; i < dictionary.length(); i++) {
if (!notInIds.contains(new Integer(i))) {
dictIds.add(i);
}
}
break;
case RANGE:
if (dictionary instanceof ImmutableDictionaryReader) {
int[] rangeStartEndIndex=RangePredicateEvaluator.get().evalStartEndIndex(dictionary,(RangePredicate)predicate);
int rangeStartIndex=rangeStartEndIndex[0];
int rangeEndIndex=rangeStartEndIndex[1];
LOGGER.info("rangeStartIndex:{}, rangeEndIndex:{}",rangeStartIndex,rangeEndIndex);
for (int i=rangeStartIndex; i <= rangeEndIndex; i++) {
dictIds.add(i);
}
}
 else {
dictIds=RangePredicateEvaluator.get().evalRangeDicIdsFromMutableDictionary((MutableDictionaryReader)dictionary,(RangePredicate)predicate);
Collections.sort(dictIds);
}
break;
default :
throw new UnsupportedOperationException("Regex not supported");
}
BlockDocIdSet docIdSet;
int[] dictIdsArray=new int[dictIds.size()];
for (int i=0; i < dictIds.size(); i++) {
dictIdsArray[i]=dictIds.get(i);
}
Block nextBlock=dataSource.nextBlock();
BlockValSet blockValueSet=nextBlock.getBlockValueSet();
BlockMetadata blockMetadata=nextBlock.getMetadata();
if (LOGGER.isInfoEnabled()) {
LOGGER.info("dict ids matched:{}",Arrays.toString(dictIdsArray));
}
if (dataSourceMetadata.isSingleValue()) {
docIdSet=new ScanBasedSingleValueDocIdSet(blockValueSet,blockMetadata,dictIdsArray);
}
 else {
docIdSet=new ScanBasedMultiValueDocIdSet(blockValueSet,blockMetadata,dictIdsArray);
}
return new ScanBlock(docIdSet);
}
