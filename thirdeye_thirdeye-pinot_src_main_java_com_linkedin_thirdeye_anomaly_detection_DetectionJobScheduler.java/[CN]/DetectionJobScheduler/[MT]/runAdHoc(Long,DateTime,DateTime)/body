{
  AnomalyFunctionDTO anomalyFunctionSpec=anomalyFunctionDAO.findById(id);
  if (anomalyFunctionSpec == null) {
    throw new IllegalArgumentException("No function with id " + id);
  }
  String triggerKey=String.format("anomaly_adhoc_trigger_%d",anomalyFunctionSpec.getId());
  Trigger trigger=TriggerBuilder.newTrigger().withIdentity(triggerKey).startNow().build();
  String jobKey="adhoc_" + getJobKey(anomalyFunctionSpec.getId(),anomalyFunctionSpec.getFunctionName());
  JobDetail job=JobBuilder.newJob(DetectionJobRunner.class).withIdentity(jobKey).build();
  DetectionJobContext detectionJobContext=new DetectionJobContext();
  detectionJobContext.setAnomalyFunctionDAO(anomalyFunctionDAO);
  detectionJobContext.setAnomalyJobDAO(anomalyJobDAO);
  detectionJobContext.setAnomalyTaskDAO(anomalyTaskDAO);
  detectionJobContext.setAnomalyFunctionId(anomalyFunctionSpec.getId());
  detectionJobContext.setJobName(jobKey);
  detectionJobContext.setWindowStartTime(windowStartTime);
  detectionJobContext.setWindowEndTime(windowEndTime);
  job.getJobDataMap().put(DetectionJobRunner.DETECTION_JOB_CONTEXT,detectionJobContext);
  try {
    quartzScheduler.scheduleJob(job,trigger);
  }
 catch (  SchedulerException e) {
    LOG.error("Exception while scheduling job",e);
  }
  LOG.info("Started {}: {}",jobKey,anomalyFunctionSpec);
}
