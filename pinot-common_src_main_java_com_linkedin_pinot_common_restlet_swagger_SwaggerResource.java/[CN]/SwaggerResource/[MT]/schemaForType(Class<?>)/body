{
  try {
    JSONObject schema=new JSONObject();
    schema.put("type","object");
    schema.put("title",type.getSimpleName());
    Example example=type.getAnnotation(Example.class);
    if (example != null) {
      schema.put("example",new JSONObject(example.value()));
    }
    for (    Constructor<?> constructor : type.getConstructors()) {
      if (constructor.isAnnotationPresent(JsonCreator.class)) {
        JSONObject properties=new JSONObject();
        JSONArray required=new JSONArray();
        Annotation[][] parameterAnnotations=constructor.getParameterAnnotations();
        Class<?>[] parameterTypes=constructor.getParameterTypes();
        for (int i=0; i < parameterTypes.length; i++) {
          Class<?> parameterType=parameterTypes[i];
          Annotation[] annotations=parameterAnnotations[i];
          if (annotations.length != 0) {
            for (            Annotation annotation : annotations) {
              if (annotation instanceof JsonProperty) {
                JsonProperty jsonPropertyAnnotation=(JsonProperty)annotation;
                JSONObject parameter=new JSONObject();
                properties.put(jsonPropertyAnnotation.value(),parameter);
                if (parameterType.equals(String.class)) {
                  parameter.put("type","string");
                }
 else                 if (parameterType.equals(Boolean.class) || parameterType.equals(Boolean.TYPE)) {
                  parameter.put("type","boolean");
                }
 else                 if (parameterType.equals(Integer.class) || parameterType.equals(Integer.TYPE)) {
                  parameter.put("type","integer");
                }
 else                 if (parameterType.equals(Long.class) || parameterType.equals(Long.TYPE)) {
                  parameter.put("type","integer");
                }
 else                 if (parameterType.equals(Float.class) || parameterType.equals(Float.TYPE)) {
                  parameter.put("type","boolean");
                }
 else                 if (parameterType.equals(Double.class) || parameterType.equals(Double.TYPE)) {
                  parameter.put("type","double");
                }
 else                 if (parameterType.equals(Byte.class) || parameterType.equals(Byte.TYPE)) {
                  parameter.put("type","string");
                }
 else {
                  parameter.put("type","string");
                }
                if (jsonPropertyAnnotation.required()) {
                  required.put(jsonPropertyAnnotation.value());
                }
              }
            }
          }
        }
        if (required.length() != 0) {
          schema.put("required",required);
        }
        schema.put("properties",properties);
        break;
      }
    }
    return schema;
  }
 catch (  Exception e) {
    return new JSONObject();
  }
}
