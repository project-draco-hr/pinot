{
  String tag="testExpansionResource";
  JSONObject payload=ControllerRequestBuilderUtil.buildCreateOfflineResourceJSON(tag,2,2);
  String res=sendPostRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forResourceCreate(),payload.toString());
  System.out.println(res);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"testExpansionResource_O").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_" + tag).size(),1);
  Thread.sleep(1000);
  OfflineDataResourceZKMetadata offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(_propertyStore,"testExpansionResource_O");
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataReplicas(),2);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataInstances(),2);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumBrokerInstance(),1);
  payload=ControllerRequestBuilderUtil.buildUpdateDataResourceJSON("testExpansionResource",4,3);
  res=sendPutRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forResourceCreate(),payload.toString());
  System.out.println(res);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"testExpansionResource_O").size(),4);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_" + tag).size(),1);
  Thread.sleep(1000);
  offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(_propertyStore,"testExpansionResource_O");
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataReplicas(),3);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataInstances(),4);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumBrokerInstance(),1);
  payload=ControllerRequestBuilderUtil.buildUpdateDataResourceJSON("testExpansionResource",6,5);
  res=sendPutRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forResourceCreate(),payload.toString());
  System.out.println(res);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"testExpansionResource_O").size(),6);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_" + tag).size(),1);
  Thread.sleep(1000);
  offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(_propertyStore,"testExpansionResource_O");
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataReplicas(),5);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataInstances(),6);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumBrokerInstance(),1);
  payload=ControllerRequestBuilderUtil.buildUpdateBrokerResourceJSON("testExpansionResource",2);
  res=sendPutRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forResourceCreate(),payload.toString());
  System.out.println(res);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"testExpansionResource_O").size(),6);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_" + tag).size(),2);
  Thread.sleep(1000);
  offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(_propertyStore,"testExpansionResource_O");
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataReplicas(),5);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataInstances(),6);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumBrokerInstance(),2);
  payload=ControllerRequestBuilderUtil.buildUpdateBrokerResourceJSON("testExpansionResource",4);
  res=sendPutRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forResourceCreate(),payload.toString());
  System.out.println(res);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"testExpansionResource_O").size(),6);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_" + tag).size(),4);
  Thread.sleep(1000);
  offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(_propertyStore,"testExpansionResource_O");
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataReplicas(),5);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumDataInstances(),6);
  Assert.assertEquals(offlineDataResourceZKMetadata.getNumBrokerInstance(),4);
}
