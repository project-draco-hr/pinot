{
  return new BlockValSet(){
    @Override public BlockValIterator iterator(){
      return new BlockSingleValIterator(){
        private int counter=0;
        private int max=docIdSearchableOffset;
        @Override public boolean skipTo(        int docId){
          if (docId > max) {
            return false;
          }
          counter=docId;
          return true;
        }
        @Override public int size(){
          return max;
        }
        @Override public boolean reset(){
          counter=0;
          return true;
        }
        @Override public boolean next(){
          counter++;
          return counter > max;
        }
        @Override public int nextIntVal(){
          if (counter >= max) {
            return Constants.EOF;
          }
          Pair<Long,Long> documentFinderPair=docIdMap.get(counter);
          long hash64=documentFinderPair.getLeft();
          DimensionTuple tuple=dimemsionTupleMap.get(hash64);
          ByteBuffer rawData=tuple.getMetricsBuffForTime(documentFinderPair.getRight());
          Object val=ByteBufferUtils.extractMetricValueFrom(columnName,rawData,schema,metricsOffsetMap);
          counter++;
          return ((Integer)val);
        }
        @Override public long nextLongVal(){
          if (counter >= max) {
            return Constants.EOF;
          }
          Pair<Long,Long> documentFinderPair=docIdMap.get(counter);
          long hash64=documentFinderPair.getLeft();
          DimensionTuple tuple=dimemsionTupleMap.get(hash64);
          ByteBuffer rawData=tuple.getMetricsBuffForTime(documentFinderPair.getRight());
          Object val=ByteBufferUtils.extractMetricValueFrom(columnName,rawData,schema,metricsOffsetMap);
          counter++;
          return ((Long)val);
        }
        @Override public float nextFloatVal(){
          if (counter >= max) {
            return Constants.EOF;
          }
          Pair<Long,Long> documentFinderPair=docIdMap.get(counter);
          long hash64=documentFinderPair.getLeft();
          DimensionTuple tuple=dimemsionTupleMap.get(hash64);
          ByteBuffer rawData=tuple.getMetricsBuffForTime(documentFinderPair.getRight());
          Object val=ByteBufferUtils.extractMetricValueFrom(columnName,rawData,schema,metricsOffsetMap);
          counter++;
          return ((Float)val);
        }
        @Override public double nextDoubleVal(){
          if (counter >= max) {
            return Constants.EOF;
          }
          Pair<Long,Long> documentFinderPair=docIdMap.get(counter);
          long hash64=documentFinderPair.getLeft();
          DimensionTuple tuple=dimemsionTupleMap.get(hash64);
          ByteBuffer rawData=tuple.getMetricsBuffForTime(documentFinderPair.getRight());
          Object val=ByteBufferUtils.extractMetricValueFrom(columnName,rawData,schema,metricsOffsetMap);
          counter++;
          return ((Double)val);
        }
        @Override public boolean hasNext(){
          return (counter <= max);
        }
        @Override public DataType getValueType(){
          return spec.getDataType();
        }
        @Override public int currentDocId(){
          return counter;
        }
      }
;
    }
    @Override public DataType getValueType(){
      return spec.getDataType();
    }
  }
;
}
