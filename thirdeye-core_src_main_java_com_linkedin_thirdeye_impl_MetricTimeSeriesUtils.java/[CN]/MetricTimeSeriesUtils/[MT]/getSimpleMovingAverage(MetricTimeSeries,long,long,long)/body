{
  if (movingAverageWindow < 1) {
    throw new IllegalArgumentException("Must provide non-zero positive value for time window");
  }
  double[] sums=new double[original.getSchema().getNumMetrics()];
  for (long time=startTime - movingAverageWindow; time < startTime; time++) {
    for (int i=0; i < original.getSchema().getNumMetrics(); i++) {
      Number value=original.get(time,original.getSchema().getMetricName(i));
      if (value != null) {
        sums[i]+=value.doubleValue();
      }
    }
  }
  MetricType[] metricTypes=new MetricType[original.getSchema().getNumMetrics()];
  Arrays.fill(metricTypes,MetricType.DOUBLE);
  MetricTimeSeries timeSeries=new MetricTimeSeries(new MetricSchema(original.getSchema().getNames(),Arrays.asList(metricTypes)));
  for (long time=startTime; time <= endTime; time++) {
    for (int i=0; i < original.getSchema().getNumMetrics(); i++) {
      Number baseline=original.get(time - movingAverageWindow,original.getSchema().getMetricName(i));
      if (baseline != null) {
        sums[i]-=baseline.doubleValue();
      }
      Number current=original.get(time,original.getSchema().getMetricName(i));
      if (current != null) {
        sums[i]+=current.doubleValue();
      }
      timeSeries.set(time,original.getSchema().getMetricName(i),sums[i] / movingAverageWindow);
    }
  }
  return timeSeries;
}
