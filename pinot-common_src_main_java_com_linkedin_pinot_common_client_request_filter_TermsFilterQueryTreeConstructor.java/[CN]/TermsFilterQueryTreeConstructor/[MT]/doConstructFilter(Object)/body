{
  final JSONObject json=(JSONObject)obj;
  final Iterator<String> iter=json.keys();
  if (!iter.hasNext()) {
    return null;
  }
  final String field=iter.next();
  final JSONObject jsonObj=json.getJSONObject(field);
  final String[] includes=RequestConverter.getStrings(jsonObj.getJSONArray("values"));
  final String[] excludes=RequestConverter.getStrings(jsonObj.getJSONArray("excludes"));
  if (includes.length > 0) {
    Arrays.sort(includes);
    final List<String> rhs=new ArrayList<String>();
    rhs.add(StringUtils.join(includes,","));
    return new FilterQueryTree(field,rhs,FilterOperator.IN,null);
  }
 else {
    Arrays.sort(excludes);
    final List<String> rhs=new ArrayList<String>();
    rhs.add(StringUtils.join(excludes,","));
    if (excludes.length == 1) {
      return new FilterQueryTree(field,rhs,FilterOperator.NOT,null);
    }
 else {
      return new FilterQueryTree(field,rhs,FilterOperator.NOT_IN,null);
    }
  }
}
