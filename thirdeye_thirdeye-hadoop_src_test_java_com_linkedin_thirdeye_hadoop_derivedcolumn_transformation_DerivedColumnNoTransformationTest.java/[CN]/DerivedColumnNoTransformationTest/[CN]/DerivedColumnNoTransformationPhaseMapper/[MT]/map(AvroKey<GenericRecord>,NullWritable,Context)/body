{
  GenericRecord inputRecord=key.datum();
  GenericRecord outputRecord=new Record(outputSchema);
  for (  String dimension : dimensionsNames) {
    String dimensionName=dimension;
    String dimensionValue=ThirdeyeAvroUtils.getDimensionFromRecord(inputRecord,dimension);
    String whitelistDimensionValue=dimensionValue;
    if (whitelist != null) {
      Set<String> whitelistDimensions=whitelist.get(dimensionName);
      if (CollectionUtils.isNotEmpty(whitelistDimensions)) {
        if (!whitelistDimensions.contains(dimensionValue)) {
          whitelistDimensionValue=ThirdEyeConstants.OTHER;
        }
      }
    }
    outputRecord.put(dimensionName,whitelistDimensionValue);
    if (topKDimensionsMap.containsKey(dimensionName)) {
      Set<String> topKDimensionValues=topKDimensionsMap.get(dimensionName);
      if (CollectionUtils.isNotEmpty(topKDimensionValues)) {
        String topkDimensionName=dimensionName + ThirdEyeConstants.TOPK_DIMENSION_SUFFIX;
        String topkDimensionValue=dimensionValue;
        if (!topKDimensionValues.contains(dimensionValue) && (whitelist == null || whitelist.get(dimensionName) == null || !whitelist.get(dimensionName).contains(dimensionValue))) {
          topkDimensionValue=ThirdEyeConstants.OTHER;
        }
        outputRecord.put(topkDimensionName,topkDimensionValue);
      }
    }
  }
  for (int i=0; i < metricNames.size(); i++) {
    String metricName=metricNames.get(i);
    MetricType metricType=metricTypes.get(i);
    outputRecord.put(metricName,ThirdeyeAvroUtils.getMetricFromRecord(inputRecord,metricName,metricType));
  }
  outputRecord.put(timeColumnName,ThirdeyeAvroUtils.getMetricFromRecord(inputRecord,timeColumnName));
  AvroKey<GenericRecord> outputKey=new AvroKey<GenericRecord>(outputRecord);
  context.write(outputKey,NullWritable.get());
}
