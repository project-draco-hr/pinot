{
  final StarTree starTree=starTreeManager.getStarTree(collection);
  if (starTree == null) {
    throw new IllegalArgumentException("No collection " + collection);
  }
  StarTreeQueryImpl.Builder queryBuilder=new StarTreeQueryImpl.Builder();
  for (  String dimensionName : starTree.getConfig().getDimensionNames()) {
    String dimensionValue=uriInfo.getQueryParameters().getFirst(dimensionName);
    if (dimensionValue == null) {
      dimensionValue=StarTreeConstants.STAR;
    }
    queryBuilder.setDimensionValue(dimensionName,dimensionValue);
  }
  String betweenClause=uriInfo.getQueryParameters().getFirst(ThirdEyeApplication.BETWEEN);
  if (betweenClause != null) {
    String[] tokens=betweenClause.split(ThirdEyeApplication.TIME_SEPARATOR);
    if (tokens.length != 2) {
      throw new IllegalArgumentException("BETWEEN must be specified as start,end");
    }
    queryBuilder.setTimeRange(Long.valueOf(tokens[0]),Long.valueOf(tokens[1]));
  }
  String inClause=uriInfo.getQueryParameters().getFirst(ThirdEyeApplication.IN);
  if (inClause != null) {
    String[] tokens=inClause.split(ThirdEyeApplication.TIME_SEPARATOR);
    Set<Long> inSet=new HashSet<Long>();
    for (    String token : tokens) {
      inSet.add(Long.valueOf(token));
    }
    queryBuilder.setTimeBuckets(inSet);
  }
  List<StarTreeQuery> queries=StarTreeUtils.expandQueries(starTree,queryBuilder.build());
  Set<Future<StarTreeRecord>> results=new HashSet<Future<StarTreeRecord>>();
  for (  final StarTreeQuery query : queries) {
    results.add(executorService.submit(new Callable<StarTreeRecord>(){
      @Override public StarTreeRecord call() throws Exception {
        return starTree.search(query);
      }
    }
));
  }
  List<Result> metricsResults=new ArrayList<Result>();
  for (  Future<StarTreeRecord> result : results) {
    try {
      Result metricsResult=new Result();
      metricsResult.setDimensionValues(result.get().getDimensionValues());
      metricsResult.setMetricValues(result.get().getMetricValues());
      metricsResults.add(metricsResult);
    }
 catch (    Exception e) {
      throw new IllegalStateException(e);
    }
  }
  return metricsResults;
}
