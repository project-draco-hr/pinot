{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetSelectionColumns()).compareTo(other.isSetSelectionColumns());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSelectionColumns()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.selectionColumns,other.selectionColumns);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSelectionSortSequence()).compareTo(other.isSetSelectionSortSequence());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSelectionSortSequence()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.selectionSortSequence,other.selectionSortSequence);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetOffset()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.offset,other.offset);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSize()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.size,other.size);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
