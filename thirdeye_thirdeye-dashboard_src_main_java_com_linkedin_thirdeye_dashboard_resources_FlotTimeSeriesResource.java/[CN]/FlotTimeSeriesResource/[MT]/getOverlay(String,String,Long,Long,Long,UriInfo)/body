{
  DateTime baselineRangeStart=new DateTime(baselineMillis - windowMillis);
  DateTime baselineRangeEnd=new DateTime(baselineMillis);
  DateTime currentRangeStart=new DateTime(currentMillis - windowMillis);
  DateTime currentRangeEnd=new DateTime(currentMillis);
  Multimap<String,String> dimensionValues=UriUtils.extractDimensionValues(uriInfo);
  CollectionSchema schema=dataCache.getCollectionSchema(collection);
  Map<String,Multimap<String,String>> reverseDimensionGroups=null;
  DimensionGroupSpec dimensionGroupSpec=configCache.getDimensionGroupSpec(collection);
  if (dimensionGroupSpec != null) {
    reverseDimensionGroups=dimensionGroupSpec.getReverseMapping();
  }
  Multimap<String,String> expandedDimensionValues=ThirdEyeRequestUtils.expandDimensionGroups(dimensionValues,reverseDimensionGroups);
  ThirdEyeRequest baselineSeriesReq=new ThirdEyeRequestBuilder().setCollection(collection).setMetricFunction(metricFunction).setStartTime(baselineRangeStart).setEndTime(baselineRangeEnd).setDimensionValues(expandedDimensionValues).build();
  ThirdEyeRequest currentSeriesReq=new ThirdEyeRequestBuilder().setCollection(collection).setMetricFunction(metricFunction).setStartTime(currentRangeStart).setEndTime(currentRangeEnd).setDimensionValues(expandedDimensionValues).build();
  Future<QueryResult> baselineResult=queryCache.getQueryResultAsync(baselineSeriesReq);
  Future<QueryResult> currentResult=queryCache.getQueryResultAsync(currentSeriesReq);
  List<AnomalyTableRow> anomalies=null;
  if (displayAnomalies) {
    anomalies=AnomalyTable.selectRows(anomalyDatabase,collection,null,null,null,null,null,false,null,new TimeRange(currentMillis - windowMillis,currentMillis));
  }
  List<FlotTimeSeries> baselineSeries=FlotTimeSeries.fromQueryResult(schema,objectMapper,baselineResult.get().checkEmpty(),BASELINE_LABEL_PREFIX);
  QueryResult currentQueryResult=currentResult.get().checkEmpty();
  List<FlotTimeSeries> currentSeries=FlotTimeSeries.fromQueryResult(schema,objectMapper,currentQueryResult);
  List<FlotTimeSeries> anomalySeries;
  if (displayAnomalies) {
    anomalySeries=FlotTimeSeries.anomaliesFromQueryResult(schema,objectMapper,currentQueryResult,ANOMALY_LABEL_PREFIX,anomalies);
  }
 else {
    anomalySeries=new ArrayList<>(0);
  }
  long offsetMillis=currentMillis - baselineMillis;
  for (  FlotTimeSeries series : baselineSeries) {
    for (    Number[] point : series.getData()) {
      point[0]=point[0].longValue() + offsetMillis;
    }
  }
  List<FlotTimeSeries> combinedSeries=new ArrayList<>(baselineSeries.size() + currentSeries.size() + anomalySeries.size());
  combinedSeries.addAll(currentSeries);
  combinedSeries.addAll(baselineSeries);
  combinedSeries.addAll(anomalySeries);
  return combinedSeries;
}
