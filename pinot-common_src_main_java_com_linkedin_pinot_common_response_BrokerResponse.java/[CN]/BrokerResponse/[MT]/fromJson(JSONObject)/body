{
  BrokerResponse brokerResponse=new BrokerResponse();
  brokerResponse.setTotalDocs(retJsonObject.getLong("totalDocs"));
  brokerResponse.setTimeUsedMs(retJsonObject.getLong("timeUsedMs"));
  brokerResponse.setNumDocsScanned(retJsonObject.getLong("numDocsScanned"));
  if (retJsonObject.has("aggregationResults")) {
    JSONArray aggregationResults=retJsonObject.getJSONArray("aggregationResults");
    if (aggregationResults != null && aggregationResults.length() > 0) {
      List<JSONObject> aggregationResultJSONObjects=new ArrayList<JSONObject>();
      for (int i=0; i < aggregationResults.length(); ++i) {
        aggregationResultJSONObjects.add(aggregationResults.getJSONObject(i));
      }
      brokerResponse.setAggregationResults(aggregationResultJSONObjects);
    }
  }
  if (retJsonObject.has("selectionResults")) {
    JSONObject selectionResults=retJsonObject.getJSONObject("selectionResults");
    brokerResponse.setSelectionResults(selectionResults);
  }
  if (retJsonObject.has("segmentStatistics")) {
    JSONArray segmentStatistics=retJsonObject.getJSONArray("segmentStatistics");
    if (segmentStatistics != null && segmentStatistics.length() > 0) {
      List<ResponseStatistics> segmentStatisticObjects=new ArrayList<ResponseStatistics>();
      for (int i=0; i < segmentStatistics.length(); ++i) {
        segmentStatisticObjects.add((ResponseStatistics)segmentStatistics.get(i));
      }
      brokerResponse.setSegmentStatistics(segmentStatisticObjects);
    }
  }
  if (retJsonObject.has("exceptions")) {
    JSONArray exceptions=retJsonObject.getJSONArray("exceptions");
    if (exceptions != null && exceptions.length() > 0) {
      List<ProcessingException> exceptionsList=new ArrayList<ProcessingException>();
      for (int i=0; i < exceptions.length(); ++i) {
        ProcessingException processingException=new ProcessingException();
        String exceptionString=exceptions.getString(i);
        int errorCode=Integer.parseInt(exceptionString.split("errorCode:")[1].split(", message:")[0]);
        String errorMsg=exceptionString.split(", message:")[1];
        errorMsg=errorMsg.substring(0,errorMsg.length() - 1);
        processingException.setErrorCode(errorCode);
        processingException.setMessage(errorMsg);
        exceptionsList.add(processingException);
      }
      brokerResponse.setExceptions(exceptionsList);
    }
  }
  if (retJsonObject.has("traceInfo")) {
    JSONObject traceInfoObject=retJsonObject.getJSONObject("traceInfo");
    Map<String,String> traceInfoMap=new LinkedHashMap<String,String>();
    Iterator iterator=traceInfoObject.keys();
    while (iterator.hasNext()) {
      String key=(String)iterator.next();
      String value=traceInfoObject.getString(key);
      traceInfoMap.put(key,value);
    }
    brokerResponse.setTraceInfo(traceInfoMap);
  }
  return brokerResponse;
}
