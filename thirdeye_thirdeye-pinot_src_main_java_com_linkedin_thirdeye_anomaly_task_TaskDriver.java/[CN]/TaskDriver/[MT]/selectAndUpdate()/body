{
  LOG.info(Thread.currentThread().getId() + " : Starting selectAndUpdate {}",Thread.currentThread().getId());
  AnomalyTaskSpec acquiredTask=null;
  LOG.info(Thread.currentThread().getId() + " : Trying to find a task to execute");
  do {
    List<AnomalyTaskSpec> anomalyTasks=new ArrayList<>();
    anomalyTasks=anomalyTaskDAO.findByStatusOrderByCreateTimeAscending(TaskStatus.WAITING);
    if (anomalyTasks.size() > 0)     LOG.info(Thread.currentThread().getId() + " : Found {} tasks in waiting state",anomalyTasks.size());
    for (    AnomalyTaskSpec anomalyTaskSpec : anomalyTasks) {
      LOG.info(Thread.currentThread().getId() + " : Trying to acquire task : {}",anomalyTaskSpec.getId());
      boolean success=false;
      try {
        success=anomalyTaskDAO.updateStatusAndWorkerId(workerId,anomalyTaskSpec.getId(),TaskStatus.WAITING,TaskStatus.RUNNING);
        LOG.info(Thread.currentThread().getId() + " : Task acquired success: {}",success);
      }
 catch (      OptimisticLockException|RollbackException|StaleObjectStateException e) {
        LOG.warn("Optimistic lock exception in acquiring task by threadId {} and workerId {}",Thread.currentThread().getId(),workerId);
      }
      if (success) {
        acquiredTask=anomalyTaskSpec;
        break;
      }
    }
  }
 while (acquiredTask == null);
  LOG.info(Thread.currentThread().getId() + " : Acquired task ======" + acquiredTask);
  return acquiredTask;
}
