{
  List<Callable<Void>> callables=new ArrayList<>();
  for (int i=0; i < MAX_PARALLEL_TASK; i++) {
    Callable<Void> callable=new Callable<Void>(){
      @Override public Void call() throws Exception {
        while (!shutdown) {
          LOG.info(Thread.currentThread().getId() + " : Finding next task to execute for threadId:{}",Thread.currentThread().getId());
          try {
            AnomalyTaskSpec anomalyTaskSpec=selectAndUpdate();
            LOG.info(Thread.currentThread().getId() + " : Executing task: {} {}",anomalyTaskSpec.getId(),anomalyTaskSpec.getTaskInfo());
            TaskType taskType=anomalyTaskSpec.getTaskType();
            TaskRunner taskRunner=TaskRunnerFactory.getTaskRunnerFromTaskType(taskType);
            TaskInfo taskInfo=TaskInfoFactory.getTaskInfoFromTaskType(taskType,anomalyTaskSpec.getTaskInfo());
            LOG.info(Thread.currentThread().getId() + " : Task Info {}",taskInfo);
            List<TaskResult> taskResults=taskRunner.execute(taskInfo,taskContext);
            LOG.info(Thread.currentThread().getId() + " : DONE Executing task: {}",anomalyTaskSpec.getId());
            updateStatusAndTaskEndime(anomalyTaskSpec.getId(),TaskStatus.RUNNING,TaskStatus.COMPLETED);
          }
 catch (          Exception e) {
            LOG.error("Exception in electing and executing task",e);
          }
        }
        return null;
      }
    }
;
    callables.add(callable);
  }
  for (  Callable<Void> callable : callables) {
    taskExecutorService.submit(callable);
  }
  LOG.info(Thread.currentThread().getId() + " : Started task driver");
}
