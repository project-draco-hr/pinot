{
  if (!column.equals("variant")) {
    return;
  }
  final int cardinality=m.getCardinality();
  final int[] offsets=new int[cardinality + 1];
  final DataInputStream dis=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
  for (int i=0; i <= cardinality; ++i) {
    offsets[i]=dis.readInt();
  }
  dis.close();
  final int lastOffset=offsets[cardinality];
  System.out.println(column + " : " + cardinality+ " : "+ file.length()+ " : "+ lastOffset);
  System.out.println(column + ":" + Arrays.toString(offsets));
  System.out.println("************ ");
  final ImmutableRoaringBitmap[] invertedIndexes=new ImmutableRoaringBitmap[cardinality];
  final RandomAccessFile rndFile=new RandomAccessFile(file,"r");
  final MappedByteBuffer buf=rndFile.getChannel().map(MapMode.READ_ONLY,0,lastOffset);
  for (int i=0; i < cardinality; i++) {
    buf.position(offsets[i]);
    final ByteBuffer bb=buf.slice();
    final long offsetLimit=i < 199 ? offsets[i + 1] : lastOffset;
    bb.limit((int)(offsetLimit - offsets[i]));
    final ImmutableRoaringBitmap irb=new ImmutableRoaringBitmap(bb);
    invertedIndexes[i]=irb;
  }
  for (int i=0; i < invertedIndexes.length; i++) {
    System.out.println(i + " : " + Arrays.toString(invertedIndexes[i].toArray()));
  }
}
