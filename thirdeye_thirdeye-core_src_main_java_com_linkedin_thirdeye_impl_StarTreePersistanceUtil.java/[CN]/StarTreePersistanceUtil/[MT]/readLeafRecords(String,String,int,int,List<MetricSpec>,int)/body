{
  Map<int[],Map<Long,Number[]>> ret=new HashMap<int[],Map<Long,Number[]>>();
  File file=new File(dataDir,nodeId + StarTreeConstants.BUFFER_FILE_SUFFIX);
  FileChannel fileChannel=new RandomAccessFile(file,"rw").getChannel();
  ByteBuffer buffer=fileChannel.map(FileChannel.MapMode.READ_WRITE,0,file.length());
  buffer.order(ByteOrder.BIG_ENDIAN);
  while (buffer.hasRemaining()) {
    int[] dimArray=new int[numDimensions];
    for (int i=0; i < numDimensions; i++) {
      dimArray[i]=buffer.getInt();
    }
    HashMap<Long,Number[]> timeSeries=new HashMap<Long,Number[]>();
    ret.put(dimArray,timeSeries);
    if (numTimeBuckets > 0) {
      for (int i=0; i < numTimeBuckets; i++) {
        long timeWindow=buffer.getLong();
        Number[] metricArray=new Number[numMetrics];
        for (int j=0; j < numMetrics; j++) {
          metricArray[j]=NumberUtils.readFromBuffer(buffer,metricSpecs.get(j).getType());
        }
        timeSeries.put(timeWindow,metricArray);
      }
    }
  }
  fileChannel.close();
  return ret;
}
