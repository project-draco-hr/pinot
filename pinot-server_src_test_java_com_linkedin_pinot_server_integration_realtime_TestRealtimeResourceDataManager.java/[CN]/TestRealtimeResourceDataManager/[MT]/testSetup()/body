{
  final RealtimeSegmentDataManager manager=new RealtimeSegmentDataManager(realtimeSegmentZKMetadata,realtimeDataResourceZKMetadata,instanceZKMetadata,null,resourceDataManagerConfig.getDataDir(),ReadMode.valueOf(resourceDataManagerConfig.getReadMode()));
  final long start=System.currentTimeMillis();
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      if (System.currentTimeMillis() - start >= (SEGMENT_CONSUMING_TIME)) {
        keepOnRunning=false;
      }
    }
  }
,1000,1000 * 60 * 1);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      long sum=0;
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("count");
        BlockValSet valSet=mDs.nextBlock().getBlockValueSet();
        BlockSingleValIterator valIt=(BlockSingleValIterator)valSet.iterator();
        int val=valIt.nextIntVal();
        while (val != Constants.EOF) {
          val=valIt.nextIntVal();
          sum+=val;
        }
      }
 catch (      Exception e) {
        LOG.info("count column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      LOG.info("time to scan metric col count : " + (stop - start) + " sum : "+ sum);
    }
  }
,20000,1000 * 5);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      long sum=0;
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("viewerId");
        BlockValSet valSet=mDs.nextBlock().getBlockValueSet();
        BlockSingleValIterator valIt=(BlockSingleValIterator)valSet.iterator();
        int val=valIt.nextIntVal();
        while (val != Constants.EOF) {
          val=valIt.nextIntVal();
          sum+=val;
        }
      }
 catch (      Exception e) {
        LOG.info("viewerId column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      LOG.info("time to scan SV dimension col viewerId : " + (stop - start) + " sum : "+ sum);
    }
  }
,20000,1000 * 5);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      long sum=0;
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("daysSinceEpoch");
        BlockValSet valSet=mDs.nextBlock().getBlockValueSet();
        BlockSingleValIterator valIt=(BlockSingleValIterator)valSet.iterator();
        int val=valIt.nextIntVal();
        while (val != Constants.EOF) {
          val=valIt.nextIntVal();
          sum+=val;
        }
      }
 catch (      Exception e) {
        LOG.info("daysSinceEpoch column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      LOG.info("time to scan SV time col daysSinceEpoch : " + (stop - start) + " sum : "+ sum);
    }
  }
,20000,1000 * 5);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      long sum=0;
      float sumOfLengths=0F;
      float counter=0F;
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("viewerCompanies");
        Block b=mDs.nextBlock();
        BlockValSet valSet=b.getBlockValueSet();
        BlockMultiValIterator valIt=(BlockMultiValIterator)valSet.iterator();
        BlockMetadata m=b.getMetadata();
        int maxVams=m.maxNumberOfMultiValues();
        while (valIt.hasNext()) {
          int[] vals=new int[maxVams];
          int len=valIt.nextIntVal(vals);
          for (int i=0; i < len; i++) {
            sum+=vals[i];
          }
          sumOfLengths+=len;
          counter++;
        }
      }
 catch (      Exception e) {
        LOG.info("daysSinceEpoch column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      LOG.info("time to scan MV col viewerCompanies : " + (stop - start) + " sum : "+ sum+ " average len : "+ (sumOfLengths / counter));
    }
  }
,20000,1000 * 5);
  while (keepOnRunning) {
  }
}
