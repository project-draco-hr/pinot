{
  final RealtimeSegmentDataManager manager=new RealtimeSegmentDataManager(realtimeSegmentZKMetadata,realtimeDataResourceZKMetadata,instanceZKMetadata,null,resourceDataManagerConfig.getDataDir(),ReadMode.valueOf(resourceDataManagerConfig.getReadMode()));
  final long start=System.currentTimeMillis();
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      if (System.currentTimeMillis() - start >= (1000 * 60 * 60)) {
        keepOnRunning=false;
      }
    }
  }
,1000,1000 * 60 * 10);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("count");
        BlockValSet valSet=mDs.nextBlock().getBlockValueSet();
        BlockSingleValIterator valIt=(BlockSingleValIterator)valSet.iterator();
        int val=valIt.nextIntVal();
        while (val != Constants.EOF) {
          val=valIt.nextIntVal();
        }
      }
 catch (      Exception e) {
        System.out.println("count column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      System.out.println("time to scan metric col count : " + (stop - start));
    }
  }
,20000,1000 * 5);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("viewerId");
        BlockValSet valSet=mDs.nextBlock().getBlockValueSet();
        BlockSingleValIterator valIt=(BlockSingleValIterator)valSet.iterator();
        int val=valIt.nextIntVal();
        while (val != Constants.EOF) {
          val=valIt.nextIntVal();
        }
      }
 catch (      Exception e) {
        System.out.println("viewerId column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      System.out.println("time to scan SV dimension col viewerId : " + (stop - start));
    }
  }
,20000,1000 * 5);
  TimerService.timer.scheduleAtFixedRate(new TimerTask(){
    @Override public void run(){
      long start=System.currentTimeMillis();
      try {
        RealtimeSegment segment=(RealtimeSegment)manager.getSegment();
        RealtimeColumnDataSource mDs=(RealtimeColumnDataSource)segment.getDataSource("daysSinceEpoch");
        BlockValSet valSet=mDs.nextBlock().getBlockValueSet();
        BlockSingleValIterator valIt=(BlockSingleValIterator)valSet.iterator();
        int val=valIt.nextIntVal();
        while (val != Constants.EOF) {
          val=valIt.nextIntVal();
        }
      }
 catch (      Exception e) {
        System.out.println("daysSinceEpoch column exception");
        e.printStackTrace();
      }
      long stop=System.currentTimeMillis();
      System.out.println("time to scan SV time col daysSinceEpoch : " + (stop - start));
    }
  }
,20000,1000 * 5);
  while (keepOnRunning) {
  }
}
