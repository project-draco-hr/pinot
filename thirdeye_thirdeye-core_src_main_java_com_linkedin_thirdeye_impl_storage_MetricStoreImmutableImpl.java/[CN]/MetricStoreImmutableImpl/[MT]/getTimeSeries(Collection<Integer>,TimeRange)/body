{
  MetricTimeSeries timeSeries=new MetricTimeSeries(metricSchema);
  Set<Long> times=getTimes(timeRange);
  for (  Map.Entry<TimeRange,List<ByteBuffer>> entry : buffers.entrySet()) {
    TimeRange bufferTimeRange=entry.getKey();
    int rowSize=bufferTimeRange.totalBuckets() * (Long.SIZE / 8 + metricSchema.getRowSizeInBytes());
    for (    ByteBuffer originalBuffer : entry.getValue()) {
      ByteBuffer buffer=originalBuffer.duplicate();
      if (bufferTimeRange.getStart() >= 0 && (timeRange == null || !bufferTimeRange.isDisjoint(timeRange))) {
        for (        Integer logicalOffset : logicalOffsets) {
          buffer.mark();
          buffer.position(logicalOffset * rowSize);
          for (int i=0; i < bufferTimeRange.totalBuckets(); i++) {
            Long time=buffer.getLong();
            for (            MetricSpec metricSpec : config.getMetrics()) {
              Number value=NumberUtils.readFromBuffer(buffer,metricSpec.getType());
              if (times.contains(time)) {
                timeSeries.increment(time,metricSpec.getName(),value);
              }
            }
          }
        }
      }
    }
  }
  return timeSeries;
}
