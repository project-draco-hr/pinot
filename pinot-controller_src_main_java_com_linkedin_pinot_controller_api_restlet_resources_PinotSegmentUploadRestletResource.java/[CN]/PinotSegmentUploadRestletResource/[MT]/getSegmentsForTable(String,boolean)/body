{
  Representation presentation;
  final JSONArray ret=new JSONArray();
  if (activeOnly) {
    String offlineTableName=TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(tableName);
    List<String> segmentList=_pinotHelixResourceManager.getAllSegmentsForResource(offlineTableName);
    ZkHelixPropertyStore<ZNRecord> propertyStore=_pinotHelixResourceManager.getPropertyStore();
    for (    String segmentName : segmentList) {
      OfflineSegmentZKMetadata offlineSegmentZKMetadata=ZKMetadataProvider.getOfflineSegmentZKMetadata(propertyStore,tableName,segmentName);
      ret.put(offlineSegmentZKMetadata.getDownloadUrl());
    }
  }
 else {
    File tableDir=new File(baseDataDir,tableName);
    if (tableDir.exists()) {
      for (      final File file : tableDir.listFiles()) {
        final String url=_controllerConf.generateVipUrl() + "/segments/" + tableName+ "/"+ file.getName();
        ret.put(url);
      }
    }
 else {
      LOGGER.error("Error: Table {} not found.",tableName);
      setStatus(Status.CLIENT_ERROR_NOT_FOUND);
    }
  }
  presentation=new StringRepresentation(ret.toString());
  return presentation;
}
