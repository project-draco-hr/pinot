{
  final SegmentMetadata metadata=new SegmentMetadataImpl(indexDir);
  final File tableDir=new File(baseDataDir,metadata.getTableName());
  File segmentFile=new File(tableDir,dataFile.getName());
  StorageQuotaChecker.QuotaCheckerResponse quotaResponse=checkStorageQuota(indexDir,metadata);
  if (!quotaResponse.isSegmentWithinQuota) {
    LOGGER.info("Rejecting segment upload for table: {}, segment: {}, reason: {}",metadata.getTableName(),metadata.getName(),quotaResponse.reason);
    setStatus(Status.CLIENT_ERROR_FORBIDDEN);
    StringRepresentation repr=new StringRepresentation("{\"error\" : \"" + quotaResponse.reason + "\"}");
    repr.setMediaType(MediaType.APPLICATION_JSON);
    return repr;
  }
  if (segmentFile.exists()) {
    FileUtils.deleteQuietly(segmentFile);
  }
  FileUtils.moveFile(dataFile,segmentFile);
  PinotResourceManagerResponse response;
  if (!isSegmentTimeValid(metadata)) {
    response=new PinotResourceManagerResponse("Invalid segment start/end time",false);
  }
 else {
    if (downloadUrl == null) {
      downloadUrl=constructDownloadUrl(metadata.getTableName(),dataFile.getName());
    }
    response=_pinotHelixResourceManager.addSegment(metadata,downloadUrl);
  }
  if (response.isSuccessfull()) {
    setStatus(Status.SUCCESS_OK);
  }
 else {
    ControllerRestApplication.getControllerMetrics().addMeteredGlobalValue(ControllerMeter.CONTROLLER_SEGMENT_UPLOAD_ERROR,1L);
    setStatus(Status.SERVER_ERROR_INTERNAL);
  }
  return new StringRepresentation(response.toJSON().toString());
}
