{
  ServerInstance s=new ServerInstance("localhost",8080);
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    f.cancel(false);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    AssertJUnit.assertTrue("Cancelled ?",listener.isCancelled());
    AssertJUnit.assertEquals("Num Runs of listener",1,listener.getNumRuns());
    AssertJUnit.assertTrue("Is Done ? ",listener.isDone());
    AssertJUnit.assertNull("No Reponse :",listener.getMessage());
    AssertJUnit.assertNull("No Error :",listener.getError());
    listener.close();
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    f.cancel(false);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    AssertJUnit.assertTrue("Cancelled ?",listener.isCancelled());
    AssertJUnit.assertEquals("Num Runs of listener",1,listener.getNumRuns());
    AssertJUnit.assertTrue("Is Done ? ",listener.isDone());
    AssertJUnit.assertNull("No Reponse :",listener.getMessage());
    AssertJUnit.assertNull("No Error :",listener.getError());
    listener.close();
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    Exception expectedError=new Exception("error processing");
    f.onError(expectedError);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    AssertJUnit.assertFalse("Cancelled ?",listener.isCancelled());
    AssertJUnit.assertEquals("Num Runs of listener",1,listener.getNumRuns());
    AssertJUnit.assertTrue("Is Done ? ",listener.isDone());
    AssertJUnit.assertNull("No Reponse :",listener.getMessage());
    AssertJUnit.assertEquals("Error",expectedError,listener.getError());
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    Exception expectedError=new Exception("error processing");
    f.onError(expectedError);
    WaitForCompletion w=new WaitForCompletion(listener);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    AssertJUnit.assertFalse("Cancelled ?",listener.isCancelled());
    AssertJUnit.assertEquals("Num Runs of listener",1,listener.getNumRuns());
    AssertJUnit.assertTrue("Is Done ? ",listener.isDone());
    AssertJUnit.assertNull("No Reponse :",listener.getMessage());
    AssertJUnit.assertEquals("Error",expectedError,listener.getError());
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    WaitForCompletion w=new WaitForCompletion(listener);
    String message="dummy Message";
    setResponse(f,message);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    AssertJUnit.assertFalse("Cancelled ?",listener.isCancelled());
    AssertJUnit.assertEquals("Num Runs of listener",1,listener.getNumRuns());
    AssertJUnit.assertTrue("Is Done ? ",listener.isDone());
    AssertJUnit.assertEquals("Response Check:",message,listener.getMessage());
    AssertJUnit.assertNull("No Error :",listener.getError());
    listener.close();
  }
{
    ResponseFuture f=new ResponseFuture(s);
    FutureListener listener=new FutureListener(f);
    String message="dummy Message";
    setResponse(f,message);
    WaitForCompletion w=new WaitForCompletion(listener);
    TestUtils.assertWithBackoff(w,10,1000,2,1,2);
    AssertJUnit.assertFalse("Cancelled ?",listener.isCancelled());
    AssertJUnit.assertEquals("Num Runs of listener",1,listener.getNumRuns());
    AssertJUnit.assertTrue("Is Done ? ",listener.isDone());
    AssertJUnit.assertEquals("Response Check:",message,listener.getMessage());
    AssertJUnit.assertNull("No Error :",listener.getError());
    listener.close();
  }
}
