{
  Operator ret=null;
  if (null == filterQueryTree) {
    return new MatchEntireSegmentOperator(_segment.getSegmentMetadata().getTotalRawDocs());
  }
  final List<FilterQueryTree> childFilters=filterQueryTree.getChildren();
  final boolean isLeaf=(childFilters == null) || childFilters.isEmpty();
  if (!isLeaf) {
    List<Operator> operators=new ArrayList<Operator>();
    for (    final FilterQueryTree query : childFilters) {
      Operator childOperator=constructPhysicalOperator(query);
      operators.add(childOperator);
    }
    final FilterOperator filterType=filterQueryTree.getOperator();
switch (filterType) {
case AND:
      reorder(operators);
    ret=new AndOperator(operators);
  break;
case OR:
reorder(operators);
ret=new OrOperator(operators);
break;
default :
throw new UnsupportedOperationException("Not support filter type - " + filterType + " with children operators");
}
}
 else {
final FilterOperator filterType=filterQueryTree.getOperator();
final String column=filterQueryTree.getColumn();
Predicate predicate=Predicate.newPredicate(filterQueryTree);
DataSource ds;
ds=_segment.getDataSource(column);
DataSourceMetadata dataSourceMetadata=ds.getDataSourceMetadata();
BaseFilterOperator baseFilterOperator;
int startDocId=0;
int endDocId=_segment.getSegmentMetadata().getTotalRawDocs() - 1;
if (dataSourceMetadata.hasInvertedIndex()) {
if (!filterType.equals(FilterOperator.RANGE)) {
if (dataSourceMetadata.isSingleValue() && dataSourceMetadata.isSorted()) {
baseFilterOperator=new SortedInvertedIndexBasedFilterOperator(ds,startDocId,endDocId);
}
 else {
baseFilterOperator=new BitmapBasedFilterOperator(ds,startDocId,endDocId);
}
}
 else {
baseFilterOperator=new ScanBasedFilterOperator(ds,startDocId,endDocId);
}
}
 else {
baseFilterOperator=new ScanBasedFilterOperator(ds,startDocId,endDocId);
}
baseFilterOperator.setPredicate(predicate);
ret=baseFilterOperator;
}
return ret;
}
