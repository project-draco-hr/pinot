{
  try {
    StarTree starTree=getStarTree(collection);
    StarTreeQuery query=new StarTreeQueryImpl.Builder().setDimensionKey(convertToDimensionKey(starTree.getConfig(),dimensionValues)).setTimeRange(new TimeRange(start,end)).build(starTree.getConfig());
    List<StarTreeQuery> queries=expandQueries(collection,starTree,query);
    queries=StarTreeUtils.filterQueries(starTree.getConfig(),queries,getFilter(starTree.getConfig(),query));
    Map<StarTreeQuery,UUID> queryToNodeId=getQueryToNodeId(starTree,queries);
    Map<UUID,HttpHost> nodeIdToHost=getNodeIdToHost(collection,collections.get(collection),queryToNodeId.values());
    Set<Future<HttpResponse>> responses=new HashSet<Future<HttpResponse>>(nodeIdToHost.size());
    for (    Map.Entry<StarTreeQuery,UUID> entry : queryToNodeId.entrySet()) {
      HttpHost host=nodeIdToHost.get(entry.getValue());
      HttpGet req=new HttpGet(getTimeSeriesUri(collection,metricName,starTree.getConfig(),entry.getKey()));
      responses.add(httpAsyncClient.execute(host,req,null));
    }
    List<ThirdEyeTimeSeries> allResults=new ArrayList<ThirdEyeTimeSeries>();
    for (    Future<HttpResponse> entry : responses) {
      HttpResponse response=entry.get(clientConfig.getRequestTimeoutMillis(),TimeUnit.MILLISECONDS);
      if (response.getStatusLine().getStatusCode() != 200) {
        throw new IOException(response.getStatusLine().getStatusCode() + ": " + response.getStatusLine().getReasonPhrase());
      }
      List<ThirdEyeTimeSeries> results=OBJECT_MAPPER.readValue(response.getEntity().getContent(),TIME_SERIES_LIST_REF);
      EntityUtils.consume(response.getEntity());
      allResults.addAll(results);
    }
    return allResults;
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IOException(e);
  }
}
