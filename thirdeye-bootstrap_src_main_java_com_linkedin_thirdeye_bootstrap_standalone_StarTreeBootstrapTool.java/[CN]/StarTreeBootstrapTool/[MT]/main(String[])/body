{
  if (args.length < 8) {
    throw new IllegalArgumentException("usage: collection startTime endTime config.json fileType keepMetricValues outputDir inputFile ...");
  }
  String collection=args[0];
  String startTime=args[1];
  String endTime=args[2];
  String configJson=args[3];
  String fileType=args[4];
  String keepMetricValues=args[5];
  String outputDir=args[6];
  String[] inputFiles=Arrays.copyOfRange(args,7,args.length);
  StarTreeConfig config=StarTreeConfig.fromJson(OBJECT_MAPPER.readTree(new File(configJson)));
  List<Iterable<StarTreeRecord>> recordStreams=new ArrayList<Iterable<StarTreeRecord>>();
  if ("avro".equals(fileType)) {
    for (    String inputFile : inputFiles) {
      recordStreams.add(new StarTreeRecordStreamAvroFileImpl(new File(inputFile),config.getDimensionNames(),config.getMetricNames(),config.getTimeColumnName()));
    }
  }
 else   if ("tsv".equals(fileType)) {
    for (    String inputFile : inputFiles) {
      recordStreams.add(new StarTreeRecordStreamTextStreamImpl(new FileInputStream(inputFile),config.getDimensionNames(),config.getMetricNames(),"\t"));
    }
  }
 else {
    throw new IllegalArgumentException("Invalid file type " + fileType);
  }
  new StarTreeBootstrapTool(collection,Long.valueOf(startTime),Long.valueOf(endTime),Boolean.valueOf(keepMetricValues),config,recordStreams,new File(outputDir)).run();
}
