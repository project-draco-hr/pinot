{
  List<StarTreeRecord> records=new ArrayList<StarTreeRecord>();
  Map<Map<String,String>,Set<Long>> dimensionCombinations=new HashMap<Map<String,String>,Set<Long>>();
  Map<String,List<StarTreeRecord>> groupedRecords=new HashMap<String,List<StarTreeRecord>>();
  for (  StarTreeRecord record : recordStore) {
    Set<Long> times=dimensionCombinations.get(record.getDimensionValues());
    if (times == null) {
      times=new HashSet<Long>();
      dimensionCombinations.put(record.getDimensionValues(),times);
    }
    times.add(record.getTime());
    List<StarTreeRecord> group=groupedRecords.get(record.getKey());
    if (group == null) {
      group=new ArrayList<StarTreeRecord>();
      groupedRecords.put(record.getKey(),group);
    }
    group.add(record);
  }
  for (long timeBucket=startTime; timeBucket <= endTime; timeBucket++) {
    StarTreeRecordImpl.Builder builder=new StarTreeRecordImpl.Builder();
    for (    String dimensionName : config.getDimensionNames()) {
      builder.setDimensionValue(dimensionName,StarTreeConstants.OTHER);
    }
    for (    String metricName : config.getMetricNames()) {
      builder.setMetricValue(metricName,0L);
    }
    builder.setTime(timeBucket);
    StarTreeRecord other=builder.build();
    if (!records.contains(other)) {
      records.add(other);
    }
  }
  for (  Map.Entry<Map<String,String>,Set<Long>> entry : dimensionCombinations.entrySet()) {
    Map<String,String> dimensionValues=entry.getKey();
    Set<Long> times=entry.getValue();
    for (long i=startTime; i <= endTime; i++) {
      if (!times.contains(i)) {
        StarTreeRecordImpl.Builder builder=new StarTreeRecordImpl.Builder();
        builder.setDimensionValues(dimensionValues);
        for (        String metricName : config.getMetricNames()) {
          builder.setMetricValue(metricName,0L);
        }
        builder.setTime(i);
        records.add(builder.build());
      }
    }
  }
  for (  List<StarTreeRecord> group : groupedRecords.values()) {
    records.add(StarTreeUtils.merge(group));
  }
  int currentId=StarTreeConstants.FIRST_VALUE;
  final Map<String,Map<String,Integer>> forwardIndex=new HashMap<String,Map<String,Integer>>();
  for (  StarTreeRecord record : records) {
    for (    String dimensionName : config.getDimensionNames()) {
      Map<String,Integer> valueIds=forwardIndex.get(dimensionName);
      if (valueIds == null) {
        valueIds=new HashMap<String,Integer>();
        forwardIndex.put(dimensionName,valueIds);
      }
      String dimensionValue=record.getDimensionValues().get(dimensionName);
      Integer valueId=valueIds.get(dimensionValue);
      if (valueId == null) {
        valueId=currentId++;
        valueIds.put(dimensionValue,valueId);
      }
      valueIds.put(StarTreeConstants.STAR,StarTreeConstants.STAR_VALUE);
      valueIds.put(StarTreeConstants.OTHER,StarTreeConstants.OTHER_VALUE);
    }
  }
  final int numBuckets=(int)(endTime - startTime + 1);
  Collections.sort(records,new Comparator<StarTreeRecord>(){
    @Override public int compare(    StarTreeRecord o1,    StarTreeRecord o2){
      int b1=(int)(o1.getTime() % numBuckets);
      int b2=(int)(o2.getTime() % numBuckets);
      if (b1 != b2) {
        return b1 - b2;
      }
      for (      String dimensionName : config.getDimensionNames()) {
        String v1=o1.getDimensionValues().get(dimensionName);
        String v2=o2.getDimensionValues().get(dimensionName);
        int i1=forwardIndex.get(dimensionName).get(v1);
        int i2=forwardIndex.get(dimensionName).get(v2);
        if (i1 != i2) {
          return i1 - i2;
        }
      }
      if (!o1.getTime().equals(o2.getTime())) {
        return (int)(o1.getTime() - o2.getTime());
      }
      return 0;
    }
  }
);
  int entrySize=StarTreeRecordStoreFixedCircularBufferImpl.getEntrySize(config.getDimensionNames(),config.getMetricNames());
  int bufferSize=records.size() * entrySize;
  ByteBuffer buffer=ByteBuffer.allocate(bufferSize);
  for (  StarTreeRecord record : records) {
    StarTreeRecordStoreFixedCircularBufferImpl.writeRecord(buffer,record,config.getDimensionNames(),config.getMetricNames(),forwardIndex,numBuckets);
  }
  buffer.flip();
  File file=new File(rootDir,nodeId.toString() + StarTreeRecordStoreFactoryFixedCircularBufferImpl.BUFFER_SUFFIX);
  FileChannel fileChannel=new FileOutputStream(file).getChannel();
  fileChannel.write(buffer);
  fileChannel.force(true);
  fileChannel.close();
  LOG.info("Wrote {}",file);
  file=new File(rootDir,nodeId.toString() + StarTreeRecordStoreFactoryFixedCircularBufferImpl.INDEX_SUFFIX);
  OBJECT_MAPPER.writerWithDefaultPrettyPrinter().writeValue(file,forwardIndex);
  LOG.info("Wrote {}",file);
}
