{
  this.dataSource=dataSource;
  entityMappingHolder=new EntityMappingHolder();
  try (Connection conn=dataSource.getConnection()){
    entityMappingHolder.register(conn,GenericJsonEntity.class,convertCamelCaseToUnderscore(GenericJsonEntity.class.getSimpleName()));
    entityMappingHolder.register(conn,AnomalyFeedbackIndex.class,convertCamelCaseToUnderscore(AnomalyFeedbackIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,AnomalyFunctionIndex.class,convertCamelCaseToUnderscore(AnomalyFunctionIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,JobIndex.class,convertCamelCaseToUnderscore(JobIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,MergedAnomalyResultIndex.class,convertCamelCaseToUnderscore(MergedAnomalyResultIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,RawAnomalyResultIndex.class,convertCamelCaseToUnderscore(RawAnomalyResultIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,TaskIndex.class,convertCamelCaseToUnderscore(TaskIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,EmailConfigurationIndex.class,convertCamelCaseToUnderscore(EmailConfigurationIndex.class.getSimpleName()));
    entityMappingHolder.register(conn,WebappConfigIndex.class,convertCamelCaseToUnderscore(WebappConfigIndex.class.getSimpleName()));
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  builder=new SqlQueryBuilder(entityMappingHolder);
  genericResultSetMapper=new GenericResultSetMapper(entityMappingHolder);
}
