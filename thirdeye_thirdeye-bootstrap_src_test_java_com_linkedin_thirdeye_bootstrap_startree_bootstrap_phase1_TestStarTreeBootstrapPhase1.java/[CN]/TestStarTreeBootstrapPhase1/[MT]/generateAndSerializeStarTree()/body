{
  List<Pair<BytesWritable,BytesWritable>> inputRecords=new ArrayList<Pair<BytesWritable,BytesWritable>>();
  String[] combination1={"A1","B1","C1"};
  DimensionKey dimKey=new DimensionKey(combination1);
  MetricTimeSeries timeSeries=TestStarTreeBootstrapPhase1.TestHelper.generateRandomMetricTimeSeries(starTreeBootstrapConfig);
  Pair<BytesWritable,BytesWritable> record=new Pair<BytesWritable,BytesWritable>(new BytesWritable(dimKey.toBytes()),new BytesWritable(timeSeries.toBytes()));
  inputRecords.add(record);
  String[] combination2={"A1","B1","C2"};
  dimKey=new DimensionKey(combination2);
  timeSeries=TestStarTreeBootstrapPhase1.TestHelper.generateRandomMetricTimeSeries(starTreeBootstrapConfig);
  record=new Pair<BytesWritable,BytesWritable>(new BytesWritable(dimKey.toBytes()),new BytesWritable(timeSeries.toBytes()));
  inputRecords.add(record);
  String[] combination3={"A1","B1","C3"};
  dimKey=new DimensionKey(combination3);
  timeSeries=TestStarTreeBootstrapPhase1.TestHelper.generateRandomMetricTimeSeries(starTreeBootstrapConfig);
  record=new Pair<BytesWritable,BytesWritable>(new BytesWritable(dimKey.toBytes()),new BytesWritable(timeSeries.toBytes()));
  inputRecords.add(record);
  String[] combination4={"A2","B1","C3"};
  dimKey=new DimensionKey(combination4);
  timeSeries=TestStarTreeBootstrapPhase1.TestHelper.generateRandomMetricTimeSeries(starTreeBootstrapConfig);
  record=new Pair<BytesWritable,BytesWritable>(new BytesWritable(dimKey.toBytes()),new BytesWritable(timeSeries.toBytes()));
  inputRecords.add(record);
  MapDriver<BytesWritable,BytesWritable,BytesWritable,BytesWritable> mapDriver;
  StarTreeGenerationMapper mapper=new StarTreeGenerationMapper();
  mapDriver=MapDriver.newMapDriver(mapper);
  Configuration config=mapDriver.getConfiguration();
  config.set(StarTreeGenerationConstants.STAR_TREE_GEN_CONFIG_PATH.toString(),ClassLoader.getSystemResource(CONF_FILE).toString());
  config.set(StarTreeGenerationConstants.STAR_TREE_GEN_OUTPUT_PATH.toString(),thirdEyeRoot + File.separator + "startree_generation");
  mapDriver.addAll(inputRecords);
  mapDriver.run();
}
