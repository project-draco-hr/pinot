{
  BootstrapMapper mapper=new BootstrapMapper();
  mapDriver=MapDriver.newMapDriver(mapper);
  Configuration config=mapDriver.getConfiguration();
  config.set("io.serializations","org.apache.hadoop.io.serializer.JavaSerialization," + "org.apache.hadoop.io.serializer.WritableSerialization");
  config.set(StarTreeBootstrapPhaseOneConstants.STAR_TREE_BOOTSTRAP_CONFIG_PATH.toString(),ClassLoader.getSystemResource(CONF_FILE).toString());
  Schema schema=new Schema.Parser().parse(ClassLoader.getSystemResourceAsStream(SCHEMA_FILE));
  setUpAvroSerialization(mapDriver.getConfiguration(),schema);
  Path configPath=new Path(ClassLoader.getSystemResource(CONF_FILE).toString());
  FileSystem fs=FileSystem.get(config);
  StarTreeConfig starTreeConfig=StarTreeConfig.decode(fs.open(configPath));
  starTreeBootstrapConfig=StarTreeBootstrapPhaseOneConfig.fromStarTreeConfig(starTreeConfig);
  thirdEyeRoot=System.getProperty("java.io.tmpdir");
  config.set(StarTreeGenerationConstants.STAR_TREE_GEN_OUTPUT_PATH.toString(),thirdEyeRoot + File.separator + "startree_generation");
  StarTreeBootstrapReducer reducer=new StarTreeBootstrapReducer();
  reduceDriver=ReduceDriver.newReduceDriver(reducer);
  config=reduceDriver.getConfiguration();
  config.set(StarTreeBootstrapPhaseOneConstants.STAR_TREE_BOOTSTRAP_CONFIG_PATH.toString(),ClassLoader.getSystemResource(CONF_FILE).toString());
}
