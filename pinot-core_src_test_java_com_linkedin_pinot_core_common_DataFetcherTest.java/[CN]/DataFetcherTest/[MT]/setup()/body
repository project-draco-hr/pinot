{
  GenericRow[] segmentData=new GenericRow[NUM_ROWS];
  for (int i=0; i < NUM_ROWS; i++) {
    double randomDouble=_random.nextDouble();
    String randomDoubleString=String.valueOf(randomDouble);
    _dimensionValues[i]=randomDoubleString;
    _intMetricValues[i]=(int)randomDouble;
    _longMetricValues[i]=(long)randomDouble;
    _floatMetricValues[i]=(float)randomDouble;
    _doubleMetricValues[i]=randomDouble;
    HashMap<String,Object> map=new HashMap<>();
    map.put(DIMENSION_NAME,_dimensionValues[i]);
    map.put(INT_METRIC_NAME,_intMetricValues[i]);
    map.put(LONG_METRIC_NAME,_longMetricValues[i]);
    map.put(FLOAT_METRIC_NAME,_floatMetricValues[i]);
    map.put(DOUBLE_METRIC_NAME,_doubleMetricValues[i]);
    GenericRow genericRow=new GenericRow();
    genericRow.init(map);
    segmentData[i]=genericRow;
  }
  final Schema schema=new Schema();
  schema.addField(DIMENSION_NAME,new DimensionFieldSpec(DIMENSION_NAME,FieldSpec.DataType.STRING,true));
  schema.addField(INT_METRIC_NAME,new MetricFieldSpec(INT_METRIC_NAME,FieldSpec.DataType.INT));
  schema.addField(LONG_METRIC_NAME,new MetricFieldSpec(LONG_METRIC_NAME,FieldSpec.DataType.LONG));
  schema.addField(FLOAT_METRIC_NAME,new MetricFieldSpec(FLOAT_METRIC_NAME,FieldSpec.DataType.FLOAT));
  schema.addField(DOUBLE_METRIC_NAME,new MetricFieldSpec(DOUBLE_METRIC_NAME,FieldSpec.DataType.DOUBLE));
  SegmentGeneratorConfig config=new SegmentGeneratorConfig(schema);
  FileUtils.deleteQuietly(new File(INDEX_DIR_PATH));
  config.setOutDir(INDEX_DIR_PATH);
  config.setSegmentName(SEGMENT_NAME);
  SegmentIndexCreationDriverImpl driver=new SegmentIndexCreationDriverImpl();
  driver.init(config,new TestDataRecordReader(schema,segmentData));
  driver.build();
  IndexSegment indexSegment=Loaders.IndexSegment.load(new File(INDEX_DIR_PATH,SEGMENT_NAME),ReadMode.heap);
  _dataFetcher=new DataFetcher(indexSegment);
}
