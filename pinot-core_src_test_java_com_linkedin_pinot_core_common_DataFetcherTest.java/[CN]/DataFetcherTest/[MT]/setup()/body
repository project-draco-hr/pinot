{
  for (int i=0; i < NUM_ROWS; i++) {
    double randomDouble=_random.nextDouble();
    String randomDoubleString=String.valueOf(randomDouble);
    _dimensionValues[i]=randomDoubleString;
    _intMetricValues[i]=(int)randomDouble;
    _longMetricValues[i]=(long)randomDouble;
    _floatMetricValues[i]=(float)randomDouble;
    _doubleMetricValues[i]=randomDouble;
    HashMap<String,Object> map=new HashMap<>();
    map.put(DIMENSION_NAME,_dimensionValues[i]);
    map.put(INT_METRIC_NAME,_intMetricValues[i]);
    map.put(LONG_METRIC_NAME,_longMetricValues[i]);
    map.put(FLOAT_METRIC_NAME,_floatMetricValues[i]);
    map.put(DOUBLE_METRIC_NAME,_doubleMetricValues[i]);
    GenericRow genericRow=new GenericRow();
    genericRow.init(map);
    _segmentData[i]=genericRow;
  }
  final Schema schema=new Schema();
  DimensionFieldSpec dimensionFieldSpec=new DimensionFieldSpec(DIMENSION_NAME,FieldSpec.DataType.STRING,true);
  schema.addField(DIMENSION_NAME,dimensionFieldSpec);
  MetricFieldSpec intMetricFieldSpec=new MetricFieldSpec(INT_METRIC_NAME,FieldSpec.DataType.INT);
  schema.addField(INT_METRIC_NAME,intMetricFieldSpec);
  MetricFieldSpec longMetricFieldSpec=new MetricFieldSpec(LONG_METRIC_NAME,FieldSpec.DataType.LONG);
  schema.addField(LONG_METRIC_NAME,longMetricFieldSpec);
  MetricFieldSpec floatMetricFieldSpec=new MetricFieldSpec(FLOAT_METRIC_NAME,FieldSpec.DataType.FLOAT);
  schema.addField(FLOAT_METRIC_NAME,floatMetricFieldSpec);
  MetricFieldSpec doubleMetricFieldSpec=new MetricFieldSpec(DOUBLE_METRIC_NAME,FieldSpec.DataType.DOUBLE);
  schema.addField(DOUBLE_METRIC_NAME,doubleMetricFieldSpec);
  SegmentGeneratorConfig config=new SegmentGeneratorConfig(schema);
  config.setOutDir(INDEX_DIR_PATH);
  config.setSegmentName("dataFetcherTestSegment");
  RecordReader reader=new RecordReader(){
    int index=0;
    @Override public void init() throws Exception {
    }
    @Override public void rewind() throws Exception {
      index=0;
    }
    @Override public boolean hasNext(){
      return index < NUM_ROWS;
    }
    @Override public Schema getSchema(){
      return schema;
    }
    @Override public GenericRow next(){
      return _segmentData[index++];
    }
    @Override public Map<String,MutableLong> getNullCountMap(){
      return null;
    }
    @Override public void close() throws Exception {
    }
  }
;
  SegmentIndexCreationDriverImpl driver=new SegmentIndexCreationDriverImpl();
  driver.init(config,reader);
  driver.build();
  ReadMode mode=ReadMode.heap;
  IndexSegment indexSegment=Loaders.IndexSegment.load(new File(INDEX_DIR_PATH,driver.getSegmentName()),mode);
  _dataFetcher=new DataFetcher(indexSegment);
}
