{
  for (int i=0; i < dimensionNames.size(); i++) {
    String dimensionName=dimensionNames.get(i);
    String dimensionValue="";
    Object val=record.datum().get(dimensionName);
    if (val != null) {
      dimensionValue=val.toString();
    }
    dimensionValues[i]=dimensionValue;
  }
  DimensionKey key=new DimensionKey(dimensionValues);
  String sourceTimeWindow=record.datum().get(config.getTimeColumnName()).toString();
  long aggregationTimeWindow=aggregationTimeUnit.convert(Long.parseLong(sourceTimeWindow),sourceTimeUnit);
  aggregationTimeWindow=-1;
  MetricTimeSeries series=new MetricTimeSeries(metricSchema);
  for (int i=0; i < metricNames.size(); i++) {
    String metricName=metricNames.get(i);
    Object object=record.datum().get(metricName);
    String metricValueStr="0";
    if (object != null) {
      metricValueStr=object.toString();
    }
    Number metricValue=metricTypes.get(i).toNumber(metricValueStr);
    series.increment(aggregationTimeWindow,metricName,(Integer)metricValue);
  }
  byte[] serializedKey=key.toBytes();
  byte[] serializedMetrics=series.toBytes();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  baos.write(serializedKey.length);
  baos.write(serializedKey);
  baos.write(serializedMetrics.length);
  baos.write(serializedMetrics);
  context.write(new BytesWritable(serializedKey),new BytesWritable(serializedMetrics));
}
