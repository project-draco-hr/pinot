{
  final FieldSpec mvIntFs=new DimensionFieldSpec(COL_NAME,FieldSpec.DataType.LONG,false);
  final LongMutableDictionary dict=new LongMutableDictionary(mvIntFs);
  final FixedByteSingleColumnMultiValueReaderWriter indexer=new FixedByteSingleColumnMultiValueReaderWriter(NROWS,Integer.SIZE / 8,MAX_N_VALUES);
  Random random=new Random(RANDOM_SEED);
  for (int row=0; row < NROWS; row++) {
    int nValues=Math.abs(random.nextInt()) % MAX_N_VALUES;
    Long[] val=new Long[nValues];
    for (int i=0; i < nValues; i++) {
      val[i]=random.nextLong();
    }
    dict.index(val);
    int dictIds[]=new int[nValues];
    for (int i=0; i < nValues; i++) {
      dictIds[i]=dict.indexOf(val[i]);
    }
    indexer.setIntArray(row,dictIds);
  }
  random=new Random(RANDOM_SEED);
  final int[] dictIds=new int[MAX_N_VALUES];
  for (int row=0; row < NROWS; row++) {
    int nValues=indexer.getIntArray(row,dictIds);
    Assert.assertEquals(nValues,Math.abs(random.nextInt()) % MAX_N_VALUES,"Mismatching number of values, random seed is: " + RANDOM_SEED);
    for (int i=0; i < nValues; i++) {
      Long val=dict.getLongValue(dictIds[i]);
      Assert.assertEquals(val.longValue(),random.nextLong(),"Value mismatch at row " + row + ", random seed is: "+ RANDOM_SEED);
    }
  }
}
