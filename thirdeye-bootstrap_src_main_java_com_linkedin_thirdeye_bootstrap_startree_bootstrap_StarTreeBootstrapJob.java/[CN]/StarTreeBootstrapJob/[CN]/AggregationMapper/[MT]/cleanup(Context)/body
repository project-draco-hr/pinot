{
  if (true) {
    return;
  }
  LinkedList<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
  MetricTimeSeries emptySeries=new MetricTimeSeries(metricSchema);
  DimensionKey key;
  String[] dimValues=new String[dimensionNames.size()];
  StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTreeRootNode);
  for (  StarTreeNode node : leafNodes) {
    UUID uuid=node.getId();
    byte[] uuidBytes=uuid.toString().getBytes();
    for (int i=0; i < dimensionNames.size(); i++) {
      String dimName=dimensionNames.get(i);
      if (node.getAncestorDimensionNames().contains(dimName)) {
        dimValues[i]=node.getAncestorDimensionValues().get(dimName);
      }
 else       if (node.getDimensionName().equals(dimName)) {
        dimValues[i]=node.getDimensionValue();
      }
 else {
        dimValues[i]=StarTreeConstants.OTHER;
      }
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream dos=new DataOutputStream(baos);
    key=new DimensionKey(dimValues);
    byte[] serializedKey=key.toBytes();
    byte[] serializedMetrics=emptySeries.toBytes();
    dos.writeInt(serializedKey.length);
    dos.write(serializedKey);
    dos.writeInt(serializedMetrics.length);
    dos.write(serializedMetrics);
    BytesWritable valWritable=new BytesWritable(baos.toByteArray());
    context.write(new BytesWritable(uuidBytes),valWritable);
  }
}
