{
  LOG.info("AggregatePhaseJob.AggregationMapper.setup()");
  Configuration configuration=context.getConfiguration();
  FileSystem fileSystem=FileSystem.get(configuration);
  Path configPath=new Path(configuration.get(STAR_TREE_BOOTSTRAP_CONFIG_PATH.toString()));
  try {
    config=OBJECT_MAPPER.readValue(fileSystem.open(configPath),StarTreeBootstrapConfig.class);
    dimensionNames=config.getDimensionNames();
    metricNames=config.getMetricNames();
    metricTypes=Lists.newArrayList();
    for (    String type : config.getMetricTypes()) {
      metricTypes.add(MetricType.valueOf(type));
    }
    metricSchema=new MetricSchema(config.getMetricNames(),metricTypes);
    sourceTimeUnit=TimeUnit.valueOf(config.getTimeUnit());
    aggregationTimeUnit=TimeUnit.valueOf(config.getAggregationGranularity());
    dimensionValues=new String[dimensionNames.size()];
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  String starTreeOutputPath=context.getConfiguration().get(STAR_TREE_GENERATION_OUTPUT_PATH.toString());
  try {
    collectionName=config.getCollectionName();
    Path pathToTree=new Path(starTreeOutputPath + "/" + "star-tree-"+ collectionName,collectionName + "-tree.bin");
    ObjectInputStream objectInputStream=new ObjectInputStream(fileSystem.open(pathToTree));
    starTreeRootNode=(StarTreeNode)objectInputStream.readObject();
    LinkedList<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
    StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTreeRootNode);
    LOG.info("Num leaf Nodes in star tree:" + leafNodes.size());
    leafNodesMap=new HashMap<UUID,StarTreeNode>();
    for (    StarTreeNode node : leafNodes) {
      leafNodesMap.put(node.getId(),node);
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
