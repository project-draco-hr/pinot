{
  BrokerRequest brokerRequest=getAggregationNoFilterBrokerRequest();
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  PlanNode rootPlanNode=instancePlanMaker.makeInnerSegmentPlan(_indexSegment,brokerRequest);
  rootPlanNode.showTree("");
  MAggregationOperator operator=(MAggregationOperator)rootPlanNode.run();
  IntermediateResultsBlock resultBlock=(IntermediateResultsBlock)operator.nextBlock();
  System.out.println(resultBlock.getAggregationResult().get(0));
  System.out.println(resultBlock.getAggregationResult().get(1));
  System.out.println(resultBlock.getAggregationResult().get(2));
  System.out.println(resultBlock.getAggregationResult().get(3));
  System.out.println(resultBlock.getAggregationResult().get(4));
  System.out.println(resultBlock.getAggregationResult().get(5));
  System.out.println(resultBlock.getAggregationResult().get(6));
  Assert.assertEquals(2000001L,resultBlock.getAggregationResult().get(0));
  Assert.assertEquals(2000001000000.0,resultBlock.getAggregationResult().get(1));
  Assert.assertEquals(2000000.0,resultBlock.getAggregationResult().get(2));
  Assert.assertEquals(0.0,resultBlock.getAggregationResult().get(3));
  Assert.assertEquals(1000000.0,Double.parseDouble(resultBlock.getAggregationResult().get(4).toString()));
  Assert.assertEquals(10,((IntOpenHashSet)resultBlock.getAggregationResult().get(5)).size());
  Assert.assertEquals(100,((IntOpenHashSet)resultBlock.getAggregationResult().get(6)).size());
}
