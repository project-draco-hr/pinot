{
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  BrokerRequest brokerRequest=_brokerRequest.deepCopy();
  ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(_indexSegmentList,brokerRequest,executorService);
  globalPlan.print();
  globalPlan.execute();
  DataTable instanceResponse=globalPlan.getInstanceResponse();
  System.out.println(instanceResponse.getLong(0,0));
  System.out.println(instanceResponse.getDouble(0,1));
  System.out.println(instanceResponse.getDouble(0,2));
  System.out.println(instanceResponse.getDouble(0,3));
  System.out.println(instanceResponse.getObject(0,4));
  System.out.println(instanceResponse.getObject(0,5));
  System.out.println(instanceResponse.getObject(0,6));
  System.out.println("Query time: " + instanceResponse.getMetadata().get("timeUsedMs"));
  Assert.assertEquals(2000001L * _indexSegmentList.size(),instanceResponse.getLong(0,0));
  Assert.assertEquals(2000001000000.0 * _indexSegmentList.size(),instanceResponse.getDouble(0,1));
  Assert.assertEquals(2000000.0,instanceResponse.getDouble(0,2));
  Assert.assertEquals(0.0,instanceResponse.getDouble(0,3));
  Assert.assertEquals(1000000.0,Double.parseDouble(instanceResponse.getObject(0,4).toString()));
  Assert.assertEquals(10,((IntOpenHashSet)instanceResponse.getObject(0,5)).size());
  Assert.assertEquals(100,((IntOpenHashSet)instanceResponse.getObject(0,6)).size());
  DefaultReduceService reduceService=new DefaultReduceService();
  Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:1111"),instanceResponse);
  BrokerResponse brokerResponse=reduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  System.out.println(brokerResponse.getAggregationResults());
}
