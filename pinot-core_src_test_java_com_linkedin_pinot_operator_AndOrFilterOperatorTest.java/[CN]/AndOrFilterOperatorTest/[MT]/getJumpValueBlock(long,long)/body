{
  return new Block(){
    @Override public BlockMetadata getMetadata(){
      throw new UnsupportedOperationException("Not supported getMetadata()");
    }
    @Override public BlockId getId(){
      throw new UnsupportedOperationException("Not supported getId()");
    }
    @Override public BlockValSet getBlockValueSet(){
      throw new UnsupportedOperationException("Not supported getBlockValueSet()");
    }
    @Override public BlockDocIdValueSet getBlockDocIdValueSet(){
      throw new UnsupportedOperationException("Not supported getBlockDocIdValueSet()");
    }
    @Override public BlockDocIdSet getBlockDocIdSet(){
      return new BlockDocIdSet(){
        @Override public BlockDocIdIterator iterator(){
          return new BlockDocIdIterator(){
            int _currentDocId=0;
            @Override public int skipTo(            int targetDocId){
              _currentDocId=(int)((Math.floor((double)(targetDocId - 1.0) / (double)jumpValues)) * jumpValues);
              return next();
            }
            @Override public int next(){
              _currentDocId+=jumpValues;
              if (_currentDocId < totalDocs) {
                return _currentDocId;
              }
 else {
                return Constants.EOF;
              }
            }
            @Override public int currentDocId(){
              return _currentDocId;
            }
          }
;
        }
        @Override public Object getRaw(){
          throw new UnsupportedOperationException("Not supported getRaw()");
        }
      }
;
    }
    @Override public boolean applyPredicate(    Predicate predicate){
      return false;
    }
  }
;
}
