{
  PinotResourceManagerResponse res;
  IdealState idealState;
  res=_pinotResourceManager.createBrokerResourceTag(ControllerRequestBuilderUtil.createBrokerTagResourceConfig(2,"broker_mirror"));
  System.out.println(res);
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),3);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerResourceTag(ControllerRequestBuilderUtil.createBrokerTagResourceConfig(3,"broker_colocated"));
  System.out.println(res);
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerDataResource(ControllerRequestBuilderUtil.createBrokerDataResourceConfig("mirror",2,"broker_mirror"));
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerDataResource(ControllerRequestBuilderUtil.createBrokerDataResourceConfig("company",2,"broker_colocated"));
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),2);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerDataResource(ControllerRequestBuilderUtil.createBrokerDataResourceConfig("scin",3,"broker_colocated"));
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),3);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerDataResource(ControllerRequestBuilderUtil.createBrokerDataResourceConfig("cap",1,"broker_colocated"));
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),3);
  Assert.assertEquals(idealState.getInstanceSet("cap").size(),1);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerDataResource(ControllerRequestBuilderUtil.createBrokerDataResourceConfig("cap",3,"broker_colocated"));
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),3);
  Assert.assertEquals(idealState.getInstanceSet("cap").size(),3);
  Thread.sleep(2000);
  res=_pinotResourceManager.createBrokerDataResource(ControllerRequestBuilderUtil.createBrokerDataResourceConfig("cap",2,"broker_colocated"));
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),3);
  Assert.assertEquals(idealState.getInstanceSet("cap").size(),2);
  Thread.sleep(2000);
  res=_pinotResourceManager.deleteBrokerDataResource("company");
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),3);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),0);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),0);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),3);
  Assert.assertEquals(idealState.getInstanceSet("cap").size(),2);
  Thread.sleep(2000);
  res=_pinotResourceManager.deleteBrokerResourceTag("broker_colocated");
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),2);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),0);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),3);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),2);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),0);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),0);
  Assert.assertEquals(idealState.getInstanceSet("cap").size(),0);
  Thread.sleep(2000);
  res=_pinotResourceManager.deleteBrokerResourceTag("broker_mirror");
  Assert.assertEquals(res.status == STATUS.success,true);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_mirror").size(),0);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_colocated").size(),0);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"broker_untagged").size(),5);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet("mirror").size(),0);
  Assert.assertEquals(idealState.getInstanceSet("company").size(),0);
  Assert.assertEquals(idealState.getInstanceSet("scin").size(),0);
  Assert.assertEquals(idealState.getInstanceSet("cap").size(),0);
  Thread.sleep(2000);
}
