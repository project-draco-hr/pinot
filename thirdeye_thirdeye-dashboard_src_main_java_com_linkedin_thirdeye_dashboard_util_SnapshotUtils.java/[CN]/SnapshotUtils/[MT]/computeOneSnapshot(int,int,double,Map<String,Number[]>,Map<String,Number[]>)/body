{
  int rowNum=baseline.size();
  int colNum=maxRecords + 1;
  RealMatrix table=new Array2DRowRealMatrix(rowNum,colNum);
  String[][] recordTable=new String[rowNum][colNum];
  String[] combinationTable=new String[rowNum];
  int idx=0;
  for (  String combination : baseline.keySet()) {
    combinationTable[idx]=combination;
    idx++;
  }
  double variance=0.0;
  for (int i=0; i < rowNum; i++) {
    String combination=combinationTable[i];
    Number[] baselineData=baseline.get(combination);
    Number[] currentData=current.get(combination);
    if (currentData == null) {
      continue;
    }
    double baselineValue=baselineData[metricIdx].doubleValue();
    double currentValue=currentData[metricIdx].doubleValue();
    double diff=currentValue - growthRatio * baselineValue;
    variance+=diff * diff;
  }
  double stDev=Math.sqrt(variance);
  for (int i=0; i < rowNum; i++) {
    String combination=combinationTable[i];
    Number[] baselineData=baseline.get(combination);
    Number[] currentData=current.get(combination);
    if (currentData == null) {
      continue;
    }
    double baselineValue=baselineData[metricIdx].doubleValue();
    double currentValue=currentData[metricIdx].doubleValue();
    double loss=compressionLoss(growthRatio,baselineValue,currentValue,stDev);
    if (i == 0) {
      table.setEntry(i,0,loss);
    }
 else {
      table.setEntry(i,0,table.getEntry(i - 1,0) + loss);
    }
    recordTable[i][0]=REST;
  }
  for (int j=1; j < colNum; j++) {
    table.setEntry(0,j,0);
    recordTable[0][j]=combinationTable[0];
  }
  for (int i=1; i < rowNum; i++) {
    String combination=combinationTable[i];
    Number[] baselineData=baseline.get(combination);
    Number[] currentData=current.get(combination);
    if (currentData == null) {
      continue;
    }
    double baselineValue=baselineData[metricIdx].doubleValue();
    double currentValue=currentData[metricIdx].doubleValue();
    for (int j=1; j < colNum; j++) {
      double t1=table.getEntry(i - 1,j - 1);
      double t2=table.getEntry(i - 1,j) + compressionLoss(growthRatio,baselineValue,currentValue,stDev);
      table.setEntry(i,j,Math.min(t1,t2));
      if (t1 < t2) {
        recordTable[i][j]=TSV.join(combination,recordTable[i - 1][j - 1]);
      }
 else       if (recordTable[i - 1][j - 1].contains(REST)) {
        recordTable[i][j]=recordTable[i - 1][j];
      }
 else {
        recordTable[i][j]=TSV.join(recordTable[i - 1][j],REST);
      }
    }
  }
  double cost=table.getEntry(rowNum - 1,colNum - 1);
  String[] records=recordTable[rowNum - 1][colNum - 1].split(SEP);
  return new SnapshotResult(cost,records);
}
