{
  ObjectMapper objectMapper=new ObjectMapper();
  InputStream inputStream=ClassLoader.getSystemResourceAsStream("sample-dictionary.json");
  dictionary=objectMapper.readValue(inputStream,DimensionDictionary.class);
  inputStream=ClassLoader.getSystemResourceAsStream("sample-config.yml");
  config=StarTreeConfig.decode(inputStream);
  metricSchema=MetricSchema.fromMetricSpecs(config.getMetrics());
  ByteBuffer dimensionBuffer=ByteBuffer.allocate(1024 * 1024);
  for (  DimensionKey key : generateKeys()) {
    StorageUtils.addToDimensionStore(config,dimensionBuffer,key,dictionary);
  }
  dimensionBuffer.flip();
  dimensionStore=new DimensionStoreImmutableImpl(config,dimensionBuffer,dictionary);
  List<TimeRange> timeRanges=Arrays.asList(new TimeRange(0L,3L),new TimeRange(4L,7L));
  ConcurrentMap<TimeRange,List<ByteBuffer>> metricBuffers=new ConcurrentHashMap<TimeRange,List<ByteBuffer>>();
  for (  TimeRange timeRange : timeRanges) {
    metricBuffers.put(timeRange,Arrays.asList(generateBuffer(timeRange)));
  }
  metricStore=new MetricStoreImmutableImpl(config,metricBuffers);
  recordStore=new StarTreeRecordStoreDefaultImpl(config,dimensionStore,metricStore);
}
