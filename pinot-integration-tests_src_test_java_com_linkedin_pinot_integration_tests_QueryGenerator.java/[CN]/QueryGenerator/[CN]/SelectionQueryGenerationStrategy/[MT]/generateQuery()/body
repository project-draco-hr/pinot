{
  int projectionColumnCount=Math.min(RANDOM.nextInt(MAX_NUM_SELECTION_COLUMNS) + 1,_columnNames.size());
  Set<String> projectionColumns=new HashSet<>();
  while (projectionColumns.size() < projectionColumnCount) {
    projectionColumns.add(pickRandom(_columnNames));
  }
  int orderByColumnCount=Math.min(RANDOM.nextInt(MAX_NUM_ORDER_BY_COLUMNS + 1),_singleValueColumnNames.size());
  Set<String> orderByColumns=new HashSet<>();
  while (orderByColumns.size() < orderByColumnCount) {
    orderByColumns.add(pickRandom(_singleValueColumnNames));
  }
  PredicateQueryFragment predicate=generatePredicate();
  int resultLimit=RANDOM.nextInt(MAX_RESULT_LIMIT + 1);
  LimitQueryFragment limit=new LimitQueryFragment(resultLimit);
  return new SelectionQuery(new ArrayList<>(projectionColumns),predicate,new OrderByQueryFragment(orderByColumns),limit);
}
