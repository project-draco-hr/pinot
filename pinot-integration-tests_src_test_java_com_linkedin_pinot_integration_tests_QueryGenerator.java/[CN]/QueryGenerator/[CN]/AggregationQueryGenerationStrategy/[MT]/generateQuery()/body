{
  int aggregationColumnCount=RANDOM.nextInt(MAX_NUM_AGGREGATION_COLUMNS + 1);
  Set<String> aggregationColumnsAndFunctions=new HashSet<>();
  if (aggregationColumnCount == 0) {
    aggregationColumnsAndFunctions.add("COUNT(*)");
  }
 else {
    while (aggregationColumnsAndFunctions.size() < aggregationColumnCount) {
      String aggregationFunction=pickRandom(AGGREGATION_FUNCTIONS);
      String aggregationColumn;
switch (aggregationFunction) {
case "COUNT":
case "DISTINCTCOUNT":
        aggregationColumn=pickRandom(_singleValueColumnNames);
      break;
default :
    aggregationColumn=pickRandom(_singleValueNumericalColumnNames);
}
aggregationColumnsAndFunctions.add(aggregationFunction + "(" + aggregationColumn+ ")");
}
}
PredicateQueryFragment predicate=generatePredicate();
int groupColumnCount=Math.min(RANDOM.nextInt(MAX_NUM_GROUP_BY_COLUMNS + 1),_singleValueColumnNames.size());
Set<String> groupColumns=new HashSet<>();
while (groupColumns.size() < groupColumnCount) {
groupColumns.add(pickRandom(_singleValueColumnNames));
}
TopQueryFragment top=new TopQueryFragment(RANDOM.nextInt(MAX_RESULT_LIMIT + 1));
return new AggregationQuery(new ArrayList<>(aggregationColumnsAndFunctions),predicate,groupColumns,top);
}
