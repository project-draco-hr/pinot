{
  Set<String> groupColumns=new HashSet<String>();
  int groupColumnCount=RANDOM.nextInt(10);
  for (int i=0; i < groupColumnCount; i++) {
    groupColumns.add(pickRandom(_columnNames));
  }
  int aggregationColumnCount=RANDOM.nextInt(10);
  Set<String> aggregationColumns=new HashSet<String>();
  for (int i=0; i < aggregationColumnCount; i++) {
    String randomColumn=pickRandom(_numericalColumnNames);
    if (!groupColumns.contains(randomColumn))     aggregationColumns.add(randomColumn);
  }
  List<String> aggregationColumnsAndFunctions=new ArrayList<String>();
  if (aggregationColumns.isEmpty()) {
    aggregationColumnsAndFunctions.add("COUNT(*)");
  }
 else {
    for (    String aggregationColumn : aggregationColumns) {
      int aggregationFunctionCount=RANDOM.nextInt(aggregationFunctions.size()) + 1;
      for (int i=0; i < aggregationFunctionCount; i++) {
        aggregationColumnsAndFunctions.add(pickRandom(aggregationFunctions) + "(" + aggregationColumn+ ")");
      }
    }
  }
  QueryFragment predicate=generatePredicate();
  int resultLimit=RANDOM.nextInt(5500) - 500;
  LimitQueryFragment limit=new LimitQueryFragment(resultLimit);
  return new AggregationQuery(new ArrayList<String>(groupColumns),aggregationColumnsAndFunctions,predicate,limit);
}
