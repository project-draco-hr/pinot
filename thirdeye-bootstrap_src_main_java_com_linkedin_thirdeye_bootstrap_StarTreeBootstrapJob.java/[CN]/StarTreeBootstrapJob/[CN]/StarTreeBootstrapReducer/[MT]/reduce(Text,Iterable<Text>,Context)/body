{
  Map<Map<String,String>,Map<Long,List<StarTreeRecord>>> groupedRecords=new HashMap<Map<String,String>,Map<Long,List<StarTreeRecord>>>();
  for (  Text tsvRecord : tsvRecords) {
    int idx=0;
    String[] tokens=tsvRecord.toString().split("\t");
    StarTreeRecordImpl.Builder builder=new StarTreeRecordImpl.Builder();
    for (    String dimensionName : config.getDimensionNames()) {
      builder.setDimensionValue(dimensionName,tokens[idx++]);
    }
    for (    String metricName : config.getMetricNames()) {
      builder.setMetricValue(metricName,Long.valueOf(tokens[idx++]));
    }
    builder.setTime(Long.valueOf(tokens[idx]));
    StarTreeRecord record=builder.build();
    Map<Long,List<StarTreeRecord>> timeBucket=groupedRecords.get(record.getDimensionValues());
    if (timeBucket == null) {
      timeBucket=new HashMap<Long,List<StarTreeRecord>>();
      groupedRecords.put(record.getDimensionValues(),timeBucket);
    }
    List<StarTreeRecord> records=timeBucket.get(record.getTime());
    if (records == null) {
      records=new ArrayList<StarTreeRecord>();
      timeBucket.put(record.getTime(),records);
    }
    records.add(record);
  }
  List<StarTreeRecord> mergedRecords=new ArrayList<StarTreeRecord>();
  for (  Map.Entry<Map<String,String>,Map<Long,List<StarTreeRecord>>> e1 : groupedRecords.entrySet()) {
    Map<String,String> combination=e1.getKey();
    Map<Long,List<StarTreeRecord>> timeGroups=e1.getValue();
    Long latestTime=null;
    List<StarTreeRecord> latestRecords=null;
    for (    Map.Entry<Long,List<StarTreeRecord>> e2 : e1.getValue().entrySet()) {
      if (latestTime == null || e2.getKey() > latestTime) {
        latestTime=e2.getKey();
        latestRecords=e2.getValue();
      }
    }
    if (latestRecords == null) {
      throw new IllegalStateException("Could not find latest records for combination " + combination);
    }
    mergedRecords.add(StarTreeUtils.merge(latestRecords));
  }
  Path indexPath=new Path(context.getConfiguration().get(PROP_STARTREE_DATA),nodeId.toString() + StarTreeRecordStoreFactoryCircularBufferHdfsImpl.INDEX_SUFFIX);
  Map<String,Map<String,Integer>> forwardIndex=OBJECT_MAPPER.readValue(FileSystem.get(context.getConfiguration()).open(indexPath),TYPE_REFERENCE);
  int bufferSize=mergedRecords.size() * (config.getDimensionNames().size() * Integer.SIZE / 8 + (config.getMetricNames().size() + 1) * numTimeBuckets * Long.SIZE / 8);
  ByteBuffer buffer=ByteBuffer.allocate(bufferSize);
  StarTreeRecordStoreCircularBufferImpl.fillBuffer(buffer,config.getDimensionNames(),config.getMetricNames(),forwardIndex,mergedRecords,numTimeBuckets,true);
  String fileName=nodeId.toString() + StarTreeRecordStoreFactoryCircularBufferHdfsImpl.BUFFER_SUFFIX;
  bufferWrapper.set(buffer.array());
  multipleOutputs.write(NullWritable.get(),bufferWrapper,fileName);
}
