{
  final int[] dataA=new int[]{2,3,4,1,1,3,4,4,3,2,3,1,1};
  final int[][] invertedIndexA=makeInverted(dataA);
  final int[] dictionaryA=new int[]{1,2,3,4};
  final List<String> rhsA=new ArrayList<String>();
  rhsA.add("2");
  final Predicate predicateA=new EqPredicate("A",rhsA);
  final DataSource dsA=new DataSource(){
    @Override public boolean open(){
      return false;
    }
    @Override public Block nextBlock(    BlockId BlockId){
      return null;
    }
    @Override public Block nextBlock(){
      return null;
    }
    @Override public boolean close(){
      return false;
    }
    @Override public boolean setPredicate(    Predicate predicate){
      return false;
    }
  }
;
  dsA.setPredicate(predicateA);
  final int[] dataB=new int[]{2,3,4,1,1,3,4,4,3,2,3,1,1};
  final int[][] invertedIndexB=makeInverted(dataB);
  final int[] dictionaryB=new int[]{1,2,3,4};
  final List<String> rhsB=new ArrayList<String>();
  rhsB.add("2");
  final Predicate predicateB=new EqPredicate("B",rhsB);
  final DataSource dsB=new DataSource(){
    @Override public boolean open(){
      return false;
    }
    @Override public Block nextBlock(    BlockId BlockId){
      return null;
    }
    @Override public Block nextBlock(){
      return null;
    }
    @Override public boolean close(){
      return false;
    }
    @Override public boolean setPredicate(    Predicate predicate){
      return false;
    }
  }
;
  dsB.setPredicate(predicateB);
  final BAndOperator andOperator=new BAndOperator(dsA,dsB);
  andOperator.open();
  Block block;
  while ((block=andOperator.nextBlock()) != null) {
    final BlockDocIdSet blockDocIdSet=block.getBlockDocIdSet();
    final BlockDocIdIterator iterator=blockDocIdSet.iterator();
    int docId;
    while ((docId=iterator.next()) != Constants.EOF) {
      System.out.println(docId);
    }
  }
  andOperator.close();
}
