{
  long start=System.currentTimeMillis();
  final List<Operator> retOperators=new ArrayList<Operator>(_planNodeList.size());
  if (_planNodeList.size() < 10) {
    for (    PlanNode planNode : _planNodeList) {
      retOperators.add(planNode.run());
    }
  }
 else {
    final CountDownLatch latch=new CountDownLatch(_planNodeList.size());
    final ConcurrentLinkedQueue<Operator> queue=new ConcurrentLinkedQueue<Operator>();
    for (    final PlanNode planNode : _planNodeList) {
      _executorService.execute(new Runnable(){
        @Override public void run(){
          try {
            Operator operator=planNode.run();
            queue.add(operator);
          }
 catch (          Exception e) {
            LOGGER.error("Getting exception when trying to run a planNode",e);
          }
 finally {
            latch.countDown();
          }
        }
      }
);
    }
    try {
      latch.await(60,TimeUnit.SECONDS);
      retOperators.addAll(queue);
    }
 catch (    InterruptedException e) {
      LOGGER.error("Interupted exception. Planning each segment took more than 60 seconds: ",e);
      throw new RuntimeException(QueryException.COMBINE_SEGMENT_PLAN_TIMEOUT_ERROR);
    }
  }
  MCombineOperator mCombineOperator=new MCombineOperator(retOperators,_executorService,_timeOutMs,_brokerRequest);
  long end=System.currentTimeMillis();
  LOGGER.info("CombinePlanNode.run took: " + (end - start));
  return mCombineOperator;
}
