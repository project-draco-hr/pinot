{
  String tableName="testTable";
  JSONObject payload=ControllerRequestBuilderUtil.buildCreateOfflineTableJSON(tableName,null,null,20);
  sendPostRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forTableCreate(),payload.toString());
  Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE).getPartitionSet().size(),1);
  Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE).getInstanceSet(tableName + "_OFFLINE").size(),20);
  for (int i=0; i < 10; ++i) {
    Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,tableName + "_OFFLINE").getNumPartitions(),i);
    addOneOfflineSegment(tableName);
    Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,tableName + "_OFFLINE").getNumPartitions(),i + 1);
  }
  Thread.sleep(2000);
  int i=20;
  for (  String instanceName : _helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_OFFLINE")) {
    ExternalView resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,tableName + "_OFFLINE");
    Set<String> instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i--);
    sendGetRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forInstanceDisable(instanceName));
    resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,tableName + "_OFFLINE");
    instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i);
    LOGGER.info("Current running server instance: " + instanceSet.size());
  }
  i=0;
  for (  String instanceName : _helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_OFFLINE")) {
    ExternalView resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,tableName + "_OFFLINE");
    Set<String> instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i++);
    sendGetRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forInstanceEnable(instanceName));
    resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,tableName + "_OFFLINE");
    instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i);
    LOGGER.info("Current running server instance: " + instanceSet.size());
  }
  i=20;
  for (  String instanceName : _helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_BROKER")) {
    ExternalView resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
    Set<String> instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i--);
    sendGetRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forInstanceDisable(instanceName));
    resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
    instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i);
    LOGGER.info("Current running broker instance: " + instanceSet.size());
  }
  i=0;
  for (  String instanceName : _helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_BROKER")) {
    ExternalView resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
    Set<String> instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i++);
    sendGetRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forInstanceEnable(instanceName));
    resourceExternalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
    instanceSet=HelixHelper.getOnlineInstanceFromExternalView(resourceExternalView);
    Assert.assertEquals(instanceSet.size(),i);
    LOGGER.info("Current running broker instance: " + instanceSet.size());
  }
  sendDeleteRequest(ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL).forTableDelete(tableName));
  Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE).getPartitionSet().size(),0);
}
