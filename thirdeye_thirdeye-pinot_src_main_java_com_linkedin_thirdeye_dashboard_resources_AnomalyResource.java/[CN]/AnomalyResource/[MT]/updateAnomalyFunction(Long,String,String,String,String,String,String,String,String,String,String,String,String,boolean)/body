{
  if (id == null || StringUtils.isEmpty(dataset) || StringUtils.isEmpty(functionName) || StringUtils.isEmpty(metric) || StringUtils.isEmpty(windowSize) || StringUtils.isEmpty(windowUnit) || StringUtils.isEmpty(windowDelay) || StringUtils.isEmpty(properties)) {
    throw new UnsupportedOperationException("Received null for one of the mandatory params: " + "id " + id + ",dataset "+ dataset+ ", functionName "+ functionName+ ", metric "+ metric+ ", windowSize "+ windowSize+ ", windowUnit "+ windowUnit+ ", windowDelay "+ windowDelay+ ", properties"+ properties);
  }
  AnomalyFunctionDTO anomalyFunctionSpec=anomalyFunctionDAO.findById(id);
  if (anomalyFunctionSpec == null) {
    throw new IllegalStateException("AnomalyFunctionSpec with id " + id + " does not exist");
  }
  if (anomalyFunctionSpec.getIsActive()) {
    try {
      detectionResourceHttpUtils.disableAnomalyFunction(String.valueOf(id));
    }
 catch (    Exception e) {
      LOG.error("Could not disable the function : " + id,e);
    }
  }
  CollectionSchema schema=CACHE_REGISTRY_INSTANCE.getCollectionSchemaCache().get(dataset);
  TimeGranularity dataGranularity=schema.getTime().getDataGranularity();
  anomalyFunctionSpec.setIsActive(false);
  anomalyFunctionSpec.setCollection(dataset);
  anomalyFunctionSpec.setFunctionName(functionName);
  anomalyFunctionSpec.setMetric(metric);
  if (StringUtils.isEmpty(type)) {
    type=DEFAULT_FUNCTION_TYPE;
  }
  anomalyFunctionSpec.setType(type);
  anomalyFunctionSpec.setWindowSize(Integer.valueOf(windowSize));
  anomalyFunctionSpec.setWindowUnit(TimeUnit.valueOf(windowUnit));
  anomalyFunctionSpec.setWindowDelay(Integer.valueOf(windowDelay));
  TimeUnit dataGranularityUnit=dataGranularity.getUnit();
  TimeUnit windowDelayTimeUnit=dataGranularityUnit.equals(TimeUnit.MINUTES) || dataGranularityUnit.equals(TimeUnit.HOURS) ? TimeUnit.HOURS : TimeUnit.DAYS;
  if (StringUtils.isNotEmpty(windowDelayUnit)) {
    windowDelayTimeUnit=TimeUnit.valueOf(windowDelayUnit);
  }
  anomalyFunctionSpec.setWindowDelayUnit(windowDelayTimeUnit);
  anomalyFunctionSpec.setBucketSize(dataGranularity.getSize());
  anomalyFunctionSpec.setBucketUnit(dataGranularity.getUnit());
  if (!StringUtils.isBlank(filters)) {
    filters=URLDecoder.decode(filters,UTF8);
    String filterString=ThirdEyeUtils.getSortedFiltersFromJson(filters);
    anomalyFunctionSpec.setFilters(filterString);
  }
  anomalyFunctionSpec.setExploreDimensions(exploreDimensions);
  anomalyFunctionSpec.setProperties(properties);
  if (StringUtils.isEmpty(cron)) {
    cron=DEFAULT_CRON;
  }
 else {
    if (!CronExpression.isValidExpression(cron)) {
      throw new IllegalArgumentException("Invalid cron expression for cron : " + cron);
    }
  }
  anomalyFunctionSpec.setCron(cron);
  anomalyFunctionDAO.update(anomalyFunctionSpec);
  if (isActive) {
    detectionResourceHttpUtils.enableAnomalyFunction(String.valueOf(id));
  }
  return Response.ok(id).build();
}
