{
  if (id == null || StringUtils.isEmpty(dataset) || StringUtils.isEmpty(functionIds) || StringUtils.isEmpty(metric) || StringUtils.isEmpty(windowSize) || StringUtils.isEmpty(windowUnit) || StringUtils.isEmpty(fromAddress) || StringUtils.isEmpty(toAddresses)) {
    throw new UnsupportedOperationException("Received null for one of the mandatory params: " + "dataset " + dataset + ", functionIds "+ functionIds+ ", metric "+ metric+ ", windowSize "+ windowSize+ ", windowUnit "+ windowUnit+ ", fromAddress"+ fromAddress+ ", toAddresses "+ toAddresses);
  }
  EmailConfiguration emailConfiguration=emailConfigurationDAO.findById(id);
  if (emailConfiguration == null) {
    throw new IllegalStateException("No email configuration for id " + id);
  }
  if (emailConfiguration.getIsActive()) {
    detectorHttpUtils.disableEmailConfiguration(String.valueOf(id));
  }
  emailConfiguration.setIsActive(false);
  emailConfiguration.setId(id);
  emailConfiguration.setCollection(dataset);
  emailConfiguration.setMetric(metric);
  emailConfiguration.setFromAddress(fromAddress);
  emailConfiguration.setToAddresses(toAddresses);
  String cron=DEFAULT_CRON;
  if (StringUtils.isNotEmpty(repeatEvery)) {
    cron=ThirdEyeUtils.constructCron(scheduleMinute,scheduleHour,TimeUnit.valueOf(repeatEvery));
  }
  emailConfiguration.setCron(cron);
  emailConfiguration.setSmtpHost(dashboardConfiguration.getSmtpHost());
  emailConfiguration.setSmtpPort(dashboardConfiguration.getSmtpPort());
  emailConfiguration.setWindowSize(Integer.valueOf(windowSize));
  emailConfiguration.setWindowUnit(TimeUnit.valueOf(windowUnit));
  TimeUnit windowDelayTimeUnit=TimeUnit.valueOf(windowUnit);
  if (StringUtils.isNotEmpty(windowDelayUnit)) {
    windowDelayTimeUnit=TimeUnit.valueOf(windowDelayUnit);
  }
  int windowDelayTime=0;
  if (StringUtils.isNotEmpty(windowDelay)) {
    windowDelayTime=Integer.valueOf(windowDelay);
  }
  emailConfiguration.setWindowDelayUnit(windowDelayTimeUnit);
  emailConfiguration.setWindowDelay(windowDelayTime);
  emailConfiguration.setSendZeroAnomalyEmail(sendZeroAnomalyEmail);
  emailConfiguration.setFilters(filters);
  List<AnomalyFunctionSpec> anomalyFunctionSpecs=new ArrayList<>();
  for (  String functionIdString : functionIds.split(",")) {
    AnomalyFunctionSpec anomalyFunctionSpec=anomalyFunctionSpecDAO.findById(Long.valueOf(functionIdString));
    anomalyFunctionSpecs.add(anomalyFunctionSpec);
  }
  emailConfiguration.setFunctions(anomalyFunctionSpecs);
  Long responseId=emailConfigurationDAO.createOrUpdate(emailConfiguration);
  if (isActive) {
    detectorHttpUtils.enableEmailConfiguration(String.valueOf(id));
  }
  return Response.ok(responseId).build();
}
