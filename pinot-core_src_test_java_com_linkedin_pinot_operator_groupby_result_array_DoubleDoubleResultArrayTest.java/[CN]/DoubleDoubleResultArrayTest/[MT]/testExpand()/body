{
  int origSize=Math.max(10,_random.nextInt() % 100);
  Pair<Double,Double> defaultValue=new Pair<>(_random.nextDouble(),_random.nextDouble());
  DoubleDoubleResultArray doubleDoubleResultArray=new DoubleDoubleResultArray(origSize,defaultValue);
  Pair<Double,Double>[] expected=new Pair[origSize];
  for (int i=0; i < origSize; i++) {
    Pair<Double,Double> value=new Pair<>(_random.nextDouble(),_random.nextDouble());
    doubleDoubleResultArray.set(i,value);
    expected[i]=value;
  }
  int expandedSize=origSize * 2;
  doubleDoubleResultArray.expand(expandedSize);
  int actualSize=doubleDoubleResultArray.size();
  Assert.assertEquals(expandedSize,actualSize,("Size Mis-match: Actual: " + actualSize + " Expected : "+ expandedSize));
  for (int i=0; i < origSize; i++) {
    Pair<Double,Double> actual=doubleDoubleResultArray.getResult(i);
    Assert.assertEquals(expected[i].getFirst(),actual.getFirst());
    Assert.assertEquals(expected[i].getSecond(),actual.getSecond());
  }
  for (int i=origSize; i < expandedSize; i++) {
    Pair<Double,Double> actual=doubleDoubleResultArray.getResult(i);
    Assert.assertEquals(defaultValue.getFirst(),actual.getFirst());
    Assert.assertEquals(defaultValue.getSecond(),actual.getSecond());
  }
}
