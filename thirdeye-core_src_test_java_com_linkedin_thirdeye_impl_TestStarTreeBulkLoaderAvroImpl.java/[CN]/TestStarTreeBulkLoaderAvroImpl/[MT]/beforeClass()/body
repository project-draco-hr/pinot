{
  FileUtils.forceMkdir(baseDir);
  FileUtils.forceMkdir(rootDir);
  FileUtils.forceMkdir(tmpDir);
  executorService=Executors.newSingleThreadExecutor();
  nodeId=UUID.randomUUID();
  records=new ArrayList<StarTreeRecord>();
  for (int i=0; i < 100; i++) {
    StarTreeRecordImpl.Builder builder=new StarTreeRecordImpl.Builder();
    builder.setDimensionValue("A","A" + (i % 2));
    builder.setDimensionValue("B","B" + (i % 4));
    builder.setDimensionValue("C","C" + (i % 8));
    builder.setMetricValue("M",1);
    builder.setMetricType("M",MetricType.INT);
    builder.setTime((long)i);
    records.add(builder.build());
  }
  int currentValueId=StarTreeConstants.FIRST_VALUE;
  Map<String,Map<String,Integer>> forwardIndex=new HashMap<String,Map<String,Integer>>();
  for (  String dimensionName : Arrays.asList("A","B","C")) {
    forwardIndex.put(dimensionName,new HashMap<String,Integer>());
    for (int i=0; i < 8; i++) {
      forwardIndex.get(dimensionName).put(dimensionName + i,currentValueId++);
    }
    forwardIndex.get(dimensionName).put(StarTreeConstants.STAR,StarTreeConstants.STAR_VALUE);
    forwardIndex.get(dimensionName).put(StarTreeConstants.OTHER,StarTreeConstants.OTHER_VALUE);
  }
  OutputStream outputStream=new FileOutputStream(new File(rootDir,nodeId + ".buf"));
  StarTreeRecordStoreCircularBufferImpl.fillBuffer(outputStream,Arrays.asList(new DimensionSpec("A"),new DimensionSpec("B"),new DimensionSpec("C")),Arrays.asList(new MetricSpec("M",MetricType.INT)),forwardIndex,records,128,true);
  outputStream.flush();
  outputStream.close();
  outputStream=new FileOutputStream(new File(rootDir,nodeId + ".idx"));
  new ObjectMapper().writeValue(outputStream,forwardIndex);
  outputStream.flush();
  outputStream.close();
  TimeSpec timeSpec=new TimeSpec("hoursSinceEpoch",new TimeGranularity(1,TimeUnit.HOURS),new TimeGranularity(1,TimeUnit.HOURS),new TimeGranularity(128,TimeUnit.HOURS));
  Properties recordStoreFactoryConfig=new Properties();
  StarTreeConfig config=new StarTreeConfig.Builder().setCollection("myCollection").setDimensions(Arrays.asList(new DimensionSpec("A"),new DimensionSpec("B"),new DimensionSpec("C"))).setMetrics(Arrays.asList(new MetricSpec("M",MetricType.INT))).setTime(timeSpec).setRecordStoreFactoryConfig(recordStoreFactoryConfig).setRecordStoreFactoryClass(StarTreeRecordStoreFactoryCircularBufferImpl.class.getCanonicalName()).build();
  starTree=new StarTreeImpl(config,rootDir,new StarTreeNodeImpl(nodeId,StarTreeConstants.STAR,StarTreeConstants.STAR,new ArrayList<String>(),new HashMap<String,String>(),new HashMap<String,StarTreeNode>(),null,null));
  starTree.open();
  File bulkLoadDataDir=new File(tmpDir,"data");
  FileUtils.forceMkdir(bulkLoadDataDir);
  Schema schema=new Schema.Parser().parse(ClassLoader.getSystemResourceAsStream("MyRecord.avsc"));
  DatumWriter<GenericRecord> datumWriter=new GenericDatumWriter<GenericRecord>(schema);
  DataFileWriter<GenericRecord> dataFileWriter=new DataFileWriter<GenericRecord>(datumWriter);
  dataFileWriter.create(schema,new File(bulkLoadDataDir,nodeId + ".avro"));
  for (  StarTreeRecord record : records) {
    dataFileWriter.append(StarTreeUtils.toGenericRecord(config,schema,record,null));
  }
  dataFileWriter.flush();
  dataFileWriter.close();
}
