{
  String nodeId=new String(keyWritable.copyBytes());
  LOG.info("START: processing {}",nodeId);
  Map<DimensionKey,MetricTimeSeries> map=new HashMap<DimensionKey,MetricTimeSeries>();
  List<int[]> leafRecords;
  forwardIndex=StarTreePersistanceUtil.readForwardIndex(nodeId,localInputDataDir + "/data");
  leafRecords=StarTreePersistanceUtil.readLeafRecords(localInputDataDir + "/data",nodeId,dimensionNames.size());
  reverseForwardIndex=StarTreeUtils.toReverseIndex(forwardIndex);
  for (  BytesWritable writable : bootstrapMapOutputValueWritableIterable) {
    BootstrapPhaseMapOutputValue val=BootstrapPhaseMapOutputValue.fromBytes(writable.copyBytes(),metricSchema);
    if (!map.containsKey(val.getDimensionKey())) {
      map.put(val.getDimensionKey(),val.getMetricTimeSeries());
    }
 else {
      map.get(val.getDimensionKey()).aggregate(val.getMetricTimeSeries());
    }
  }
  String fileName=localOutputDataDir + "/data/" + nodeId.toString()+ StarTreeConstants.BUFFER_FILE_SUFFIX;
  CircularBufferUtil.createLeafBufferFile(map,leafRecords,fileName,dimensionNames,dimensionNames,inputCount,reverseForwardIndex);
  LOG.info("Generating forward index");
  StarTreePersistanceUtil.saveLeafNodeForwardIndex(localOutputDataDir + "/data/",forwardIndex,nodeId);
  LOG.info("END: processing {}",nodeId);
}
