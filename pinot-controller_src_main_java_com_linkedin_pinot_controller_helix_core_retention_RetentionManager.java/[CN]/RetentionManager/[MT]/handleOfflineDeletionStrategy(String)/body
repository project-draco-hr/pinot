{
  Map<String,RetentionStrategy> tableToDeletionStrategyMap=new HashMap<String,RetentionStrategy>();
  AbstractTableConfig offlineTableConfig;
  try {
    offlineTableConfig=ZKMetadataProvider.getOfflineTableConfig(_pinotHelixResourceManager.getPropertyStore(),offlineTableName);
  }
 catch (  Exception e) {
    LOGGER.error("Error getting offline table config from property store!",e);
    return tableToDeletionStrategyMap;
  }
  if (offlineTableConfig == null) {
    LOGGER.info("Table config null for table: {}, treating it as refresh only table.",offlineTableName);
    return tableToDeletionStrategyMap;
  }
  if (offlineTableConfig.getValidationConfig().getSegmentPushType().equalsIgnoreCase("REFRESH")) {
    LOGGER.info("Table: {} is a refresh only table.",offlineTableName);
    return tableToDeletionStrategyMap;
  }
  try {
    TimeRetentionStrategy timeRetentionStrategy=new TimeRetentionStrategy(offlineTableConfig.getValidationConfig().getRetentionTimeUnit(),offlineTableConfig.getValidationConfig().getRetentionTimeValue());
    tableToDeletionStrategyMap.put(offlineTableName,timeRetentionStrategy);
  }
 catch (  Exception e) {
    LOGGER.error("Error creating TimeRetentionStrategy for table: {}",offlineTableName,e);
  }
  return tableToDeletionStrategyMap;
}
