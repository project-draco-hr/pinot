{
  Map<String,RetentionStrategy> resourceToDeletionStrategyMap=new HashMap<String,RetentionStrategy>();
  OfflineDataResourceZKMetadata offlineDataResourceZKMetadata=ZKMetadataProvider.getOfflineResourceZKMetadata(_pinotHelixResourceManager.getPropertyStore(),resourceName);
  if (offlineDataResourceZKMetadata.getPushFrequency().equalsIgnoreCase(REFRESH)) {
    LOGGER.info("Resource: " + resourceName + " is a fresh only data resource.");
    return resourceToDeletionStrategyMap;
  }
 else {
    try {
      TimeRetentionStrategy timeRetentionStrategy=new TimeRetentionStrategy(offlineDataResourceZKMetadata.getRetentionTimeUnit(),offlineDataResourceZKMetadata.getRetentionTimeValue());
      resourceToDeletionStrategyMap.put(resourceName,timeRetentionStrategy);
    }
 catch (    Exception e) {
      LOGGER.error("Error creating TimeRetentionStrategy for resource: " + resourceName + ", Exception: "+ e);
    }
    return resourceToDeletionStrategyMap;
  }
}
