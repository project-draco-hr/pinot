{
  String timeField=timeFieldSpec.getColumnName();
  if (timeFieldSpec.getFormat() == null || TimeSpec.SINCE_EPOCH_FORMAT.equals(timeFieldSpec.getFormat())) {
    TimeGranularity dataGranularity=timeFieldSpec.getDataGranularity();
    long startInConvertedUnits=dataGranularity.convertToUnit(start.getMillis());
    long endInConvertedUnits=dataGranularity.convertToUnit(end.getMillis());
    if (startInConvertedUnits == endInConvertedUnits) {
      return String.format(" %s = %s",timeField,startInConvertedUnits);
    }
 else {
      return String.format(" %s >= %s AND %s <= %s",timeField,startInConvertedUnits,timeField,endInConvertedUnits);
    }
  }
 else {
    String timeFormat=null;
    try {
      timeFormat=CACHE_REGISTRY_INSTANCE.getCollectionSchemaCache().get(collection).getTime().getFormat();
    }
 catch (    ExecutionException e) {
      LOGGER.error("Caught exception when reading from cache",e);
    }
    DateTimeFormatter dateTimeFormatter=DateTimeFormat.forPattern(timeFormat).withZoneUTC();
    String startDateTime=dateTimeFormatter.print(start);
    String endDateTime=dateTimeFormatter.print(end);
    if (startDateTime.equals(endDateTime)) {
      return String.format(" %s = '%s'",timeField,startDateTime);
    }
 else {
      return String.format(" %s >= %s AND %s <= %s",timeField,startDateTime,timeField,endDateTime);
    }
  }
}
