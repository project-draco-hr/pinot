{
  AggregationFunction function=aggrFuncContext.getAggregationFunction();
  String aggrFuncName=aggrFuncContext.getFunctionName();
  String[] aggrColumns=aggrFuncContext.getAggregationColumns();
  Preconditions.checkState(aggrColumns.length == 1);
  String aggrColumn=aggrColumns[0];
switch (aggrFuncName) {
case AggregationFunctionFactory.COUNT_AGGREGATION_FUNCTION:
    if (_hasMultiValuedColumns) {
      function.aggregateGroupByMV(length,_docIdToMVGroupKey,resultHolder);
    }
 else {
      function.aggregateGroupBySV(length,_docIdToSVGroupKey,resultHolder);
    }
  return;
case AggregationFunctionFactory.DISTINCTCOUNT_AGGREGATION_FUNCTION:
case AggregationFunctionFactory.DISTINCTCOUNTHLL_AGGREGATION_FUNCTION:
fetchColumnValueHashCodes(aggrColumn,aggrFuncContext.getDictionary(0),length);
if (_hasMultiValuedColumns) {
function.aggregateGroupByMV(length,_docIdToMVGroupKey,resultHolder,_hashCodeArray);
}
 else {
function.aggregateGroupBySV(length,_docIdToSVGroupKey,resultHolder,_hashCodeArray);
}
return;
default :
double[] valueArray=_columnToValueArrayMap.get(aggrColumn);
if (_hasMultiValuedColumns) {
function.aggregateGroupByMV(length,_docIdToMVGroupKey,resultHolder,valueArray);
}
 else {
function.aggregateGroupBySV(length,_docIdToSVGroupKey,resultHolder,valueArray);
}
}
}
