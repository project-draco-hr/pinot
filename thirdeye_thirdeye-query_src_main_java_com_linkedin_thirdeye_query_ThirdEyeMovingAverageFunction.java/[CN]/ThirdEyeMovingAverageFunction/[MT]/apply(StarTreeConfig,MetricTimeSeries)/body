{
  MetricSchema schema=timeSeries.getSchema();
  MetricTimeSeries movingAverage=ThirdEyeFunctionUtils.copyBlankSeriesDouble(metricNames,schema);
  List<Long> sortedTimes=new ArrayList<Long>(timeSeries.getTimeWindowSet());
  Collections.sort(sortedTimes);
  long collectionWindow=config.getTime().getBucket().getUnit().convert(window.getSize(),window.getUnit()) / config.getTime().getBucket().getSize();
  Number[] currentSum=new Number[timeSeries.getSchema().getNumMetrics()];
  Arrays.fill(currentSum,0);
  for (int i=0; i < collectionWindow; i++) {
    long time=sortedTimes.get(i);
    for (int j=0; j < schema.getNumMetrics(); j++) {
      currentSum[j]=NumberUtils.sum(currentSum[j],timeSeries.get(time,schema.getMetricName(j)),schema.getMetricType(j));
    }
  }
  for (int i=(int)collectionWindow; i < sortedTimes.size(); i++) {
    long time=sortedTimes.get(i);
    for (int j=0; j < schema.getNumMetrics(); j++) {
      currentSum[j]=NumberUtils.difference(currentSum[j],timeSeries.get(time - collectionWindow,schema.getMetricName(j)),schema.getMetricType(j));
    }
    for (int j=0; j < schema.getNumMetrics(); j++) {
      currentSum[j]=NumberUtils.sum(currentSum[j],timeSeries.get(time,schema.getMetricName(j)),schema.getMetricType(j));
    }
    for (int j=0; j < schema.getNumMetrics(); j++) {
      String metricName=schema.getMetricName(j);
      if (metricNames.contains(metricName)) {
        movingAverage.increment(time,metricName,currentSum[j]);
      }
    }
  }
  for (  Long time : movingAverage.getTimeWindowSet()) {
    for (    String metricName : schema.getNames()) {
      if (metricNames.contains(metricName)) {
        Number sum=movingAverage.get(time,metricName);
        Number average=NumberUtils.divide(sum,collectionWindow,schema.getMetricType(metricName));
        movingAverage.set(time,metricName,average);
      }
    }
  }
  return movingAverage;
}
