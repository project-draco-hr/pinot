{
  OnlineNormalStatistics trainDataDs=new OnlineNormalStatistics(trainingData);
  NormalDistribution trainDataNormal=new NormalDistribution(trainDataDs.getMean(),Math.sqrt(trainDataDs.getPopulationVariance()));
  LOGGER.info("Training data mean={}, stdev={}",trainDataNormal.getMean(),trainDataNormal.getStandardDeviation());
  ScanIntervalIterator scanWindowIterator=new ScanIntervalIterator(0,monitoringData.length,_minWindowLength,_maxWindowLength,_minIncrement);
  MaxInterval realDataInterval=generateMaxLikelihood(scanWindowIterator,trainingData,monitoringData,trainDataDs);
  if (realDataInterval.getInterval() == null) {
    throw new IllegalStateException("no interval generated");
  }
  LOGGER.info("Generated realDataInterval {}",realDataInterval);
  int numExceeded=0;
  int exceededCountThreshold=(int)(_pValue * _numSimulation);
  double[] simulationBuffer=new double[monitoringData.length];
  for (int ii=0; ii < _numSimulation; ii++) {
    if (_bootstrap) {
      simulateBootstrapInPlace(simulationBuffer,trainingData);
    }
 else {
      simulateGaussuanInPlace(simulationBuffer,trainDataNormal);
    }
    ScanIntervalIterator simulationScanWindowIterator=new ScanIntervalIterator(0,monitoringData.length,_minWindowLength,_maxWindowLength,_minIncrement);
    MaxInterval simulationResult=generateMaxLikelihood(simulationScanWindowIterator,trainingData,simulationBuffer,trainDataDs);
    LOGGER.info("simulation ({}) {} (numExceeded={}) : {}",_bootstrap ? "bootstrap" : "gaussian",ii,numExceeded,simulationResult);
    if (simulationResult.getInterval() != null && realDataInterval.getMaxLikelihood() < simulationResult.getMaxLikelihood()) {
      numExceeded++;
      if (numExceeded >= exceededCountThreshold) {
        break;
      }
    }
  }
  LOGGER.info("real data interval: {} (percentile {})",realDataInterval,1 - (numExceeded / (double)_numSimulation));
  if (numExceeded < exceededCountThreshold) {
    return realDataInterval.getInterval();
  }
 else {
    return null;
  }
}
