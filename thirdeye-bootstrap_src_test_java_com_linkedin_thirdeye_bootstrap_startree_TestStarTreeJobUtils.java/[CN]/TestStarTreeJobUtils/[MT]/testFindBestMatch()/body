{
  List<String> dimensions=Arrays.asList("A","B","C");
  Map<String,Map<String,Integer>> forwardIndex=new HashMap<String,Map<String,Integer>>();
  for (  String dimension : dimensions) {
    forwardIndex.put(dimension,new HashMap<String,Integer>());
    forwardIndex.get(dimension).put(StarTreeConstants.STAR,StarTreeConstants.STAR_VALUE);
    forwardIndex.get(dimension).put(StarTreeConstants.OTHER,StarTreeConstants.OTHER_VALUE);
    forwardIndex.get(dimension).put(dimension + "X",StarTreeConstants.FIRST_VALUE);
    for (int i=0; i < 3; i++) {
      forwardIndex.get(dimension).put(dimension + i,StarTreeConstants.FIRST_VALUE + 1 + i);
    }
  }
  List<int[]> combinations=new ArrayList<int[]>();
  combinations.add(getCombination(forwardIndex,dimensions,Arrays.asList("A0","B0","C0")));
  combinations.add(getCombination(forwardIndex,dimensions,Arrays.asList("A1","B1","C1")));
  combinations.add(getCombination(forwardIndex,dimensions,Arrays.asList("A0","B2","C0")));
  combinations.add(getCombination(forwardIndex,dimensions,Arrays.asList("?","B0","?")));
  combinations.add(getCombination(forwardIndex,dimensions,Arrays.asList("?","B2","C0")));
  combinations.add(getCombination(forwardIndex,dimensions,Arrays.asList("?","?","?")));
  int[] allOther=new int[]{StarTreeConstants.OTHER_VALUE,StarTreeConstants.OTHER_VALUE,StarTreeConstants.OTHER_VALUE};
  int[] oneOther=new int[]{StarTreeConstants.OTHER_VALUE,forwardIndex.get("B").get("B2"),forwardIndex.get("C").get("C0")};
  int[] twoOther=new int[]{StarTreeConstants.OTHER_VALUE,forwardIndex.get("B").get("B0"),StarTreeConstants.OTHER_VALUE};
  int[] res=StarTreeJobUtils.findBestMatch(new DimensionKey(new String[]{"AX","BX","CX"}),dimensions,combinations,forwardIndex);
  Assert.assertEquals(res,allOther);
  res=StarTreeJobUtils.findBestMatch(new DimensionKey(new String[]{"AX","B2","C0"}),dimensions,combinations,forwardIndex);
  Assert.assertEquals(res,oneOther);
  res=StarTreeJobUtils.findBestMatch(new DimensionKey(new String[]{"AX","B0","C1"}),dimensions,combinations,forwardIndex);
  Assert.assertEquals(res,twoOther);
}
