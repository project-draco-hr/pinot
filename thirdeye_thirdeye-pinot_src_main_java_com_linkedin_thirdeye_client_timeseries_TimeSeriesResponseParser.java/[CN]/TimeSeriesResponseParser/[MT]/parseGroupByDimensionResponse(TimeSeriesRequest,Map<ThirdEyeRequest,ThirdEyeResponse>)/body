{
  Map<MetricFunction,Double> metricOnlyData=processAggregateResponse(queryResultMap);
  DoubleKeyMap<MetricFunction,String,Double> metricSumFromGroupByResponse=new DoubleKeyMap<>();
  Map<MetricFunction,Map<String,Map<String,Double>>> metricGroupByDimensionData=processGroupByDimensionResponse(queryResultMap);
  RowBuilderCache rowBuilderCache=new RowBuilderCache();
  for (  Entry<MetricFunction,Map<String,Map<String,Double>>> metricEntry : metricGroupByDimensionData.entrySet()) {
    MetricFunction metricFunction=metricEntry.getKey();
    Map<String,Map<String,Double>> dimensionDataMap=metricEntry.getValue();
    for (    String dimensionName : dimensionDataMap.keySet()) {
      Map<String,Double> map=dimensionDataMap.get(dimensionName);
      double dimensionSum=0.0;
      for (      String dimensionValue : map.keySet()) {
        Double value=map.get(dimensionValue);
        TimeSeriesRow.Builder rowBuilder=rowBuilderCache.get(dimensionName,dimensionValue);
        rowBuilder.addMetric(metricFunction.getMetricName(),value);
      }
      metricSumFromGroupByResponse.put(metricFunction,dimensionName,dimensionSum);
    }
  }
  computeOtherRows(rowBuilderCache,metricOnlyData,metricSumFromGroupByResponse);
  return rowBuilderCache.buildAllRows(timeSeriesRequest.getStart(),timeSeriesRequest.getEnd());
}
