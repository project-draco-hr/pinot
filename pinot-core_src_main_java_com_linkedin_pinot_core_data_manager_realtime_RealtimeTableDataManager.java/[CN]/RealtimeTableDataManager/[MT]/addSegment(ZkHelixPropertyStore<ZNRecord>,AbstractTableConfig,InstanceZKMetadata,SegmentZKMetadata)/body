{
  this._helixPropertyStore=propertyStore;
  String segmentId=segmentZKMetadata.getSegmentName();
  if (segmentZKMetadata instanceof RealtimeSegmentZKMetadata) {
    if (new File(_indexDir,segmentId).exists() && ((RealtimeSegmentZKMetadata)segmentZKMetadata).getStatus() == Status.DONE) {
      if (!_segmentsMap.containsKey(segmentId)) {
synchronized (getGlobalLock()) {
          if (!_segmentsMap.containsKey(segmentId)) {
            IndexSegment segment=ColumnarSegmentLoader.load(new File(_indexDir,segmentId),_readMode,_indexLoadingConfigMetadata);
            _segmentsMap.put(segmentId,new OfflineSegmentDataManager(segment));
            markSegmentAsLoaded(segmentId);
            _referenceCounts.put(segmentId,new AtomicInteger(1));
          }
        }
      }
    }
 else {
      if (!_segmentsMap.containsKey(segmentId)) {
synchronized (getGlobalLock()) {
          if (!_segmentsMap.containsKey(segmentId)) {
            PinotHelixPropertyStoreZnRecordProvider propertyStoreHelper=PinotHelixPropertyStoreZnRecordProvider.forSchema(propertyStore);
            String path=StringUtil.join("/",propertyStoreHelper.getRelativePath(),tableConfig.getValidationConfig().getSchemaName());
            List<String> schemas=propertyStore.getChildNames(path,AccessOption.PERSISTENT);
            List<Integer> schemasIds=new ArrayList<Integer>();
            for (            String id : schemas) {
              schemasIds.add(Integer.parseInt(id));
            }
            Collections.sort(schemasIds);
            String latest=String.valueOf(schemasIds.get(schemasIds.size() - 1));
            LOGGER.info("found schema {} with version {}",tableConfig.getValidationConfig().getSchemaName(),latest);
            ZNRecord record=propertyStoreHelper.get(tableConfig.getValidationConfig().getSchemaName() + "/" + latest);
            SegmentDataManager manager=new RealtimeSegmentDataManager((RealtimeSegmentZKMetadata)segmentZKMetadata,tableConfig,instanceZKMetadata,this,_indexDir.getAbsolutePath(),_readMode,Schema.fromZNRecordV2(record));
            LOGGER.info("Initialize RealtimeSegmentDataManager - " + segmentId);
            _segmentsMap.put(segmentId,manager);
            _loadingSegments.add(segmentId);
            _referenceCounts.put(segmentId,new AtomicInteger(1));
          }
        }
      }
    }
  }
}
