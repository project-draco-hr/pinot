{
  this._helixPropertyStore=propertyStore;
  final String segmentId=inputSegmentZKMetadata.getSegmentName();
  final String tableName=inputSegmentZKMetadata.getTableName();
  if (!(inputSegmentZKMetadata instanceof RealtimeSegmentZKMetadata)) {
    LOGGER.warn("Got called with an unexpected instance object:{},table {}, segment {}",inputSegmentZKMetadata.getClass().getSimpleName(),tableName,segmentId);
    return;
  }
  RealtimeSegmentZKMetadata segmentZKMetadata=(RealtimeSegmentZKMetadata)inputSegmentZKMetadata;
  LOGGER.info("Attempting to add realtime segment {} for table {}",segmentId,tableName);
  if (new File(_indexDir,segmentId).exists() && (segmentZKMetadata).getStatus() == Status.DONE) {
    if (_segmentsMap.containsKey(segmentId)) {
      LOGGER.warn("Got reload for segment already on disk {} table {}, have {}",segmentId,tableName,_segmentsMap.get(segmentId).getClass().getSimpleName());
      return;
    }
    IndexSegment segment=ColumnarSegmentLoader.load(new File(_indexDir,segmentId),_readMode,_indexLoadingConfigMetadata);
    addSegment(segment);
    markSegmentAsLoaded(segmentId);
  }
 else {
    if (_segmentsMap.containsKey(segmentId)) {
      LOGGER.warn("Got reload for segment not on disk {} table {}, have {}",segmentId,tableName,_segmentsMap.get(segmentId).getClass().getSimpleName());
      return;
    }
    PinotHelixPropertyStoreZnRecordProvider propertyStoreHelper=PinotHelixPropertyStoreZnRecordProvider.forSchema(propertyStore);
    ZNRecord record=propertyStoreHelper.get(tableConfig.getValidationConfig().getSchemaName());
    LOGGER.info("Found schema {} ",tableConfig.getValidationConfig().getSchemaName());
    Schema schema=SchemaUtils.fromZNRecord(record);
    if (!isValid(schema,tableConfig.getIndexingConfig())) {
      LOGGER.error("Not adding segment {}",segmentId);
      throw new RuntimeException("Mismatching schema/table config for " + _tableName);
    }
    SegmentDataManager manager;
    if (SegmentName.isHighLevelConsumerSegmentName(segmentId)) {
      manager=new HLRealtimeSegmentDataManager(segmentZKMetadata,tableConfig,instanceZKMetadata,this,_indexDir.getAbsolutePath(),_readMode,SchemaUtils.fromZNRecord(record),_serverMetrics);
    }
 else {
      LLCRealtimeSegmentZKMetadata llcSegmentMetadata=(LLCRealtimeSegmentZKMetadata)segmentZKMetadata;
      if (segmentZKMetadata.getStatus().equals(Status.DONE)) {
        final String uri=llcSegmentMetadata.getDownloadUrl();
        File tempSegmentFolder=new File(_indexDir,"tmp-" + String.valueOf(System.currentTimeMillis()));
        File tempFile=new File(_indexDir,segmentId + ".tar.gz");
        SegmentFetcherFactory.getSegmentFetcherBasedOnURI(uri).fetchSegmentToLocal(uri,tempFile);
        LOGGER.info("Downloaded file from {} to {}; Length of downloaded file: {}",uri,tempFile,tempFile.length());
        TarGzCompressionUtils.unTar(tempFile,tempSegmentFolder);
        FileUtils.deleteQuietly(tempFile);
        FileUtils.moveDirectory(tempSegmentFolder.listFiles()[0],new File(_indexDir,segmentId));
        FileUtils.deleteQuietly(tempSegmentFolder);
        LOGGER.info("Replacing LLC Segment {}",segmentId);
        replaceLLSegment(segmentId);
        return;
      }
      manager=new LLRealtimeSegmentDataManager(segmentZKMetadata,tableConfig,instanceZKMetadata,this,_indexDir.getAbsolutePath(),SchemaUtils.fromZNRecord(record),_serverMetrics);
    }
    LOGGER.info("Initialize RealtimeSegmentDataManager - " + segmentId);
    try {
      _rwLock.writeLock().lock();
      _segmentsMap.put(segmentId,manager);
    }
  finally {
      _rwLock.writeLock().unlock();
    }
    _loadingSegments.add(segmentId);
  }
}
