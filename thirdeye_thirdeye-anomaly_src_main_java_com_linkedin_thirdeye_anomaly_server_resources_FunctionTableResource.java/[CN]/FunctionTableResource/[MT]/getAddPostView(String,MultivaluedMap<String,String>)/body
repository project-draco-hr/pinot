{
  ThirdEyeAnomalyDetectionConfiguration config=collectionToConfigMap.get(collection);
  String functionName=formParams.getFirst("Name");
  String functionDescription=formParams.getFirst("Description");
  FunctionTableRow functionRow;
switch (config.getMode()) {
case GENERIC:
{
      functionRow=parseGenericFunctionForm(config,functionName,functionDescription,formParams);
      break;
    }
case RULEBASED:
{
    functionRow=parseRuleBasedFunctionForm(config,functionName,functionDescription,formParams);
    break;
  }
default :
throw new IllegalStateException();
}
try {
functionRow.insert(config.getAnomalyDatabaseConfig());
}
 catch (Exception e) {
StringWriter sw=new StringWriter();
e.printStackTrace(new PrintWriter(sw));
return Response.serverError().entity("An error occurred: " + sw.toString()).build();
}
return Response.ok().entity(formResponseHtmlHelper("Success!",SLASH.join("",collection))).build();
}
