{
  Map<String,DefaultColumnAction> defaultColumnActionMap=new HashMap<>();
  Collection<String> columnsInSchema=schema.getColumnNames();
  for (  String column : columnsInSchema) {
    FieldSpec fieldSpec=schema.getFieldSpecFor(column);
    FieldSpec.FieldType fieldType=fieldSpec.getFieldType();
    ColumnMetadata columnMetadata=segmentMetadata.getColumnMetadataFor(column);
    if (columnMetadata != null) {
      if (columnMetadata.isAutoGenerated()) {
        FieldSpec.FieldType fieldTypeFromMetadata=columnMetadata.getFieldType();
        if (fieldTypeFromMetadata != fieldType) {
          String failureMessage="Field type: " + fieldTypeFromMetadata + " for auto-generated column: "+ column+ " does not match field type: "+ fieldType+ " in schema, throw exception to drop and re-download the segment.";
          LOGGER.error(failureMessage);
          throw new RuntimeException(failureMessage);
        }
        FieldSpec.DataType dataTypeFromMetadata=columnMetadata.getDataType();
        FieldSpec.DataType dataTypeFromSchema=fieldSpec.getDataType();
        boolean isSingleValueInMetadata=columnMetadata.isSingleValue();
        boolean isSingleValueInSchema=fieldSpec.isSingleValueField();
        String defaultValueFromMetadata=columnMetadata.getDefaultNullValueString();
        String defaultValueFromSchema=fieldSpec.getDefaultNullValue().toString();
        if (dataTypeFromMetadata != dataTypeFromSchema || isSingleValueInMetadata != isSingleValueInSchema || !defaultValueFromSchema.equals(defaultValueFromMetadata)) {
switch (fieldType) {
case DIMENSION:
            defaultColumnActionMap.put(column,DefaultColumnAction.UPDATE_DIMENSION);
          break;
case METRIC:
        defaultColumnActionMap.put(column,DefaultColumnAction.UPDATE_METRIC);
      break;
default :
    throw new UnsupportedOperationException("Unsupported updating default column for column: " + column + " with field type: "+ fieldType);
}
}
}
}
 else {
switch (fieldType) {
case DIMENSION:
defaultColumnActionMap.put(column,DefaultColumnAction.ADD_DIMENSION);
break;
case METRIC:
defaultColumnActionMap.put(column,DefaultColumnAction.ADD_METRIC);
break;
default :
throw new UnsupportedOperationException("Unsupported adding default column for column: " + column + " with field type: "+ fieldType);
}
}
}
Set<String> columnsInSegment=segmentMetadata.getAllColumns();
for (String column : columnsInSegment) {
if (!columnsInSchema.contains(column)) {
ColumnMetadata columnMetadata=segmentMetadata.getColumnMetadataFor(column);
if (columnMetadata.isAutoGenerated()) {
FieldSpec.FieldType fieldType=columnMetadata.getFieldType();
switch (fieldType) {
case DIMENSION:
defaultColumnActionMap.put(column,DefaultColumnAction.REMOVE_DIMENSION);
break;
case METRIC:
defaultColumnActionMap.put(column,DefaultColumnAction.REMOVE_METRIC);
break;
default :
throw new UnsupportedOperationException("Unsupported removing default column for column: " + column + " with field type: "+ fieldType);
}
}
}
}
return defaultColumnActionMap;
}
