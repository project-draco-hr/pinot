{
synchronized (kafkaConsumers) {
    if (!starTreeManager.getCollections().contains(collection)) {
      throw new IllegalArgumentException("No collection " + collection);
    }
    File collectionDir=new File(rootDir,collection);
    File kafkaFile=new File(collectionDir,StarTreeConstants.KAFKA_CONFIG_FILE_NAME);
    if (kafkaFile.exists()) {
      StarTreeConfig starTreeConfig=OBJECT_MAPPER.readValue(new File(collectionDir,StarTreeConstants.CONFIG_FILE_NAME),StarTreeConfig.class);
      ThirdEyeKafkaConfig kafkaConfig=OBJECT_MAPPER.readValue(kafkaFile,ThirdEyeKafkaConfig.class);
      starTreeConfig.getRecordStoreFactoryConfig().setProperty(StarTreeRecordStoreFactoryDefaultImpl.PROP_METRIC_STORE_MUTABLE,"true");
      File latestDataDir=StorageUtils.findLatestDataDir(collectionDir);
      if (latestDataDir == null) {
        throw new IllegalStateException("No available star tree");
      }
      File starTreeFile=new File(latestDataDir,StarTreeConstants.TREE_FILE_NAME);
      FileInputStream fis=new FileInputStream(new File(latestDataDir,StarTreeConstants.TREE_FILE_NAME));
      ObjectInputStream ois=new ObjectInputStream(fis);
      StarTreeNode root=(StarTreeNode)ois.readObject();
      LOGGER.info("Using tree {} from {} for collection {}",root.getId(),latestDataDir,collection);
      File kafkaDataDir=new File(collectionDir,StorageUtils.getDataDirName(root.getId().toString(),"KAFKA",new DateTime(),null));
      FileUtils.forceMkdir(kafkaDataDir);
      FileUtils.copyFile(starTreeFile,new File(kafkaDataDir,StarTreeConstants.TREE_FILE_NAME));
      FileUtils.copyDirectory(new File(latestDataDir,StarTreeConstants.DIMENSION_STORE),new File(kafkaDataDir,StarTreeConstants.DIMENSION_STORE));
      LOGGER.info("Bootstrapped {} with tree / dimension store from {}",kafkaDataDir,latestDataDir);
      StarTree mutableTree=new StarTreeImpl(starTreeConfig,kafkaDataDir,root);
      mutableTree.open();
      ThirdEyeKafkaConsumer kafkaConsumer=new ThirdEyeKafkaConsumer(mutableTree,kafkaConfig,executorService,persistScheduler,metricRegistry,kafkaDataDir);
      kafkaConsumers.put(collection,kafkaConsumer);
      kafkaConsumer.start();
      LOGGER.info("Started kafka consumer for {}",collection);
    }
 else {
      throw new IllegalArgumentException("Could not find " + StarTreeConstants.KAFKA_CONFIG_FILE_NAME + " for collection "+ collection);
    }
  }
}
