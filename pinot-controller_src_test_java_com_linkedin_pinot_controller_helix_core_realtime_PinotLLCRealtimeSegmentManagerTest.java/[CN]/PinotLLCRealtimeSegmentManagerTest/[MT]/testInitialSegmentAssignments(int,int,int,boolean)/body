{
  MockPinotLLCRealtimeSegmentManager segmentManager=new MockPinotLLCRealtimeSegmentManager(true,null);
  final String topic="someTopic";
  final String rtTableName="table_REALTIME";
  List<String> instances=getInstanceList(nInstances);
  final long startOffset=81L;
  IdealState idealState=PinotTableIdealStateBuilder.buildEmptyKafkaConsumerRealtimeIdealStateFor(rtTableName,nReplicas);
  segmentManager.setupHelixEntries(topic,rtTableName,nPartitions,instances,nReplicas,startOffset,idealState,!existingIS);
  final String actualRtTableName=segmentManager._realtimeTableName;
  final Map<String,List<String>> idealStateEntries=segmentManager._idealStateEntries;
  final int idealStateNReplicas=segmentManager._nReplicas;
  final List<String> propStorePaths=segmentManager._paths;
  final List<ZNRecord> propStoreEntries=segmentManager._records;
  final boolean createNew=segmentManager._createNew;
  Assert.assertEquals(propStorePaths.size(),nPartitions);
  Assert.assertEquals(propStoreEntries.size(),nPartitions);
  Assert.assertEquals(idealStateEntries.size(),nPartitions);
  Assert.assertEquals(actualRtTableName,rtTableName);
  Assert.assertEquals(createNew,!existingIS);
  Assert.assertEquals(idealStateNReplicas,nReplicas);
  Map<Integer,ZNRecord> segmentPropStoreMap=new HashMap<>(propStorePaths.size());
  Map<Integer,String> segmentPathsMap=new HashMap<>(propStorePaths.size());
  for (  String path : propStorePaths) {
    String segNameStr=path.split("/")[3];
    int partition=new LLCSegmentName(segNameStr).getPartitionId();
    segmentPathsMap.put(partition,path);
  }
  for (  ZNRecord znRecord : propStoreEntries) {
    LLCRealtimeSegmentZKMetadata metadata=new LLCRealtimeSegmentZKMetadata(znRecord);
    segmentPropStoreMap.put(new LLCSegmentName(metadata.getSegmentName()).getPartitionId(),znRecord);
  }
  Assert.assertEquals(segmentPathsMap.size(),nPartitions);
  Assert.assertEquals(segmentPropStoreMap.size(),nPartitions);
  for (int partition=0; partition < nPartitions; partition++) {
    final LLCRealtimeSegmentZKMetadata metadata=new LLCRealtimeSegmentZKMetadata(segmentPropStoreMap.get(partition));
    metadata.toString();
    ZNRecord znRecord=metadata.toZNRecord();
    LLCRealtimeSegmentZKMetadata metadataCopy=new LLCRealtimeSegmentZKMetadata(znRecord);
    Assert.assertEquals(metadata,metadataCopy);
    final String path=segmentPathsMap.get(partition);
    final String segmentName=metadata.getSegmentName();
    Assert.assertEquals(metadata.getStartOffset(),startOffset);
    Assert.assertEquals(path,"/SEGMENTS/" + rtTableName + "/"+ segmentName);
    LLCSegmentName llcSegmentName=new LLCSegmentName(segmentName);
    Assert.assertEquals(llcSegmentName.getPartitionId(),partition);
    Assert.assertEquals(llcSegmentName.getTableName(),TableNameBuilder.extractRawTableName(rtTableName));
    Assert.assertEquals(metadata.getNumReplicas(),nReplicas);
  }
}
