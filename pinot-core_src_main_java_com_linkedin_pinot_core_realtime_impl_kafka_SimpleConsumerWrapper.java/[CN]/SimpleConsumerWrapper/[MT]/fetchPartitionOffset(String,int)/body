{
  Preconditions.checkNotNull(requestedOffset);
  final long offsetRequestTime;
  if (requestedOffset.equalsIgnoreCase("largest")) {
    offsetRequestTime=kafka.api.OffsetRequest.LatestTime();
  }
 else   if (requestedOffset.equalsIgnoreCase("smallest")) {
    offsetRequestTime=kafka.api.OffsetRequest.EarliestTime();
  }
 else   if (requestedOffset.equalsIgnoreCase("testDummy")) {
    return -1L;
  }
 else {
    throw new IllegalArgumentException("Unknown initial offset value " + requestedOffset);
  }
  int kafkaErrorCount=0;
  final int MAX_KAFKA_ERROR_COUNT=10;
  final long endTime=System.currentTimeMillis() + timeoutMillis;
  while (System.currentTimeMillis() < endTime) {
    while (_currentState.getStateValue() != ConsumerState.CONNECTED_TO_PARTITION_LEADER && System.currentTimeMillis() < endTime) {
      _currentState.process();
    }
    if (_currentState.getStateValue() != ConsumerState.CONNECTED_TO_PARTITION_LEADER && endTime <= System.currentTimeMillis()) {
      throw new TimeoutException();
    }
    OffsetRequest request=new OffsetRequest(Collections.singletonMap(new TopicAndPartition(_topic,_partition),new PartitionOffsetRequestInfo(offsetRequestTime,1)),kafka.api.OffsetRequest.CurrentVersion(),_clientId);
    OffsetResponse offsetResponse;
    try {
      offsetResponse=_simpleConsumer.getOffsetsBefore(request);
    }
 catch (    Exception e) {
      _currentState.handleConsumerException(e);
      continue;
    }
    final short errorCode=offsetResponse.errorCode(_topic,_partition);
    if (errorCode == Errors.NONE.code()) {
      long offset=offsetResponse.offsets(_topic,_partition)[0];
      if (offset == 0L) {
        LOGGER.warn("Fetched offset of 0 for topic {} and partition {}, is this a newly created topic?",_topic,_partition);
      }
      return offset;
    }
 else     if (errorCode == Errors.LEADER_NOT_AVAILABLE.code()) {
      Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
    }
 else {
      kafkaErrorCount++;
      if (MAX_KAFKA_ERROR_COUNT < kafkaErrorCount) {
        throw Errors.forCode(errorCode).exception();
      }
      Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
    }
  }
  throw new TimeoutException();
}
