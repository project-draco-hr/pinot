{
  int unknownTopicReplyCount=0;
  final int MAX_UNKNOWN_TOPIC_REPLY_COUNT=10;
  int kafkaErrorCount=0;
  final int MAX_KAFKA_ERROR_COUNT=10;
  while (true) {
    while (!_currentState.isConnectedToKafkaBroker()) {
      _currentState.process();
    }
    TopicMetadataResponse topicMetadataResponse=null;
    try {
      topicMetadataResponse=_simpleConsumer.send(new TopicMetadataRequest(Collections.singletonList(topic)));
    }
 catch (    Exception e) {
      _currentState.handleConsumerException(e);
      continue;
    }
    final TopicMetadata topicMetadata=topicMetadataResponse.topicsMetadata().get(0);
    final short errorCode=topicMetadata.errorCode();
    if (errorCode == Errors.NONE.code()) {
      return topicMetadata.partitionsMetadata().size();
    }
 else     if (errorCode == Errors.LEADER_NOT_AVAILABLE.code()) {
      Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
    }
 else     if (errorCode == Errors.INVALID_TOPIC_EXCEPTION.code()) {
      throw new RuntimeException("Invalid topic name " + topic);
    }
 else     if (errorCode == Errors.UNKNOWN_TOPIC_OR_PARTITION.code()) {
      if (MAX_UNKNOWN_TOPIC_REPLY_COUNT < unknownTopicReplyCount) {
        throw new RuntimeException("Topic " + topic + " does not exist");
      }
 else {
        unknownTopicReplyCount++;
        Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
      }
    }
 else {
      kafkaErrorCount++;
      if (MAX_KAFKA_ERROR_COUNT < kafkaErrorCount) {
        throw Errors.forCode(errorCode).exception();
      }
      Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
    }
  }
}
