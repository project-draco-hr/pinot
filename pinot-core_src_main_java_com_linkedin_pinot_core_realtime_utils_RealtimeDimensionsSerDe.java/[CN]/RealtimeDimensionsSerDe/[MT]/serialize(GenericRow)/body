{
  List<Integer> rowConvertedToDictionaryId=new LinkedList<Integer>();
  List<Integer> columnOffsets=new LinkedList<Integer>();
  int pointer=0;
  for (int i=0; i < dataSchema.getDimensionNames().size(); i++) {
    columnOffsets.add(pointer);
    if (dataSchema.getFieldSpecFor(dataSchema.getDimensionNames().get(i)).isSingleValueField()) {
      rowConvertedToDictionaryId.add(dictionaryMap.get(dataSchema.getDimensionNames().get(i)).indexOf(row.getValue(dataSchema.getDimensionNames().get(i))));
      pointer+=1;
    }
 else {
      Object[] multivalues=(Object[])row.getValue(dataSchema.getDimensionNames().get(i));
      if (multivalues != null && multivalues.length > 0) {
        Arrays.sort(multivalues);
        for (        Object multivalue : multivalues) {
          rowConvertedToDictionaryId.add(dictionaryMap.get(dataSchema.getDimensionNames().get(i)).indexOf(multivalue));
        }
        pointer+=multivalues.length;
      }
 else {
        rowConvertedToDictionaryId.add(0);
        pointer+=1;
      }
    }
    if (i == dataSchema.getDimensionNames().size() - 1) {
      columnOffsets.add(pointer);
    }
  }
  ByteBuffer buff=ByteBuffer.allocate((columnOffsets.size() + rowConvertedToDictionaryId.size()) * 4);
  for (  Integer offset : columnOffsets) {
    buff.putInt(offset + columnOffsets.size());
  }
  for (  Integer dicId : rowConvertedToDictionaryId) {
    buff.putInt(dicId);
  }
  return buff;
}
