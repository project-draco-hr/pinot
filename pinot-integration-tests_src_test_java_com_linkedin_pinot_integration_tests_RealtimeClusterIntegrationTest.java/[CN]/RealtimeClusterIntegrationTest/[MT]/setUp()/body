{
  startZk();
  kafkaStarter=KafkaTestUtils.startServer(KafkaTestUtils.DEFAULT_KAFKA_PORT,KafkaTestUtils.DEFAULT_BROKER_ID,KafkaTestUtils.DEFAULT_ZK_STR,KafkaTestUtils.getDefaultKafkaConfiguration());
  KafkaTestUtils.createTopic(KAFKA_TOPIC,KafkaTestUtils.DEFAULT_ZK_STR);
  startController();
  startBroker();
  startServer();
  TarGzCompressionUtils.unTar(new File(TestUtils.getFileFromResourceUrl(OfflineClusterIntegrationTest.class.getClassLoader().getResource("On_Time_On_Time_Performance_2014_100k_subset.tar.gz"))),_tmpDir);
  _tmpDir.mkdirs();
  final List<File> avroFiles=new ArrayList<File>(SEGMENT_COUNT);
  for (int segmentNumber=1; segmentNumber <= SEGMENT_COUNT; ++segmentNumber) {
    avroFiles.add(new File(_tmpDir.getPath() + "/On_Time_On_Time_Performance_2014_" + segmentNumber+ ".avro"));
  }
  createRealtimeResource("myresource","DaysSinceEpoch","daysSinceEpoch",KafkaTestUtils.DEFAULT_ZK_STR,KAFKA_TOPIC,avroFiles.get(0));
  addTableToRealtimeResource("myresource","mytable","DaysSinceEpoch","daysSinceEpoch");
  ExecutorService executor=Executors.newCachedThreadPool();
  Class.forName("org.h2.Driver");
  _connection=DriverManager.getConnection("jdbc:h2:mem:");
  executor.execute(new Runnable(){
    @Override public void run(){
      createH2SchemaAndInsertAvroFiles(avroFiles,_connection);
    }
  }
);
  executor.execute(new Runnable(){
    @Override public void run(){
      _queryGenerator=new QueryGenerator(avroFiles,"'myresource.mytable'","mytable");
    }
  }
);
  executor.execute(new Runnable(){
    @Override public void run(){
      Properties properties=new Properties();
      properties.put("metadata.broker.list","localhost:" + KafkaTestUtils.DEFAULT_KAFKA_PORT);
      properties.put("serializer.class","kafka.serializer.NullEncoder");
      properties.put("request.required.acks","1");
      ProducerConfig producerConfig=new ProducerConfig(properties);
      Producer<String,byte[]> producer=new Producer<String,byte[]>(producerConfig);
      for (      File avroFile : avroFiles) {
        try {
          ByteArrayOutputStream outputStream=new ByteArrayOutputStream(65536);
          DataFileStream<GenericRecord> reader=AvroUtils.getAvroReader(avroFile);
          GenericDatumWriter<GenericRecord> datumWriter=new GenericDatumWriter<GenericRecord>(reader.getSchema());
          DataFileWriter<GenericRecord> dataFileWriter=new DataFileWriter<GenericRecord>(datumWriter);
          dataFileWriter.create(reader.getSchema(),outputStream);
          for (          GenericRecord genericRecord : reader) {
            outputStream.reset();
            dataFileWriter.append(genericRecord);
            KeyedMessage<String,byte[]> data=new KeyedMessage<String,byte[]>(KAFKA_TOPIC,outputStream.toByteArray());
            producer.send(data);
          }
          outputStream.close();
          reader.close();
          LOGGER.info("Finished writing " + avroFile.getName());
        }
 catch (        Exception e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
      }
    }
  }
);
  executor.shutdown();
  executor.awaitTermination(10,TimeUnit.MINUTES);
  int pinotRecordCount, h2RecordCount;
  Statement statement=_connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
  do {
    Thread.sleep(5000L);
    JSONObject response=postQuery("select count(*) from 'myresource.mytable'");
    JSONArray aggregationResultsArray=response.getJSONArray("aggregationResults");
    JSONObject firstAggregationResult=aggregationResultsArray.getJSONObject(0);
    String pinotValue=firstAggregationResult.getString("value");
    pinotRecordCount=Integer.parseInt(pinotValue);
    statement.execute("select count(*) from mytable");
    ResultSet rs=statement.getResultSet();
    rs.first();
    h2RecordCount=rs.getInt(1);
    rs.close();
    System.out.println("H2 record count: " + h2RecordCount + "\tPinot record count: "+ pinotRecordCount);
  }
 while (h2RecordCount != pinotRecordCount);
}
