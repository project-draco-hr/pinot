{
  if (pairs == null || pairs.isEmpty()) {
    return BlockUtils.emptyBlockDocIdSetIterator();
  }
  return new BlockDocIdIterator(){
    int pairPointer=0;
    int counter=pairs.get(0).getLeft() - 1;
    @Override public int advance(    int targetDocId){
      if (pairPointer == pairs.size() || targetDocId > pairs.get(pairs.size() - 1).getRight()) {
        pairPointer=pairs.size();
        return (counter=Constants.EOF);
      }
      long start=System.nanoTime();
      while (pairPointer < pairs.size()) {
        if (pairs.get(pairPointer).getLeft() > targetDocId) {
          counter=pairs.get(pairPointer).getLeft();
          break;
        }
 else         if (targetDocId >= pairs.get(pairPointer).getLeft() && targetDocId <= pairs.get(pairPointer).getRight()) {
          counter=targetDocId;
          break;
        }
        pairPointer++;
      }
      if (pairPointer == pairs.size()) {
        counter=Constants.EOF;
      }
      long end=System.nanoTime();
      timeMeasure.addAndGet(end - start);
      return counter;
    }
    @Override public int next(){
      if (pairPointer == pairs.size() || counter > pairs.get(pairs.size() - 1).getRight()) {
        pairPointer=pairs.size();
        return (counter=Constants.EOF);
      }
      long start=System.nanoTime();
      counter=counter + 1;
      if (pairPointer < pairs.size() && counter > pairs.get(pairPointer).getRight()) {
        pairPointer++;
        if (pairPointer == pairs.size()) {
          counter=Constants.EOF;
        }
 else {
          counter=pairs.get(pairPointer).getLeft();
        }
      }
      long end=System.nanoTime();
      timeMeasure.addAndGet(end - start);
      return counter;
    }
    @Override public int currentDocId(){
      return counter;
    }
  }
;
}
