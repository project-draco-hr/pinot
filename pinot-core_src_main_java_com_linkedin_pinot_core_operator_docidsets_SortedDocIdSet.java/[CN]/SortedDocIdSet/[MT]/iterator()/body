{
  if (pairs == null || pairs.isEmpty()) {
    return BlockUtils.emptyBlockDocIdSetIterator();
  }
  return new BlockDocIdIterator(){
    int counter=pairs.get(0).getLeft();
    int arrayPointer=0;
    @Override public int advance(    int targetDocId){
      if (targetDocId > pairs.get(pairs.size() - 1).getRight()) {
        return (counter=Constants.EOF);
      }
      long start=System.nanoTime();
      for (int i=0; i < pairs.size(); i++) {
        if (pairs.get(i).getLeft() > targetDocId) {
          counter=pairs.get(i).getLeft();
          break;
        }
 else         if (targetDocId >= pairs.get(i).getLeft() && targetDocId <= pairs.get(i).getRight()) {
          counter=targetDocId;
          break;
        }
      }
      long end=System.nanoTime();
      timeMeasure.addAndGet(end - start);
      return counter;
    }
    @Override public int next(){
      if (counter > pairs.get(pairs.size() - 1).getRight()) {
        return (counter=Constants.EOF);
      }
      long start=System.nanoTime();
      for (int i=0; i < pairs.size(); i++) {
        if (counter >= pairs.get(i).getLeft() && counter <= pairs.get(i).getRight()) {
          break;
        }
      }
      long end=System.nanoTime();
      timeMeasure.addAndGet(end - start);
      int ret=counter;
      counter=counter + 1;
      return ret;
    }
    @Override public int currentDocId(){
      return counter;
    }
  }
;
}
