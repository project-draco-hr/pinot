{
  DimensionKeyGenerator dimensionKeyGenerator=new DimensionKeyGenerator(schemaDimensions);
  List<String> metrics=new ArrayList<>(response.getMetrics());
  Set<String> metricSet=new HashSet<>(metrics);
  List<MetricType> types=Collections.nCopies(metrics.size(),MetricType.DOUBLE);
  MetricSchema metricSchema=new MetricSchema(metrics,types);
  SetMultimap<DimensionKey,TimeSeriesRow> dimensionKeyToRows=HashMultimap.create();
  for (int i=0; i < response.getNumRows(); i++) {
    TimeSeriesRow row=response.getRow(i);
    DimensionKey dimensionKey=dimensionKeyGenerator.get(row.getDimensionName(),row.getDimensionValue());
    dimensionKeyToRows.put(dimensionKey,row);
  }
  Map<DimensionKey,MetricTimeSeries> result=new HashMap<>();
  for (  Entry<DimensionKey,Collection<TimeSeriesRow>> entry : dimensionKeyToRows.asMap().entrySet()) {
    DimensionKey key=entry.getKey();
    MetricTimeSeries metricTimeSeries=new MetricTimeSeries(metricSchema);
    result.put(key,metricTimeSeries);
    for (    TimeSeriesRow timeSeriesRow : entry.getValue()) {
      long timestamp=timeSeriesRow.getStart();
      for (      TimeSeriesMetric metric : timeSeriesRow.getMetrics()) {
        String metricName=metric.getMetricName();
        if (metricSet.contains(metricName)) {
          Double value=metric.getValue();
          metricTimeSeries.increment(timestamp,metricName,value);
        }
      }
    }
  }
  return result;
}
