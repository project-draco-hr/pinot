{
  for (  String collection : manager.getCollections()) {
    for (    StarTree starTree : manager.getStarTrees(collection).values()) {
      Set<StarTreeNode> leafNodes=new HashSet<StarTreeNode>();
      StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTree.getRoot());
      Map<UUID,NodeStats> allNodeStats=new HashMap<UUID,NodeStats>();
      for (      StarTreeNode leafNode : leafNodes) {
        allNodeStats.put(leafNode.getId(),new NodeStats());
      }
      File dimensionStoreDir=new File(PATH_JOINER.join(rootDir,collection,StarTreeConstants.DATA_DIR_PREFIX,StarTreeConstants.DIMENSION_STORE));
      File[] dimensionIndexFiles=dimensionStoreDir.listFiles(INDEX_FILE_FILTER);
      if (dimensionIndexFiles != null) {
        for (        File dimensionIndexFile : dimensionIndexFiles) {
          List<DimensionIndexEntry> indexEntries=StorageUtils.readDimensionIndex(dimensionIndexFile);
          for (          DimensionIndexEntry indexEntry : indexEntries) {
            NodeStats nodeStats=allNodeStats.get(indexEntry.getNodeId());
            if (nodeStats == null) {
              throw new IllegalStateException("Found node in dimension index which does not exist in tree: " + "nodeId=" + indexEntry.getNodeId() + "; indexFileId="+ indexEntry.getFileId());
            }
            nodeStats.incrementDimensionIndexCount();
          }
        }
      }
      File metricStoreDir=new File(PATH_JOINER.join(rootDir,collection,StarTreeConstants.DATA_DIR_PREFIX,StarTreeConstants.METRIC_STORE));
      File[] metricIndexFiles=metricStoreDir.listFiles(INDEX_FILE_FILTER);
      if (metricIndexFiles != null) {
        for (        File metricIndexFile : metricIndexFiles) {
          List<MetricIndexEntry> indexEntries=StorageUtils.readMetricIndex(metricIndexFile);
          for (          MetricIndexEntry indexEntry : indexEntries) {
            NodeStats nodeStats=allNodeStats.get(indexEntry.getNodeId());
            if (nodeStats == null) {
              throw new IllegalStateException("Found node in metric index which does not exist in tree: " + "nodeId=" + indexEntry.getNodeId() + "; indexFileId="+ indexEntry.getFileId());
            }
            nodeStats.incrementMetricIndexCount();
            nodeStats.addTimeRange(indexEntry.getTimeRange());
          }
        }
      }
      Integer metricIndexCount=null;
      for (      StarTreeNode leafNode : leafNodes) {
        NodeStats nodeStats=allNodeStats.get(leafNode.getId());
        if (nodeStats == null) {
          throw new IllegalStateException("No node stats for leaf " + leafNode.getId());
        }
        if (metricIndexCount == null) {
          metricIndexCount=nodeStats.getMetricIndexCount();
        }
        if (nodeStats.getDimensionIndexCount() != 1) {
          throw new IllegalStateException("There must be one and only one dimension index for node " + leafNode.getId());
        }
        if (metricIndexCount != nodeStats.getMetricIndexCount()) {
          throw new IllegalStateException("There are " + nodeStats.getMetricIndexCount() + " metric index entries for node "+ leafNode.getId()+ ", but expected "+ metricIndexCount+ ". This probably indicates some segments were lost");
        }
        if (leafNode.getRecordStore().getRecordCountEstimate() > 0) {
          if (!leafNode.getRecordStore().getMaxTime().equals(nodeStats.getMaxTimeInIndex())) {
            throw new IllegalStateException("Record store max time differs from that in index: " + leafNode.getRecordStore().getMaxTime() + " vs "+ nodeStats.getMaxTimeInIndex()+ " for node "+ leafNode.getId());
          }
          if (!leafNode.getRecordStore().getMinTime().equals(nodeStats.getMinTimeInIndex())) {
            throw new IllegalStateException("Record store min time differs from that in index: " + leafNode.getRecordStore().getMinTime() + " vs "+ nodeStats.getMinTimeInIndex()+ " for node "+ leafNode.getId());
          }
        }
      }
    }
  }
  return Result.healthy();
}
