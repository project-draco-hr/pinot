{
  List<AnomalyDetectionDriverConfig> collectionDriverConfigurations=thirdEyeAnomalyDetectionConfig.getCollections();
  AnomalyDatabaseConfig anomalyDatabase=thirdEyeAnomalyDetectionConfig.getAnomalyDatabase();
  AnomalyDetectionFunctionFactory functionFactory;
switch (thirdEyeAnomalyDetectionConfig.getMode()) {
case RuleBased:
{
      functionFactory=new RuleBasedFunctionFactory();
      break;
    }
case Generic:
{
    functionFactory=new GenericFunctionFactory();
    break;
  }
default :
{
  functionFactory=null;
  break;
}
}
List<AnomalyDetectionTask> tasks=null;
try {
tasks=new AnomalyDetectionTaskBuilder(collectionDriverConfigurations,anomalyDatabase).buildTasks(timeRange,functionFactory);
}
 catch (Exception e) {
LOGGER.error("failed to load tasks",e);
System.exit(-1);
}
for (AnomalyDetectionTask task : tasks) {
taskExecutors.execute(task);
}
}
