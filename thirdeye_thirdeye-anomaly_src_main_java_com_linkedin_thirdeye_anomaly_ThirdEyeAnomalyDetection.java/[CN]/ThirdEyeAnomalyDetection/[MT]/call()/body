{
  DefaultThirdEyeClientConfig thirdEyeClientConfig=new DefaultThirdEyeClientConfig();
  thirdEyeClientConfig.setExpirationTime(DEFAULT_CACHE_EXPIRATION_MINUTES);
  thirdEyeClientConfig.setExpirationUnit(TimeUnit.MINUTES);
  thirdEyeClientConfig.setExpireAfterAccess(false);
  ThirdEyeClient thirdEyeClient=new FlowControlledDefaultThirdeyeClient(config.getThirdEyeServerHost(),config.getThirdEyeServerPort(),thirdEyeClientConfig,1);
  AnomalyDetectionFunctionFactory functionFactory;
switch (config.getMode()) {
case RULEBASED:
{
      functionFactory=new RuleBasedFunctionFactory();
      break;
    }
case GENERIC:
{
    functionFactory=new GenericFunctionFactory();
    break;
  }
default :
{
  functionFactory=null;
  break;
}
}
List<CallableAnomalyDetectionTask<Void>> tasks=buildTasks(thirdEyeClient,timeRange,functionFactory);
ExecutorService taskExecutors=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
for (CallableAnomalyDetectionTask<Void> task : tasks) {
taskExecutors.submit(task);
}
taskExecutors.shutdown();
taskExecutors.awaitTermination(config.getMaxWaitToCompletion().getSize(),config.getMaxWaitToCompletion().getUnit());
thirdEyeClient.close();
return null;
}
