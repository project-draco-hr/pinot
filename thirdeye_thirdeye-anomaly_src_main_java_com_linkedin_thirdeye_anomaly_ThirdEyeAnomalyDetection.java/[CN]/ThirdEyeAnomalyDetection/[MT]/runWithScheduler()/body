{
  ScheduledExecutorService scheduledExecutorService=Executors.newScheduledThreadPool(1);
  final int detectionIntervalInMillis=(int)TimeGranularityUtils.toMillis(config.getDetectionInterval());
  final int detectionLagInMillis=(int)TimeGranularityUtils.toMillis(config.getDetectionLag());
  long appStartTime=DateTime.now(DateTimeZone.UTC).getMillis();
  long firstExecution=TimeGranularityUtils.truncateBy(DateTime.now(DateTimeZone.UTC).getMillis(),config.getDetectionInterval()) + detectionLagInMillis;
  while (firstExecution - detectionIntervalInMillis > appStartTime) {
    firstExecution-=detectionIntervalInMillis;
  }
  long initialDelay=firstExecution - DateTime.now(DateTimeZone.UTC).getMillis();
  scheduledExecutorService.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      long currentTime=DateTime.now(DateTimeZone.UTC).getMillis();
      currentTime-=detectionLagInMillis;
      currentTime=TimeGranularityUtils.truncateBy(currentTime,config.getDetectionInterval());
      long taskEndTime=currentTime;
      long taskStartTime=currentTime - detectionIntervalInMillis;
      LOGGER.info("begin processing for {} to {}",taskStartTime,taskEndTime);
      loadAndRunTasks(config,new TimeRange(taskStartTime,taskEndTime));
    }
  }
,initialDelay,detectionIntervalInMillis,TimeUnit.MILLISECONDS);
  LOGGER.info("scheduling tasks to run every {}",config.getDetectionInterval());
  LOGGER.info("first execution at {}",new DateTime(firstExecution,DateTimeZone.UTC));
}
