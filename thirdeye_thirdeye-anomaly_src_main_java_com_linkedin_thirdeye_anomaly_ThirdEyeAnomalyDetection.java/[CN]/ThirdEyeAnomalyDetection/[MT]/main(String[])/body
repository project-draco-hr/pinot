{
  Options options=new Options();
  options.addOption(Option.builder().longOpt(OPT_SETUP).desc("Setup thirdeye-anomaly detection").hasArg(false).build());
  options.addOption(Option.builder("t").argName("start end").longOpt(OPT_TIME_RANGE).desc("Run anomaly detection on this time range in milliseconds. If detection interval is also specified, " + "the application will run in simulated streaming mode.").hasArgs().numberOfArgs(2).build());
  options.addOption(Option.builder("d").argName("size-unit").longOpt(OPT_DETECTION_INTERVAL).desc("The frequency to run anomaly detection. default: 1-HOURS").hasArg().build());
  options.addOption(Option.builder("p").argName("minutes").longOpt(OPT_POLLING_INTERVAL).desc("The frequency that thirdeye-anomaly should poll thirdeye-server for new segments.").hasArg().build());
  options.addOption(Option.builder("s").argName("server-config.yml").longOpt(OPT_SERVER).desc("Run a function database management server.").hasArg().build());
  options.addOption("h",OPT_HELP,false,"");
  CommandLineParser parser=new DefaultParser();
  CommandLine cmd=parser.parse(options,args);
  if (cmd.hasOption(OPT_HELP)) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp("java -jar <this_jar> [OPTIONS] <your_config>.yml",options);
    return;
  }
  if (cmd.hasOption(OPT_SETUP)) {
    new ThirdEyeAnomalyDetectionSetup().setup();
    return;
  }
  args=cmd.getArgs();
  if (args.length == 0) {
    System.err.println("A anomaly-config.yml file is required. To create one, run with --setup.");
    return;
  }
  ObjectMapper mapper=new ObjectMapper(new YAMLFactory());
  ThirdEyeAnomalyDetectionConfiguration config=mapper.readValue(new File(args[0]),ThirdEyeAnomalyDetectionConfiguration.class);
  if (cmd.hasOption(OPT_SERVER)) {
    new AnomalyManagementServer(config).run(new String[]{"server",cmd.getOptionValue(OPT_SERVER)});
    return;
  }
  String[] detectionIntervalArgs=cmd.getOptionValue(OPT_DETECTION_INTERVAL,"1-HOURS").split("-");
  TimeGranularity detectionInterval=new TimeGranularity(Integer.valueOf(detectionIntervalArgs[0]),TimeUnit.valueOf(detectionIntervalArgs[1]));
  if (cmd.hasOption(OPT_TIME_RANGE)) {
    String[] timeRangeArgs=cmd.getOptionValues(OPT_TIME_RANGE);
    TimeRange timeRange=new TimeRange(Long.valueOf(timeRangeArgs[0]),Long.valueOf(timeRangeArgs[1]));
    if (cmd.hasOption(OPT_DETECTION_INTERVAL)) {
      runWithOnlineSimulation(config,timeRange,detectionInterval);
    }
 else {
      runWithExplicitTimeRange(config,timeRange);
    }
  }
 else {
    long pollingMillis=TimeUnit.MINUTES.toMillis(Integer.valueOf(cmd.getOptionValue(OPT_POLLING_INTERVAL,"5")));
    runWithPolling(config,detectionInterval,pollingMillis);
  }
}
