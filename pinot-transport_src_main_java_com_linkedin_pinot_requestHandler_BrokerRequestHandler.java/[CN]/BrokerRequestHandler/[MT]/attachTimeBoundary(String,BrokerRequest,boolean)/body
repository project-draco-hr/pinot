{
  TimeBoundaryInfo timeBoundaryInfo=_timeBoundaryService.getTimeBoundaryInfoFor(BrokerRequestUtils.getOfflineResourceNameForResource(hybridResourceName));
  if (timeBoundaryInfo == null || timeBoundaryInfo.getTimeColumn() == null || timeBoundaryInfo.getTimeValue() == null) {
    return;
  }
  FilterQuery timeFilterQuery=new FilterQuery();
  timeFilterQuery.setOperator(FilterOperator.RANGE);
  timeFilterQuery.setColumn(timeBoundaryInfo.getTimeColumn());
  timeFilterQuery.setNestedFilterQueryIds(new ArrayList<Integer>());
  List<String> values=new ArrayList<String>();
  if (isOfflineRequest) {
    values.add("(*," + timeBoundaryInfo.getTimeValue() + ")");
  }
 else {
    values.add("[" + timeBoundaryInfo.getTimeValue() + ",*)");
  }
  timeFilterQuery.setValue(values);
  timeFilterQuery.setId(-1);
  FilterQuery currentFilterQuery=offlineRequest.getFilterQuery();
  if (currentFilterQuery != null) {
    FilterQuery andFilterQuery=new FilterQuery();
    andFilterQuery.setOperator(FilterOperator.AND);
    List<Integer> nestedFilterQueryIds=new ArrayList<Integer>();
    nestedFilterQueryIds.add(currentFilterQuery.getId());
    nestedFilterQueryIds.add(timeFilterQuery.getId());
    andFilterQuery.setNestedFilterQueryIds(nestedFilterQueryIds);
    andFilterQuery.setId(-2);
    FilterQueryMap filterSubQueryMap=offlineRequest.getFilterSubQueryMap();
    filterSubQueryMap.putToFilterQueryMap(timeFilterQuery.getId(),timeFilterQuery);
    filterSubQueryMap.putToFilterQueryMap(andFilterQuery.getId(),andFilterQuery);
    offlineRequest.setFilterQuery(andFilterQuery);
    offlineRequest.setFilterSubQueryMap(filterSubQueryMap);
  }
 else {
    FilterQueryMap filterSubQueryMap=new FilterQueryMap();
    filterSubQueryMap.putToFilterQueryMap(timeFilterQuery.getId(),timeFilterQuery);
    offlineRequest.setFilterQuery(timeFilterQuery);
    offlineRequest.setFilterSubQueryMap(filterSubQueryMap);
  }
}
