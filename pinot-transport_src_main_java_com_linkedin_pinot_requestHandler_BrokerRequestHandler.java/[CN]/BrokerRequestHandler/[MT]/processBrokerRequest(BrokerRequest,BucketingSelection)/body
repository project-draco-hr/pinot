{
  final long routingStartTime=System.nanoTime();
  if (request == null || request.getQuerySource() == null || request.getQuerySource().getResourceName() == null) {
    LOGGER.info("Query contains null resource.");
    return BrokerResponse.getNullBrokerResponse();
  }
  RoutingTableLookupRequest rtRequest=new RoutingTableLookupRequest(request.getQuerySource().getResourceName());
  Map<ServerInstance,SegmentIdSet> segmentServices=_routingTable.findServers(rtRequest);
  if (segmentServices == null) {
    LOGGER.info("Not found ServerInstances to Segments Mapping:");
    return BrokerResponse.getNullBrokerResponse();
  }
  LOGGER.info("Find ServerInstances to Segments Mapping:");
  for (  ServerInstance serverInstance : segmentServices.keySet()) {
    LOGGER.info(serverInstance + " : " + segmentServices.get(serverInstance));
  }
  final long queryRoutingTime=System.nanoTime() - routingStartTime;
  final String resourceName=request.getQuerySource().getResourceName();
  final String tableName=request.getQuerySource().getTableName();
  getTimer(resourceName,tableName,"queryRouting").update(queryRoutingTime,TimeUnit.NANOSECONDS);
  final long scatterGatherStartTime=System.nanoTime();
  ScatterGatherRequestImpl scatterRequest=new ScatterGatherRequestImpl(request,segmentServices,_replicaSelection,ReplicaSelectionGranularity.SEGMENT_ID_SET,request.getBucketHashKey(),0,overriddenSelection,_requestIdGen.incrementAndGet(),10 * 1000L);
  CompositeFuture<ServerInstance,ByteBuf> response=_scatterGatherer.scatterGather(scatterRequest);
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
{
    Map<ServerInstance,ByteBuf> responses=null;
    try {
      responses=response.get();
    }
 catch (    ExecutionException e) {
      e.printStackTrace();
    }
    final long scatterGatherTime=System.nanoTime() - scatterGatherStartTime;
    getTimer(resourceName,tableName,"scatterGather").update(scatterGatherTime,TimeUnit.NANOSECONDS);
    final long deserializationStartTime=System.nanoTime();
    Map<ServerInstance,Throwable> errors=response.getError();
    if (null != responses) {
      for (      Entry<ServerInstance,ByteBuf> e : responses.entrySet()) {
        try {
          ByteBuf b=e.getValue();
          byte[] b2=new byte[b.readableBytes()];
          if (b2 == null || b2.length == 0) {
            continue;
          }
          b.readBytes(b2);
          DataTable r2=new DataTable(b2);
          instanceResponseMap.put(e.getKey(),r2);
        }
 catch (        Exception ex) {
          LOGGER.error("Got exceptions in collect query result for instance " + e.getKey() + ", error: "+ ex.getMessage());
        }
      }
    }
    if (null != errors) {
      for (      Entry<ServerInstance,Throwable> e : errors.entrySet()) {
        DataTable r2=new DataTable();
        r2.getMetadata().put("exception",new RequestProcessingException(e.getValue()).toString());
        instanceResponseMap.put(e.getKey(),r2);
      }
    }
    final long deserializationTime=System.nanoTime() - deserializationStartTime;
    getTimer(resourceName,tableName,"deserialization").update(deserializationTime,TimeUnit.NANOSECONDS);
  }
  try {
    return getTimer(resourceName,tableName,"reduction").time(new Callable<BrokerResponse>(){
      @Override public BrokerResponse call(){
        return _reduceService.reduceOnDataTable(request,instanceResponseMap);
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
