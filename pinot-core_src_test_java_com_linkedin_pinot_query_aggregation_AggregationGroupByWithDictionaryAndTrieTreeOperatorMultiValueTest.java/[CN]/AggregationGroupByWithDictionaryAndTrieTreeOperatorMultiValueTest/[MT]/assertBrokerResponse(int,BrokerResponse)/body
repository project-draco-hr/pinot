{
  Assert.assertEquals(100000 * numSegments,brokerResponse.getNumDocsScanned());
  final int groupLength=15;
  verifyResponse(brokerResponse,groupLength);
  final List<double[]> aggregationResult=getAggregationResult(numSegments);
  final List<String[]> groupByResult=getGroupResult();
  for (int j=0; j < _numAggregations; ++j) {
    LOGGER.info("For aggregation function: {}",_aggregationInfos.get(j));
    final double[] aggResult=aggregationResult.get(j);
    final String[] groupResult=groupByResult.get(j);
    for (int i=0; i < 15; ++i) {
      LOGGER.info("Comparing group: {}",i);
      Assert.assertEquals(0,DoubleComparisonUtil.defaultDoubleCompare(aggResult[i],brokerResponse.getAggregationResults().get(j).getJSONArray("groupByResult").getJSONObject(i).getDouble("value")));
      if (groupResult.length < 2) {
        continue;
      }
      if ((i < 14 && aggResult[i] == aggResult[i + 1]) || (i > 0 && aggResult[i] == aggResult[i - 1])) {
      }
 else {
        Assert.assertEquals(groupResult[i],brokerResponse.getAggregationResults().get(j).getJSONArray("groupByResult").getJSONObject(i).getString("group"));
      }
    }
  }
}
