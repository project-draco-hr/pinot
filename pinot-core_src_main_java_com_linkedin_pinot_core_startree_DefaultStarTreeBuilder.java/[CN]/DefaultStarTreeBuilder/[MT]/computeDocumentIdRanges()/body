{
  Map<Integer,Integer> currentPrefix=null;
  StarTreeIndexNode currentNode=null;
  int currentDocumentId=0;
  int matchingPrefixCount=0;
  int matchingStartDocumentId=0;
  int matchingAdjustedStartDocumentId=0;
  int currentRawDocumentId=0;
  int currentAggDocumentId=0;
  Iterator<StarTreeTableRow> tableItr=starTreeTable.getAllCombinations();
  while (tableItr.hasNext()) {
    StarTreeTableRow currentCombination=tableItr.next();
    if (currentNode == null) {
      currentNode=starTree.getMatchingNode(currentCombination.getDimensions());
      currentPrefix=currentNode.getPathValues();
      if (currentPrefix.containsValue(StarTreeIndexNode.all())) {
        matchingAdjustedStartDocumentId=currentAggDocumentId;
      }
 else {
        matchingAdjustedStartDocumentId=currentRawDocumentId;
      }
    }
    if (StarTreeIndexNode.matchesPrefix(currentPrefix,currentCombination.getDimensions())) {
      matchingPrefixCount++;
    }
 else {
      StarTreeTableRange range=new StarTreeTableRange(matchingStartDocumentId,matchingPrefixCount);
      documentIdRanges.put(currentNode.getNodeId(),range);
      StarTreeTableRange adjustedRange=new StarTreeTableRange(matchingAdjustedStartDocumentId,matchingPrefixCount);
      adjustedDocumentIdRanges.put(currentNode.getNodeId(),adjustedRange);
      currentNode=starTree.getMatchingNode(currentCombination.getDimensions());
      if (currentNode == null) {
        throw new IllegalStateException("No node matches combination " + currentCombination);
      }
      currentPrefix=currentNode.getPathValues();
      matchingPrefixCount=1;
      matchingStartDocumentId=currentDocumentId;
      if (currentPrefix.containsValue(StarTreeIndexNode.all())) {
        matchingAdjustedStartDocumentId=currentAggDocumentId;
      }
 else {
        matchingAdjustedStartDocumentId=currentRawDocumentId;
      }
    }
    currentDocumentId++;
    if (currentPrefix.containsValue(StarTreeIndexNode.all())) {
      currentAggDocumentId++;
    }
 else {
      currentRawDocumentId++;
    }
  }
  if (currentNode != null) {
    StarTreeTableRange range=new StarTreeTableRange(matchingStartDocumentId,matchingPrefixCount);
    documentIdRanges.put(currentNode.getNodeId(),range);
    StarTreeTableRange adjustedRange=new StarTreeTableRange(matchingAdjustedStartDocumentId,matchingPrefixCount);
    adjustedDocumentIdRanges.put(currentNode.getNodeId(),adjustedRange);
  }
  totalAggDocumentCount=currentAggDocumentId;
  totalRawDocumentCount=currentRawDocumentId;
}
