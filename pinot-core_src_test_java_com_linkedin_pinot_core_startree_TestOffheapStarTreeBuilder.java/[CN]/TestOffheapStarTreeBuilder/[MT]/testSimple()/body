{
  int numDimensions=3;
  int numMetrics=2;
  int ROWS=(int)MathUtils.factorial(numDimensions);
  StarTreeBuilderConfig builderConfig=new StarTreeBuilderConfig();
  Schema schema=new Schema();
  builderConfig.splitOrder=new ArrayList<>();
  for (int i=0; i < numDimensions; i++) {
    String dimName="d" + (i + 1);
    DimensionFieldSpec dimensionFieldSpec=new DimensionFieldSpec(dimName,DataType.STRING,true);
    schema.addField(dimName,dimensionFieldSpec);
    builderConfig.splitOrder.add(dimName);
  }
  schema.setTimeFieldSpec(new TimeFieldSpec("daysSinceEpoch",DataType.INT,TimeUnit.DAYS));
  for (int i=0; i < numMetrics; i++) {
    String metricName="m" + (i + 1);
    MetricFieldSpec metricFieldSpec=new MetricFieldSpec(metricName,DataType.INT);
    schema.addField(metricName,metricFieldSpec);
  }
  builderConfig.maxLeafRecords=10;
  builderConfig.schema=schema;
  builderConfig.outDir=new File("/tmp/startree");
  OffHeapStarTreeBuilder builder=new OffHeapStarTreeBuilder();
  builder.init(builderConfig);
  HashMap<String,Object> map=new HashMap<>();
  for (int row=0; row < ROWS; row++) {
    for (int i=0; i < numDimensions; i++) {
      String dimName=schema.getDimensionFieldSpecs().get(i).getName();
      map.put(dimName,dimName + "-v" + row % (numDimensions - i));
    }
    map.put("daysSinceEpoch",1);
    for (int i=0; i < numMetrics; i++) {
      String metName=schema.getMetricFieldSpecs().get(i).getName();
      map.put(metName,1);
    }
    GenericRow genericRow=new GenericRow();
    genericRow.init(map);
    builder.append(genericRow);
  }
  builder.build();
  int totalDocs=builder.getTotalRawDocumentCount() + builder.getTotalAggregateDocumentCount();
  Iterator<GenericRow> iterator=builder.iterator(0,totalDocs);
  while (iterator.hasNext()) {
    System.out.println(iterator.next());
  }
  FileUtils.deleteDirectory(builderConfig.outDir);
}
