{
  ZkTestUtils.startLocalZkServer();
  _zkClient=new ZkClient(ZK_SERVER);
  final String instanceId="localhost_helixController";
  _pinotHelixResourceManager=new PinotHelixResourceManager(ZK_SERVER,HELIX_CLUSTER_NAME,instanceId,null,10000L,true);
  _pinotHelixResourceManager.start();
  final String helixZkURL=HelixConfig.getAbsoluteZkPathForHelix(ZK_SERVER);
  _helixZkManager=HelixSetupUtils.setup(HELIX_CLUSTER_NAME,helixZkURL,instanceId);
  _helixAdmin=_helixZkManager.getClusterManagmentTool();
  _numInstance=1;
  ControllerRequestBuilderUtil.addFakeDataInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_SERVER,_numInstance,true);
  ControllerRequestBuilderUtil.addFakeBrokerInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_SERVER,1,true);
  Thread.sleep(3000);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_BROKER").size(),1);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_OFFLINE").size(),1);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_REALTIME").size(),1);
  String OfflineTableConfigJson=ControllerRequestBuilderUtil.buildCreateOfflineTableJSON(TABLE_NAME,null,null,1).toString();
  AbstractTableConfig offlineTableConfig=AbstractTableConfig.init(OfflineTableConfigJson);
  _pinotHelixResourceManager.addTable(offlineTableConfig);
}
