{
  Map<MetricFunction,Map<String,Double>> metricOnlyData=TimeOnTimeResponseParser.processAggregateResponse(queryResultMap);
  Map<MetricFunction,Map<String,Map<String,Double>>> metricSumFromGroupByResponse=new HashMap<>();
  Map<MetricFunction,Map<String,Map<String,Map<String,Double>>>> metricGroupByDimensionData=TimeOnTimeResponseParser.processGroupByDimensionResponse(queryResultMap);
  Map<String,Map<String,Row.Builder>> rowBuildersMap=new LinkedHashMap<>();
  for (  Entry<MetricFunction,Map<String,Map<String,Map<String,Double>>>> metricEntry : metricGroupByDimensionData.entrySet()) {
    MetricFunction metricFunction=metricEntry.getKey();
    Map<String,Map<String,Map<String,Double>>> dimensionDataMap=metricEntry.getValue();
    for (    String dimensionName : dimensionDataMap.keySet()) {
      Map<String,Map<String,Double>> map=dimensionDataMap.get(dimensionName);
      for (      String dimensionValue : map.keySet()) {
        Map<String,Double> metricValueMap=map.get(dimensionValue);
        double totalBaselineValue=metricOnlyData.get(metricFunction).get(BASELINE_VALUE);
        double totalCurrentValue=metricOnlyData.get(metricFunction).get(BASELINE_VALUE);
        Double baselineValue=metricValueMap.get(BASELINE_VALUE);
        Double currentValue=metricValueMap.get(CURRENT_VALUE);
        boolean meetsMinContributionThreshold=(baselineValue > (totalBaselineValue * MIN_CONTRIBUTION_PERCENT)) || (currentValue > totalCurrentValue * MIN_CONTRIBUTION_PERCENT);
        if (!meetsMinContributionThreshold) {
          continue;
        }
        Row.Builder rowBuilder=getRowBuilder(rowBuildersMap,dimensionName,dimensionValue);
        rowBuilder.addMetric(metricFunction.getMetricName(),baselineValue,currentValue);
        if (!metricSumFromGroupByResponse.containsKey(metricFunction)) {
          Map<String,Map<String,Double>> value=new HashMap<>();
          metricSumFromGroupByResponse.put(metricFunction,value);
        }
        if (!metricSumFromGroupByResponse.get(metricFunction).containsKey(dimensionName)) {
          Map<String,Double> value=new HashMap<>();
          value.put(BASELINE_VALUE,0d);
          value.put(CURRENT_VALUE,0d);
          metricSumFromGroupByResponse.get(metricFunction).put(dimensionName,value);
        }
        Map<String,Double> metricSum=metricSumFromGroupByResponse.get(metricFunction).get(dimensionName);
        metricSum.put(BASELINE_VALUE,metricSum.get(BASELINE_VALUE) + baselineValue);
        metricSum.put(CURRENT_VALUE,metricSum.get(CURRENT_VALUE) + currentValue);
      }
    }
  }
  for (  MetricFunction metricFunction : metricSumFromGroupByResponse.keySet()) {
    Map<String,Map<String,Double>> map=metricSumFromGroupByResponse.get(metricFunction);
    for (    String dimensionName : map.keySet()) {
      Map<String,Double> valueMap=map.get(dimensionName);
      double baselineValue=metricOnlyData.get(metricFunction).get(BASELINE_VALUE) - valueMap.get(BASELINE_VALUE);
      double currentValue=metricOnlyData.get(metricFunction).get(CURRENT_VALUE) - valueMap.get(CURRENT_VALUE);
      double totalBaselineValue=metricOnlyData.get(metricFunction).get(BASELINE_VALUE);
      double totalCurrentValue=metricOnlyData.get(metricFunction).get(BASELINE_VALUE);
      boolean meetsMinContributionThreshold=(baselineValue > (totalBaselineValue * MIN_CONTRIBUTION_PERCENT)) || (currentValue > totalCurrentValue * MIN_CONTRIBUTION_PERCENT);
      if (meetsMinContributionThreshold) {
        Builder rowBuilder=getRowBuilder(rowBuildersMap,dimensionName,"other");
        rowBuilder.addMetric(metricFunction.getMetricName(),baselineValue,currentValue);
      }
    }
  }
  List<Row> rows=new ArrayList<>();
  for (  Map<String,Builder> dimensionValueMap : rowBuildersMap.values()) {
    for (    Row.Builder builder : dimensionValueMap.values()) {
      builder.setBaselineStart(comparisonRequest.getBaselineStart());
      builder.setBaselineEnd(comparisonRequest.getBaselineEnd());
      builder.setCurrentStart(comparisonRequest.getCurrentStart());
      builder.setCurrentEnd(comparisonRequest.getCurrentEnd());
      Row row=builder.build();
      rows.add(row);
    }
  }
  return rows;
}
