{
  if ((instanceResponseMap == null) || instanceResponseMap.isEmpty()) {
    return null;
  }
  List<Map<String,Serializable>> reducedResult=null;
  for (  DataTable toBeReducedGroupByResults : instanceResponseMap.values()) {
    if (reducedResult == null) {
      reducedResult=transformDataTableToGroupByResult(toBeReducedGroupByResults);
    }
 else {
      List<Map<String,Serializable>> toBeReducedResult=transformDataTableToGroupByResult(toBeReducedGroupByResults);
      for (int i=0; i < reducedResult.size(); ++i) {
        for (        String key : toBeReducedResult.get(i).keySet()) {
          if (reducedResult.get(i).containsKey(key)) {
            reducedResult.get(i).put(key,_aggregationFunctionList.get(i).combineTwoValues(reducedResult.get(i).get(key),toBeReducedResult.get(i).get(key)));
          }
 else {
            reducedResult.get(i).put(key,toBeReducedResult.get(i).get(key));
          }
        }
      }
    }
  }
  for (int i=0; i < reducedResult.size(); ++i) {
    Map<String,Serializable> functionLevelReducedResult=reducedResult.get(i);
    for (    String key : functionLevelReducedResult.keySet()) {
      if (functionLevelReducedResult.get(key) != null) {
        functionLevelReducedResult.put(key,_aggregationFunctionList.get(i).reduce(Arrays.asList(functionLevelReducedResult.get(key))));
      }
    }
  }
  return reducedResult;
}
