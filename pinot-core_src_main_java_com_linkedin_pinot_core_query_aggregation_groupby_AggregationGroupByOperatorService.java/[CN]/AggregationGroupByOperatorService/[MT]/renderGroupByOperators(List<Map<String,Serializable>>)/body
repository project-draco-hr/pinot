{
  try {
    if (finalAggregationResult == null || finalAggregationResult.size() != _aggregationFunctionList.size()) {
      return null;
    }
    List<JSONObject> retJsonResultList=new ArrayList<JSONObject>();
    for (int i=0; i < _aggregationFunctionList.size(); ++i) {
      JSONArray groupByResultsArray=new JSONArray();
      int groupSize=_groupByColumns.size();
      Map<String,Serializable> reducedGroupByResult=finalAggregationResult.get(i);
      AggregationFunction aggregationFunction=_aggregationFunctionList.get(i);
      if (!reducedGroupByResult.isEmpty()) {
        boolean reverseOrder=aggregationFunction.getFunctionName().startsWith(MIN_PREFIX);
        MinMaxPriorityQueue<ImmutablePair<Serializable,String>> minMaxPriorityQueue=getMinMaxPriorityQueue(reducedGroupByResult.values().iterator().next(),_groupByTopN,reverseOrder);
        if (minMaxPriorityQueue != null) {
          for (          String groupedKey : reducedGroupByResult.keySet()) {
            minMaxPriorityQueue.add(new ImmutablePair(reducedGroupByResult.get(groupedKey),groupedKey));
          }
          ImmutablePair res;
          while ((res=(ImmutablePair)minMaxPriorityQueue.pollFirst()) != null) {
            JSONObject groupByResultObject=new JSONObject();
            groupByResultObject.put("group",new JSONArray(((String)res.getRight()).split(GroupByConstants.GroupByDelimiter.groupByMultiDelimeter.toString(),groupSize)));
            groupByResultObject.put("value",aggregationFunction.render((Serializable)res.getLeft()).get("value"));
            groupByResultsArray.put(groupByResultObject);
          }
        }
      }
      JSONObject result=new JSONObject();
      result.put("function",aggregationFunction.getFunctionName());
      result.put("groupByResult",groupByResultsArray);
      result.put("groupByColumns",new JSONArray(_groupByColumns));
      retJsonResultList.add(result);
    }
    return retJsonResultList;
  }
 catch (  JSONException e) {
    LOGGER.error("Caught exception while processing group by aggregation",e);
    Utils.rethrowException(e);
    throw new AssertionError("Should not reach this");
  }
}
