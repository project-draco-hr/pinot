{
  MinMaxPriorityQueue<ImmutablePair<Serializable,String>>[] heaps=new MinMaxPriorityQueue[numAggrFunctions];
  for (int i=0; i < numAggrFunctions; i++) {
    boolean reverseOrder=aggrFuncList.get(i).getFunctionName().startsWith(MIN_PREFIX);
    heaps[i]=getMinMaxPriorityQueue(aggrGroupByResults.values().iterator().next()[i],trimSize,reverseOrder);
  }
  for (  String key : aggrGroupByResults.keySet()) {
    Serializable[] results=aggrGroupByResults.get(key);
    for (int i=0; i < numAggrFunctions; i++) {
      Serializable result=results[i];
      MinMaxPriorityQueue<ImmutablePair<Serializable,String>> heap=heaps[i];
      if (heap == null) {
        trimmedGroupByResultList.get(i).put(key,result);
      }
 else {
        heap.add(new ImmutablePair(result,key));
      }
    }
  }
  for (int i=0; i < numAggrFunctions; i++) {
    MinMaxPriorityQueue<ImmutablePair<Serializable,String>> heap=heaps[i];
    ImmutablePair<Serializable,String> pair;
    if (heap != null) {
      while ((pair=heap.pollFirst()) != null) {
        trimmedGroupByResultList.get(i).put(pair.getRight(),pair.getLeft());
      }
    }
  }
}
