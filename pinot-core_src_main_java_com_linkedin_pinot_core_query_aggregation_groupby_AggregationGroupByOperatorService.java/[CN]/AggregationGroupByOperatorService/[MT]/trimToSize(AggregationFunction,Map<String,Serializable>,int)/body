{
  boolean reverseOrder=aggregationFunction.getFunctionName().startsWith(MIN_PREFIX);
  MinMaxPriorityQueue<ImmutablePair<Serializable,String>> minMaxPriorityQueue=getMinMaxPriorityQueue(aggregationGroupByResult.values().iterator().next(),trimSize,reverseOrder);
  if (minMaxPriorityQueue == null) {
    return aggregationGroupByResult;
  }
  for (  String groupedKey : aggregationGroupByResult.keySet()) {
    minMaxPriorityQueue.add(new ImmutablePair(aggregationGroupByResult.get(groupedKey),groupedKey));
  }
  Map<String,Serializable> trimmedResult=new HashMap<>();
  ImmutablePair<Serializable,String> pair;
  while ((pair=(ImmutablePair)minMaxPriorityQueue.pollFirst()) != null) {
    trimmedResult.put(pair.getRight(),pair.getLeft());
  }
  return trimmedResult;
}
