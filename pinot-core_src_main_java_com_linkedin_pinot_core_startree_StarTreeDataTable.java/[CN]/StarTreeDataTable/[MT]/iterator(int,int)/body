{
  try {
    final int length=endDocId - startDocId;
    final long startOffset=startDocId * (long)totalSizeInBytes;
    final MMapBuffer mappedByteBuffer=new MMapBuffer(file,startOffset,length * (long)totalSizeInBytes,MMapMode.READ_WRITE);
    return new Iterator<Pair<byte[],byte[]>>(){
      int pointer=0;
      @Override public boolean hasNext(){
        return pointer < length;
      }
      @Override public void remove(){
        throw new UnsupportedOperationException();
      }
      @Override public Pair<byte[],byte[]> next(){
        byte[] dimBuff=new byte[dimensionSizeInBytes];
        byte[] metBuff=new byte[metricSizeInBytes];
        mappedByteBuffer.toDirectByteBuffer(pointer * (long)totalSizeInBytes,dimensionSizeInBytes).get(dimBuff);
        if (metricSizeInBytes > 0) {
          mappedByteBuffer.toDirectByteBuffer(pointer * (long)totalSizeInBytes + dimensionSizeInBytes,metricSizeInBytes).get(metBuff);
        }
        pointer=pointer + 1;
        if (pointer == length) {
          try {
            mappedByteBuffer.close();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
        return Pair.of(dimBuff,metBuff);
      }
    }
;
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
  }
}
