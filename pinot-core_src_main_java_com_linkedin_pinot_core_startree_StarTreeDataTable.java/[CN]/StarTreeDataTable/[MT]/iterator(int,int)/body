{
  RandomAccessFile randomAccessFile=null;
  try {
    final int length=endDocId - startDocId;
    randomAccessFile=new RandomAccessFile(file,"rw");
    final int startOffset=startDocId * totalSizeInBytes;
    final MappedByteBuffer mappedByteBuffer=randomAccessFile.getChannel().map(MapMode.READ_ONLY,startOffset,length * totalSizeInBytes);
    return new Iterator<Pair<byte[],byte[]>>(){
      int pointer=0;
      @Override public boolean hasNext(){
        return pointer < length;
      }
      @Override public Pair<byte[],byte[]> next(){
        byte[] dimBuff=new byte[dimensionSizeInBytes];
        byte[] metBuff=new byte[metricSizeInBytes];
        mappedByteBuffer.position(pointer * totalSizeInBytes);
        mappedByteBuffer.get(dimBuff);
        if (metricSizeInBytes > 0) {
          mappedByteBuffer.get(metBuff);
        }
        pointer=pointer + 1;
        return Pair.of(dimBuff,metBuff);
      }
    }
;
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(randomAccessFile);
  }
}
