{
  MMapBuffer mappedByteBuffer=null;
  try {
    int length=endDocId - startDocId;
    Map<Integer,IntPair> rangeMap=new LinkedHashMap<>();
    final long startOffset=startDocId * (long)totalSizeInBytes;
    mappedByteBuffer=new MMapBuffer(file,startOffset,length * (long)totalSizeInBytes,MMapMode.READ_WRITE);
    int prevValue=-1;
    int prevStart=0;
    byte[] dimBuff=new byte[dimensionSizeInBytes];
    for (int i=0; i < length; i++) {
      mappedByteBuffer.toDirectByteBuffer(i * (long)totalSizeInBytes,dimensionSizeInBytes).get(dimBuff);
      int value=ByteBuffer.wrap(dimBuff).asIntBuffer().get(colIndex);
      if (prevValue != -1 && prevValue != value) {
        rangeMap.put(prevValue,new IntPair(startDocId + prevStart,startDocId + i));
        prevStart=i;
      }
      prevValue=value;
    }
    rangeMap.put(prevValue,new IntPair(startDocId + prevStart,endDocId));
    return rangeMap;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (mappedByteBuffer != null) {
      try {
        mappedByteBuffer.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return Collections.emptyMap();
}
