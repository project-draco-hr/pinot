{
  IdealState idealState;
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_BROKER").size(),6);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet(DINING_TABLE_NAME).size(),6);
  ExternalView externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(externalView.getStateMap(DINING_TABLE_NAME).size(),6);
  Thread.sleep(2000);
  HelixExternalViewBasedRouting helixExternalViewBasedRouting=_helixBrokerStarter.getHelixExternalViewBasedRouting();
  Field brokerRoutingTableField;
  brokerRoutingTableField=HelixExternalViewBasedRouting.class.getDeclaredField("_brokerRoutingTable");
  brokerRoutingTableField.setAccessible(true);
  Map<String,List<ServerToSegmentSetMap>> brokerRoutingTable=(Map<String,List<ServerToSegmentSetMap>>)brokerRoutingTableField.get(helixExternalViewBasedRouting);
  Assert.assertEquals(Arrays.toString(brokerRoutingTable.keySet().toArray()),"[dining_OFFLINE]");
  final String tableName="coffee";
  JSONObject buildCreateOfflineTableV2JSON=ControllerRequestBuilderUtil.buildCreateOfflineTableJSON(tableName,"testServer","testBroker",1);
  AbstractTableConfig config=AbstractTableConfig.init(buildCreateOfflineTableV2JSON.toString());
  _pinotResourceManager.addTable(config);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_BROKER").size(),6);
  idealState=_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(idealState.getInstanceSet(COFFEE_TABLE_NAME).size(),6);
  Assert.assertEquals(idealState.getInstanceSet(DINING_TABLE_NAME).size(),6);
  Thread.sleep(3000);
  externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,CommonConstants.Helix.BROKER_RESOURCE_INSTANCE);
  Assert.assertEquals(externalView.getStateMap(COFFEE_TABLE_NAME).size(),6);
  Object[] tableArray=brokerRoutingTable.keySet().toArray();
  Arrays.sort(tableArray);
  Assert.assertEquals(Arrays.toString(tableArray),"[coffee_OFFLINE, dining_OFFLINE]");
  Set<String> serverSet=brokerRoutingTable.get(DINING_TABLE_NAME).get(0).getServerSet();
  Assert.assertEquals(brokerRoutingTable.get(DINING_TABLE_NAME).get(0).getSegmentSet(serverSet.iterator().next()).size(),5);
  final String dataResource=DINING_TABLE_NAME;
  addOneSegment(dataResource);
  Thread.sleep(2000);
  externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,DINING_TABLE_NAME);
  Assert.assertEquals(externalView.getPartitionSet().size(),6);
  helixExternalViewBasedRouting=_helixBrokerStarter.getHelixExternalViewBasedRouting();
  tableArray=brokerRoutingTable.keySet().toArray();
  Arrays.sort(tableArray);
  Assert.assertEquals(Arrays.toString(tableArray),"[coffee_OFFLINE, dining_OFFLINE]");
  serverSet=brokerRoutingTable.get(DINING_TABLE_NAME).get(0).getServerSet();
  Assert.assertEquals(brokerRoutingTable.get(DINING_TABLE_NAME).get(0).getSegmentSet(serverSet.iterator().next()).size(),6);
}
