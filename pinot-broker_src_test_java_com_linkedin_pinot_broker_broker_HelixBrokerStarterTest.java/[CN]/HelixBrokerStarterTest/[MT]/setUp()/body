{
  ZkTestUtils.startLocalZkServer();
  _zkClient=new ZkClient(ZkTestUtils.DEFAULT_ZK_STR);
  final String instanceId="localhost_helixController";
  _pinotResourceManager=new PinotHelixResourceManager(ZkTestUtils.DEFAULT_ZK_STR,HELIX_CLUSTER_NAME,instanceId,null);
  _pinotResourceManager.start();
  final String helixZkURL=HelixConfig.getAbsoluteZkPathForHelix(ZkTestUtils.DEFAULT_ZK_STR);
  _helixZkManager=HelixSetupUtils.setup(HELIX_CLUSTER_NAME,helixZkURL,instanceId);
  _helixAdmin=_helixZkManager.getClusterManagmentTool();
  Thread.sleep(3000);
  final Configuration pinotHelixBrokerProperties=DefaultHelixBrokerConfig.getDefaultBrokerConf();
  pinotHelixBrokerProperties.addProperty(CommonConstants.Helix.KEY_OF_BROKER_QUERY_PORT,8943);
  _helixBrokerStarter=new HelixBrokerStarter(HELIX_CLUSTER_NAME,ZkTestUtils.DEFAULT_ZK_STR,pinotHelixBrokerProperties);
  Thread.sleep(1000);
  addFakeBrokerInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZkTestUtils.DEFAULT_ZK_STR,5);
  addFakeDataInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZkTestUtils.DEFAULT_ZK_STR,1);
  _pinotResourceManager.createBrokerResourceTag(createBrokerTagResourceConfig(6,"broker_colocated"));
  final String dataResource="company";
  final DataResource resource=createOfflineClusterConfig(1,1,dataResource,"BalanceNumSegmentAssignmentStrategy");
  _pinotResourceManager.handleCreateNewDataResource(resource);
  for (int i=1; i <= 5; i++) {
    addOneSegment(dataResource);
    Thread.sleep(2000);
    final ExternalView externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(dataResource));
    Assert.assertEquals(externalView.getPartitionSet().size(),i);
  }
}
