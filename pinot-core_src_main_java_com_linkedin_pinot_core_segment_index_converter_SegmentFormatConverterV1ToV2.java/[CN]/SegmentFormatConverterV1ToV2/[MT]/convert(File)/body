{
  SegmentMetadataImpl segmentMetadataImpl=new SegmentMetadataImpl(indexSegmentDir);
  Set<String> columns=segmentMetadataImpl.getAllColumns();
  for (  String column : columns) {
    ColumnMetadata columnMetadata=segmentMetadataImpl.getColumnMetadataFor(column);
    if (columnMetadata.isSorted()) {
      continue;
    }
    if (columnMetadata.isSingleValue() && !columnMetadata.isSorted()) {
      File fwdIndexFile=new File(indexSegmentDir,column + V1Constants.Indexes.UN_SORTED_SV_FWD_IDX_FILE_EXTENTION);
      boolean signed=false;
      SingleColumnSingleValueReader v1Reader=new com.linkedin.pinot.core.io.reader.impl.v1.FixedBitSingleValueReader(fwdIndexFile,segmentMetadataImpl.getTotalDocs(),columnMetadata.getBitsPerElement(),true,false);
      File convertedFwdIndexFile=new File(indexSegmentDir,column + V1Constants.Indexes.UN_SORTED_SV_FWD_IDX_FILE_EXTENTION + ".tmp");
      SingleColumnSingleValueWriter v2Writer=new com.linkedin.pinot.core.io.writer.impl.v2.FixedBitSingleValueWriter(convertedFwdIndexFile,segmentMetadataImpl.getTotalDocs(),columnMetadata.getBitsPerElement());
      for (int row=0; row < segmentMetadataImpl.getTotalDocs(); row++) {
        int value=v1Reader.getInt(row);
        v2Writer.setInt(row,value);
      }
      v1Reader.close();
      v2Writer.close();
      File fwdIndexFileCopy=new File(indexSegmentDir,column + V1Constants.Indexes.UN_SORTED_SV_FWD_IDX_FILE_EXTENTION + ".orig");
      bis=new BufferedInputStream(new FileInputStream(fwdIndexFile));
      bos=new BufferedOutputStream(new FileOutputStream(fwdIndexFileCopy));
      IOUtils.copy(bis,bos);
      bis.close();
      bos.close();
      fwdIndexFile.delete();
      bis=new BufferedInputStream(new FileInputStream(convertedFwdIndexFile));
      bos=new BufferedOutputStream(new FileOutputStream(fwdIndexFile));
      IOUtils.copy(bis,bos);
      bis.close();
      bos.close();
      convertedFwdIndexFile.delete();
    }
    if (!columnMetadata.isSingleValue()) {
      File fwdIndexFile=new File(indexSegmentDir,column + V1Constants.Indexes.UN_SORTED_MV_FWD_IDX_FILE_EXTENTION);
      boolean signed=false;
      SingleColumnMultiValueReader v1Reader=new com.linkedin.pinot.core.io.reader.impl.v1.FixedBitMultiValueReader(fwdIndexFile,segmentMetadataImpl.getTotalDocs(),columnMetadata.getTotalNumberOfEntries(),columnMetadata.getBitsPerElement(),signed,false);
      File convertedFwdIndexFile=new File(indexSegmentDir,column + V1Constants.Indexes.UN_SORTED_MV_FWD_IDX_FILE_EXTENTION + ".tmp");
      SingleColumnMultiValueWriter v2Writer=new com.linkedin.pinot.core.io.writer.impl.v2.FixedBitMultiValueWriter(convertedFwdIndexFile,segmentMetadataImpl.getTotalDocs(),columnMetadata.getTotalNumberOfEntries(),columnMetadata.getBitsPerElement());
      int[] values=new int[columnMetadata.getMaxNumberOfMultiValues()];
      for (int row=0; row < segmentMetadataImpl.getTotalDocs(); row++) {
        int length=v1Reader.getIntArray(row,values);
        int[] copy=new int[length];
        System.arraycopy(values,0,copy,0,length);
        v2Writer.setIntArray(row,copy);
      }
      v1Reader.close();
      v2Writer.close();
      File fwdIndexFileCopy=new File(indexSegmentDir,column + V1Constants.Indexes.UN_SORTED_MV_FWD_IDX_FILE_EXTENTION + ".orig");
      bis=new BufferedInputStream(new FileInputStream(fwdIndexFile));
      bos=new BufferedOutputStream(new FileOutputStream(fwdIndexFileCopy));
      IOUtils.copy(bis,bos);
      bis.close();
      bos.close();
      fwdIndexFile.delete();
      bis=new BufferedInputStream(new FileInputStream(convertedFwdIndexFile));
      bos=new BufferedOutputStream(new FileOutputStream(fwdIndexFile));
      IOUtils.copy(bis,bos);
      bis.close();
      bos.close();
      convertedFwdIndexFile.delete();
    }
  }
  File metadataFile=new File(indexSegmentDir,V1Constants.MetadataKeys.METADATA_FILE_NAME);
  File metadataFileCopy=new File(indexSegmentDir,V1Constants.MetadataKeys.METADATA_FILE_NAME + ".orig");
  bis=new BufferedInputStream(new FileInputStream(metadataFile));
  bos=new BufferedOutputStream(new FileOutputStream(metadataFileCopy));
  IOUtils.copy(bis,bos);
  bis.close();
  bos.close();
  final PropertiesConfiguration properties=new PropertiesConfiguration(metadataFileCopy);
  properties.setProperty(V1Constants.MetadataKeys.Segment.SEGMENT_VERSION,SegmentVersion.v2.toString());
  metadataFile.delete();
  properties.save(metadataFile);
}
