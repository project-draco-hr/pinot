{
  printSectionTitle("driver configuration");
  System.out.println("These settings determine how thirdeye-anomaly will explore various dimension combinations.");
  String contributionEstimateMetric=promptForInput("What metric to use to estimate the importance of " + "a dimension combination?",userInput);
  int maxExplorationDepth=Integer.valueOf(promptForInput("How many dimensions should the driver attempt to " + "fix/group by? (recommend 1)",userInput));
  String[] dimensionPrecedence=promptForInput("Enter the precedence of dimensions (delimited by ',') that the driver should explore (not aliases!).\n" + "For efficiency, we recommend listing dimensions with high cardinality first.(e.g., \"d1,d2,d3\")\n",userInput).split(",");
  List<String> validDimensions=DimensionSpecUtils.getDimensionNames(starTreeConfig.getDimensions());
  for (int i=0; i < dimensionPrecedence.length; i++) {
    dimensionPrecedence[i]=dimensionPrecedence[i].trim();
    if (!validDimensions.contains(dimensionPrecedence[i])) {
      System.err.println("'" + dimensionPrecedence[i] + "' is not a valid dimension in "+ starTreeConfig.getCollection());
      System.exit(1);
    }
  }
  AnomalyDetectionDriverConfig driverConfig=new AnomalyDetectionDriverConfig();
  driverConfig.setDimensionPrecedence(Arrays.asList(dimensionPrecedence));
  driverConfig.setContributionEstimateMetric(contributionEstimateMetric);
  driverConfig.setMaxExplorationDepth(maxExplorationDepth);
  return driverConfig;
}
