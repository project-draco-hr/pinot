{
  printSectionTitle("basic mysql setup");
  if (promptForYN("Create the function table?",userInput)) {
    String sql=String.format(ResourceUtils.getResourceAsString("database/generic/create-function-table.sql"),config.getAnomalyDatabaseConfig().getFunctionTableName());
    if (!config.getAnomalyDatabaseConfig().runSQL(sql)) {
      if (!promptForYN("An error occured, do you wish to continue?",userInput)) {
        System.err.println("Abort...");
        System.exit(1);
      }
 else {
        printSectionTitle("Here is the sql for your reference");
        System.out.println(sql);
      }
    }
  }
  if (promptForYN("Create the anomaly table?",userInput)) {
    AnomalyTable.createTable(config.getAnomalyDatabaseConfig());
  }
  if (promptForYN("Do you want to load the default (Kalman filter) algorithm?",userInput)) {
    String metricsString=promptForInput("Metrics you want to analyze (delimited by ',', e.g., \"m1,m2,m3\").\n" + "If empty, then all metrics will be monitored.",userInput);
    List<String> validMetrics=MetricSpecUtils.getMetricNames(starTreeConfig.getMetrics());
    List<String> metrics;
    if (metricsString.equals("")) {
      metrics=validMetrics;
    }
 else {
      metrics=Arrays.asList(metricsString.split(","));
      for (      String metric : metrics) {
        if (!validMetrics.contains(metric)) {
          System.err.println("'" + metric + "' is not a valid metric in "+ starTreeConfig.getCollection());
          System.exit(1);
        }
      }
    }
    printSectionTitle("inserting functions");
    for (    String metric : metrics) {
      String sql=String.format(ResourceUtils.getResourceAsString("database/generic/insert-kalman-filter-default.sql"),config.getAnomalyDatabaseConfig().getFunctionTableName(),config.getCollectionName(),metric.trim());
      System.out.println(sql);
      config.getAnomalyDatabaseConfig().runSQL(sql);
    }
  }
}
