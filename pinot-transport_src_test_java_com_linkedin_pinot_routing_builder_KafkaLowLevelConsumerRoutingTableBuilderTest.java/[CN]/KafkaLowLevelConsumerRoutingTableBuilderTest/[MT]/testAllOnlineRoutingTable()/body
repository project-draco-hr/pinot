{
  final int ITERATIONS=1000;
  Random random=new Random();
  KafkaLowLevelConsumerRoutingTableBuilder routingTableBuilder=new KafkaLowLevelConsumerRoutingTableBuilder();
  routingTableBuilder.init(null);
  long totalNanos=0L;
  for (int i=0; i < ITERATIONS; i++) {
    int instanceCount=random.nextInt(12) + 3;
    int partitionCount=random.nextInt(8) + 4;
    int replicationFactor=random.nextInt(3) + 3;
    String[] instanceNames=new String[instanceCount];
    for (int serverInstanceId=0; serverInstanceId < instanceCount; serverInstanceId++) {
      instanceNames[serverInstanceId]="Server_localhost_" + serverInstanceId;
    }
    String[][] segmentNames=new String[partitionCount][];
    int totalSegmentCount=0;
    for (int partitionId=0; partitionId < partitionCount; partitionId++) {
      int segmentCount=random.nextInt(32);
      segmentNames[partitionId]=new String[segmentCount];
      for (int sequenceNumber=0; sequenceNumber < segmentCount; sequenceNumber++) {
        segmentNames[partitionId][sequenceNumber]=new LLCSegmentName("table",partitionId,sequenceNumber,System.currentTimeMillis()).getSegmentName();
      }
      totalSegmentCount+=segmentCount;
    }
    List<InstanceConfig> instanceConfigs=new ArrayList<InstanceConfig>();
    for (    String instanceName : instanceNames) {
      InstanceConfig instanceConfig=new InstanceConfig(instanceName);
      instanceConfigs.add(instanceConfig);
      instanceConfig.getRecord().setSimpleField(CommonConstants.Helix.IS_SHUTDOWN_IN_PROGRESS,"false");
    }
    ExternalView externalView=new ExternalView("table_REALTIME");
    int[] segmentCountForInstance=new int[instanceCount];
    int maxSegmentCountOnInstance=0;
    for (int partitionId=0; partitionId < segmentNames.length; partitionId++) {
      String[] segments=segmentNames[partitionId];
      for (int replicaId=0; replicaId < replicationFactor; ++replicaId) {
        for (int segmentIndex=0; segmentIndex < segments.length; segmentIndex++) {
          int instanceIndex=-1;
          int randomOffset=random.nextInt(instanceCount);
          for (int j=0; j < instanceCount; j++) {
            int potentialInstanceIndex=(j + randomOffset) % instanceCount;
            if (segmentCountForInstance[potentialInstanceIndex] < maxSegmentCountOnInstance) {
              instanceIndex=potentialInstanceIndex;
              break;
            }
          }
          if (instanceIndex == -1) {
            maxSegmentCountOnInstance++;
            instanceIndex=randomOffset;
          }
          segmentCountForInstance[instanceIndex]++;
          externalView.setState(segmentNames[partitionId][segmentIndex],instanceNames[instanceIndex],"ONLINE");
        }
      }
    }
    long startTime=System.nanoTime();
    List<ServerToSegmentSetMap> routingTables=routingTableBuilder.computeRoutingTableFromExternalView("table_REALTIME",externalView,instanceConfigs);
    long endTime=System.nanoTime();
    totalNanos+=endTime - startTime;
    for (    ServerToSegmentSetMap routingTable : routingTables) {
      Set<String> assignedSegments=new HashSet<String>();
      for (      String server : routingTable.getServerSet()) {
        for (        String segment : routingTable.getSegmentSet(server)) {
          assertFalse(assignedSegments.contains(segment));
          assignedSegments.add(segment);
        }
      }
      assertEquals(assignedSegments.size(),totalSegmentCount);
    }
  }
  LOGGER.warn("Routing table building avg ms: " + totalNanos / (ITERATIONS * 1000000.0));
}
