{
  File mapFile=new File(segmentDirectory,INDEX_MAP_FILE);
  PropertiesConfiguration mapConfig=new PropertiesConfiguration(mapFile);
  Iterator keys=mapConfig.getKeys();
  while (keys.hasNext()) {
    String key=(String)keys.next();
    int lastSeparatorPos=key.lastIndexOf(MAP_KEY_SEPARATOR);
    Preconditions.checkState(lastSeparatorPos != -1,"Key separator not found: " + key + ", segment: "+ segmentDirectory);
    String propertyName=key.substring(lastSeparatorPos + 1);
    int indexSeparatorPos=key.lastIndexOf(MAP_KEY_SEPARATOR,lastSeparatorPos - 1);
    Preconditions.checkState(indexSeparatorPos != -1,"Index separator not found: " + key + " , segment: "+ segmentDirectory);
    String indexName=key.substring(indexSeparatorPos + 1,lastSeparatorPos);
    String columnName=key.substring(0,indexSeparatorPos);
    IndexKey indexKey=new IndexKey(columnName,ColumnIndexType.getValue(indexName));
    IndexEntry entry=columnEntries.get(indexKey);
    if (entry == null) {
      entry=new IndexEntry(indexKey);
      columnEntries.put(indexKey,entry);
    }
    if (propertyName.equals(MAP_KEY_NAME_START_OFFSET)) {
      entry.startOffset=mapConfig.getLong(key);
    }
 else     if (propertyName.equals(MAP_KEY_NAME_SIZE)) {
      entry.size=mapConfig.getLong(key);
    }
 else {
      throw new ConfigurationException("Invalid map file key: " + key + ", segmentDirectory: "+ segmentDirectory.toString());
    }
  }
  for (  Map.Entry<IndexKey,IndexEntry> colIndexEntry : columnEntries.entrySet()) {
    IndexEntry entry=colIndexEntry.getValue();
    if (entry.size < 0 || entry.startOffset < 0) {
      throw new ConfigurationException("Invalid map entry for key: " + colIndexEntry.getKey().toString() + ", segment: "+ segmentDirectory.toString());
    }
  }
}
