{
  IntermediateResultsBlock block=getIntermediateResultsBlock();
  final List<BAggregationFunctionOperator> aggregationFunctionOperatorList1=new ArrayList<BAggregationFunctionOperator>();
  final BReusableFilteredDocIdSetOperator docIdSetOperator1=new BReusableFilteredDocIdSetOperator(null,_indexSegment.getTotalDocs(),5000);
  final Map<String,DataSource> dataSourceMap1=getDataSourceMap();
  final MProjectionOperator projectionOperator1=new MProjectionOperator(dataSourceMap1,docIdSetOperator1);
  for (int i=0; i < _numAggregations; ++i) {
    final BAggregationFunctionOperator aggregationFunctionOperator1=new BAggregationFunctionOperator(_aggregationInfos.get(i),new UReplicatedProjectionOperator(projectionOperator1),true);
    aggregationFunctionOperatorList1.add(aggregationFunctionOperator1);
  }
  final MAggregationOperator aggregationOperator1=new MAggregationOperator(_indexSegment,_aggregationInfos,projectionOperator1,aggregationFunctionOperatorList1);
  final IntermediateResultsBlock block1=(IntermediateResultsBlock)aggregationOperator1.nextBlock();
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.info("Result 2: {}",block1.getAggregationResult().get(i));
  }
  CombineService.mergeTwoBlocks(getAggregationNoFilterBrokerRequest(),block,block1);
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.info("Combined Result : {}",block.getAggregationResult().get(i));
  }
}
