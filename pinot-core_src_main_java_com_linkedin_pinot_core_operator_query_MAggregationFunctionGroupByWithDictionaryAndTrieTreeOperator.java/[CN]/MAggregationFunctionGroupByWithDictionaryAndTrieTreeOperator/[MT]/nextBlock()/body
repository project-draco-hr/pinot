{
  final ProjectionBlock block=(ProjectionBlock)_projectionOperator.nextBlock();
  if (block == null) {
    return null;
  }
  DocIdSetBlock docIdSetBlock=(DocIdSetBlock)block.getDocIdSetBlock();
  BlockDocIdIterator blockDocIdIterator=docIdSetBlock.getBlockDocIdSet().iterator();
  int docId=0;
  for (int i=0; i < _groupBy.getColumnsSize(); ++i) {
    _groupByBlockValIterators[i]=block.getBlock(_groupBy.getColumns().get(i)).getBlockValueSet().iterator();
  }
  while ((docId=blockDocIdIterator.next()) != Constants.EOF) {
    if (!_isGroupByColumnsContainMultiValueColumn) {
      TrieNode currentNode=_rootNode;
      for (int i=0; i < _groupBy.getColumnsSize(); ++i) {
        if (currentNode.getNextGroupedColumnValues() == null) {
          currentNode.setNextGroupedColumnValues(new Int2ObjectOpenHashMap<TrieNode>());
        }
        BlockSingleValIterator blockValIterator=(BlockSingleValIterator)_groupByBlockValIterators[i];
        blockValIterator.skipTo(docId);
        final int groupKey=blockValIterator.nextIntVal();
        if (!currentNode.getNextGroupedColumnValues().containsKey(groupKey)) {
          currentNode.getNextGroupedColumnValues().put(groupKey,new TrieNode());
        }
        currentNode=currentNode.getNextGroupedColumnValues().get(groupKey);
      }
      currentNode.setAggregationResult(_aggregationFunction.aggregate(currentNode.getAggregationResult(),docId,_aggregationFunctionBlocks));
    }
 else {
      List<TrieNode> currentNodesList=new ArrayList<TrieNode>();
      currentNodesList.add(_rootNode);
      for (int i=0; i < _groupBy.getColumnsSize(); ++i) {
        if (_isSingleValueGroupByColumn[i]) {
          for (int j=0; j < currentNodesList.size(); ++j) {
            TrieNode currentNode=currentNodesList.get(j);
            if (currentNode.getNextGroupedColumnValues() == null) {
              currentNode.setNextGroupedColumnValues(new Int2ObjectOpenHashMap<TrieNode>());
            }
            BlockSingleValIterator blockValIterator=(BlockSingleValIterator)_groupByBlockValIterators[i];
            blockValIterator.skipTo(docId);
            final int groupKey=blockValIterator.nextIntVal();
            if (!currentNode.getNextGroupedColumnValues().containsKey(groupKey)) {
              currentNode.getNextGroupedColumnValues().put(groupKey,new TrieNode());
            }
            currentNode=currentNode.getNextGroupedColumnValues().get(groupKey);
            currentNodesList.set(j,currentNode);
          }
        }
 else {
          BlockMultiValIterator blockValIterator=(BlockMultiValIterator)_groupByBlockValIterators[i];
          blockValIterator.skipTo(docId);
          final int maxValue=_groupByBlocks[i].getMetadata().maxNumberOfMultiValues();
          final int[] entries=new int[maxValue];
          int group=blockValIterator.nextIntVal(entries);
          if (group == 0) {
            group=1;
            entries[0]=-1;
          }
          int originSize=currentNodesList.size();
          for (int k=0; k < group - 1; ++k) {
            for (int l=0; l < originSize; ++l) {
              currentNodesList.add(currentNodesList.get(l));
            }
          }
          for (int k=0; k < currentNodesList.size(); ++k) {
            TrieNode currentNode=currentNodesList.get(k);
            if (currentNode.getNextGroupedColumnValues() == null) {
              currentNode.setNextGroupedColumnValues(new Int2ObjectOpenHashMap<TrieNode>());
            }
            if (!currentNode.getNextGroupedColumnValues().containsKey(entries[k / originSize])) {
              currentNode.getNextGroupedColumnValues().put(entries[k / originSize],new TrieNode());
            }
            currentNode=currentNode.getNextGroupedColumnValues().get(entries[k / originSize]);
            currentNodesList.set(k,currentNode);
          }
        }
        for (        TrieNode currentNode : currentNodesList) {
          currentNode.setAggregationResult(_aggregationFunction.aggregate(currentNode.getAggregationResult(),docId,_aggregationFunctionBlocks));
        }
      }
    }
  }
  return null;
}
