{
  List<UUID> treeIds=new ArrayList<>();
  for (  UUID treeId : treeMetadataMap.keySet()) {
    IndexMetadata indexMetadata=treeMetadataMap.get(treeId);
    TimeRange treeTimeRange=new TimeRange(indexMetadata.getMinDataTimeMillis(),indexMetadata.getMaxDataTimeMillis());
    if (!queryTimeRange.isDisjoint(treeTimeRange)) {
      treeIds.add(treeId);
    }
  }
  Comparator<? super UUID> comparator=new Comparator<UUID>(){
    @Override public int compare(    UUID treeId1,    UUID treeId2){
      IndexMetadata indexMetadata1=treeMetadataMap.get(treeId1);
      IndexMetadata indexMetadata2=treeMetadataMap.get(treeId2);
      Long startTime1=indexMetadata1.getStartTimeMillis();
      Long startTime2=indexMetadata2.getStartTimeMillis();
      int ret=startTime1.compareTo(startTime2);
      if (ret == 0) {
        Integer timeGranularity1=timeGranularitySortOrder.get(indexMetadata1.getTimeGranularity().toUpperCase());
        Integer timeGranularity2=timeGranularitySortOrder.get(indexMetadata2.getTimeGranularity().toUpperCase());
        ret=timeGranularity1.compareTo(timeGranularity2);
      }
      return ret;
    }
  }
;
  Collections.sort(treeIds,comparator);
  List<UUID> treeIdsToQuery=new ArrayList<>();
  TimeRange lastSelectedRange=null;
  for (  UUID treeId : treeIds) {
    IndexMetadata indexMetadata=treeMetadataMap.get(treeId);
    TimeRange treeRange=new TimeRange(indexMetadata.getStartTimeMillis(),indexMetadata.getEndTimeMillis());
    if (lastSelectedRange == null || lastSelectedRange.getEnd() <= treeRange.getStart()) {
      lastSelectedRange=treeRange;
      treeIdsToQuery.add(treeId);
      LOGGER.info("Selecting treeId:{} with TimeRange:{}",treeId,treeRange);
    }
  }
  return treeIdsToQuery;
}
