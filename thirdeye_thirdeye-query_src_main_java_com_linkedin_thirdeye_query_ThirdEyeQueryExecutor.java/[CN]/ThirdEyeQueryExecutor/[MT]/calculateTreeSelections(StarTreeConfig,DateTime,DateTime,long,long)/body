{
  final DateTime queryStartInMillis=new DateTime(queryStart.getMillis() - startOffset);
  final TimeRange inputQueryTimeRange=new TimeRange(queryStartInMillis.getMillis(),queryEnd.getMillis());
  long queryStartTime=dateTimeToCollectionTime(config,queryStartInMillis);
  long queryEndTime=dateTimeToCollectionTime(config,queryEnd);
  final Pair<Map<UUID,IndexMetadata>,Map<UUID,IndexMetadata>> metadataMaps=getMetadataMaps(config);
  final Map<UUID,IndexMetadata> immutableMetadataMap=metadataMaps.getFirst();
  final Map<UUID,IndexMetadata> realTimeMetadataMap=metadataMaps.getSecond();
  LOGGER.info("Selecting trees to query for queryTimeRange:{}",inputQueryTimeRange);
  List<UUID> immutableTreeIdsToQuery=selectTreesToQuery(immutableMetadataMap,inputQueryTimeRange);
  if (collectionWindowMillis > 0) {
    long collectionWindow=dateTimeToCollectionTime(config,new DateTime(collectionWindowMillis));
    queryStartTime=(queryStartTime / collectionWindow) * collectionWindow;
    queryEndTime=(queryEndTime / collectionWindow + 1) * collectionWindow;
  }
  final TimeRange queryTimeRange=new TimeRange(queryStartTime,queryEndTime);
  final Map<UUID,TimeRange> timeRangesToQuery=new HashMap<>();
  for (  UUID treeId : immutableTreeIdsToQuery) {
    timeRangesToQuery.put(treeId,queryTimeRange);
  }
  Long maxImmutableTimeMillis=null;
  for (  UUID treeId : immutableTreeIdsToQuery) {
    IndexMetadata indexMetadata=immutableMetadataMap.get(treeId);
    if (maxImmutableTimeMillis == null || maxImmutableTimeMillis < indexMetadata.getMaxDataTimeMillis()) {
      maxImmutableTimeMillis=indexMetadata.getMaxDataTimeMillis();
    }
  }
  Long realTimeStartTime=null;
  Long realTimeStartTimeMillis=null;
  if (maxImmutableTimeMillis == null) {
    realTimeStartTime=queryTimeRange.getStart();
    realTimeStartTimeMillis=queryStartInMillis.getMillis();
  }
 else   if (maxImmutableTimeMillis < queryEnd.getMillis()) {
    realTimeStartTime=dateTimeToCollectionTime(config,new DateTime(maxImmutableTimeMillis));
    realTimeStartTimeMillis=maxImmutableTimeMillis;
    long collectionWindow=dateTimeToCollectionTime(config,new DateTime(collectionWindowMillis));
    if (collectionWindow > 0) {
      realTimeStartTime=(realTimeStartTime / collectionWindow) * collectionWindow;
    }
  }
  final List<UUID> realTimeTreeIdsToQuery=new ArrayList<>();
  if (realTimeStartTime != null) {
    TimeRange mutableTimeRange=new TimeRange(realTimeStartTime,queryTimeRange.getEnd());
    TimeRange mutableTimeRangeMillis=new TimeRange(realTimeStartTimeMillis,queryEnd.getMillis());
    realTimeTreeIdsToQuery.addAll(selectTreesToQuery(realTimeMetadataMap,mutableTimeRangeMillis));
    StarTree mutableTree=starTreeManager.getMutableStarTree(config.getCollection());
    realTimeTreeIdsToQuery.add(mutableTree.getRoot().getId());
    for (    UUID treeId : realTimeTreeIdsToQuery) {
      timeRangesToQuery.put(treeId,mutableTimeRange);
    }
  }
  return new TreeSelections(immutableTreeIdsToQuery,realTimeTreeIdsToQuery,timeRangesToQuery);
}
