{
  final List<TestGroupByAggreationQuery> groupByCalls=AVRO_QUERY_GENERATOR.giveMeNGroupByAggregationQueries(10000);
  int counter=0;
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  for (  final TestGroupByAggreationQuery groupBy : groupByCalls) {
    LOGGER.info("running " + counter + " : "+ groupBy.pql);
    final BrokerRequest brokerRequest=REQUEST_COMPILER.compileToBrokerRequest(groupBy.pql);
    InstanceRequest instanceRequest=new InstanceRequest(counter++,brokerRequest);
    instanceRequest.setSearchSegments(new ArrayList<String>());
    instanceRequest.getSearchSegments().add(segmentName);
    final DataTable instanceResponse=QUERY_EXECUTOR.processQuery(instanceRequest);
    instanceResponseMap.clear();
    instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
    final BrokerResponseNative brokerResponse=REDUCE_SERVICE.reduceOnDataTable(brokerRequest,instanceResponseMap);
    LOGGER.info("BrokerResponse is " + brokerResponse.getAggregationResults().get(0));
    LOGGER.info("Result from avro is : " + groupBy.groupResults);
    assertGroupByResults(brokerResponse.getAggregationResults().get(0).getGroupByResult(),groupBy.groupResults);
  }
}
