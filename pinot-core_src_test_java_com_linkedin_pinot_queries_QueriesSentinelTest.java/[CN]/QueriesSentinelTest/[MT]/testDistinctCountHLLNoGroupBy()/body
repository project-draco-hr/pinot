{
  int counter=0;
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  final List<TestSimpleAggreationQuery> aggCalls=new ArrayList<TestSimpleAggreationQuery>();
  for (int i=1; i <= 5; i++) {
    aggCalls.add(new TestSimpleAggreationQuery("select distinctcount(column" + i + ") from testTable limit 0",0.0));
    aggCalls.add(new TestSimpleAggreationQuery("select distinctcounthll(column" + i + ") from testTable limit 0",0.0));
  }
  boolean isAccurate=true;
  double accurateValue=0;
  for (  TestSimpleAggreationQuery aggCall : aggCalls) {
    LOGGER.info("running " + counter + " : "+ aggCall.pql);
    final BrokerRequest brokerRequest=RequestConverter.fromJSON(REQUEST_COMPILER.compile(aggCall.pql));
    InstanceRequest instanceRequest=new InstanceRequest(counter++,brokerRequest);
    instanceRequest.setSearchSegments(new ArrayList<String>());
    instanceRequest.getSearchSegments().add(segmentName);
    final DataTable instanceResponse=QUERY_EXECUTOR.processQuery(instanceRequest);
    instanceResponseMap.clear();
    instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
    final BrokerResponse brokerResponse=REDUCE_SERVICE.reduceOnDataTable(brokerRequest,instanceResponseMap);
    LOGGER.info("BrokerResponse is " + brokerResponse.getAggregationResults().get(0));
    double val=Double.parseDouble(brokerResponse.getAggregationResults().get(0).getString("value"));
    if (isAccurate) {
      accurateValue=val;
      isAccurate=false;
    }
 else {
      TestUtils.assertApproximation(val,accurateValue,0.1);
      isAccurate=true;
    }
  }
}
