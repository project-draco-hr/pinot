{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(StarTreeBootstrapPhaseTwoJob.class);
  job.setMapperClass(BootstrapPhaseTwoMapper.class);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setReducerClass(BootstrapPhaseTwoReducer.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(NullWritable.class);
  job.setOutputFormatClass(NullOutputFormat.class);
  String numReducers=props.getProperty("num.reducers");
  if (numReducers != null) {
    job.setNumReduceTasks(Integer.parseInt(numReducers));
  }
 else {
    job.setNumReduceTasks(10);
  }
  LOGGER.info("Setting number of reducers : " + job.getNumReduceTasks());
  Configuration configuration=job.getConfiguration();
  FileSystem fs=FileSystem.get(configuration);
  String inputPathDir=getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_PHASE2_INPUT_PATH);
  getAndSetConfiguration(configuration,STAR_TREE_GENERATION_OUTPUT_PATH);
  getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_PHASE2_CONFIG_PATH);
  Path outputPath=new Path(getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_PHASE2_OUTPUT_PATH));
  LOGGER.info("Input path dir: " + inputPathDir);
  for (  String inputPath : inputPathDir.split(",")) {
    LOGGER.info("Adding input:" + inputPath);
    Path input=new Path(inputPath);
    FileInputFormat.addInputPath(job,input);
  }
  if (fs.exists(outputPath)) {
    fs.delete(outputPath,true);
  }
  FileOutputFormat.setOutputPath(job,outputPath);
  String thirdEyeUri=props.getProperty(ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getName());
  if (thirdEyeUri != null) {
    job.getConfiguration().set(ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getName(),thirdEyeUri);
  }
  job.waitForCompletion(true);
  return job;
}
