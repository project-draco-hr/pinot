{
  LOG.info("BootstrapPhaseTwo.BootstrapPhaseTwoReducer.setup()");
  Configuration configuration=context.getConfiguration();
  FileSystem dfs=FileSystem.get(configuration);
  Path configPath=new Path(configuration.get(STAR_TREE_BOOTSTRAP_PHASE2_CONFIG_PATH.toString()));
  hdfsOutputDir=configuration.get(STAR_TREE_BOOTSTRAP_PHASE2_OUTPUT_PATH.toString());
  try {
    starTreeConfig=StarTreeConfig.decode(dfs.open(configPath));
    config=StarTreeBootstrapPhaseTwoConfig.fromStarTreeConfig(starTreeConfig);
    dimensionNames=config.getDimensionNames();
    metricNames=config.getMetricNames();
    metricTypes=config.getMetricTypes();
    metricSchema=new MetricSchema(config.getMetricNames(),metricTypes);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  String starTreeOutputPath=context.getConfiguration().get(STAR_TREE_GENERATION_OUTPUT_PATH.toString());
  try {
    collectionName=config.getCollectionName();
    pathToTree=new Path(starTreeOutputPath + "/" + "tree.bin");
    InputStream is=dfs.open(pathToTree);
    starTreeRootNode=StarTreePersistanceUtil.loadStarTree(is);
    LinkedList<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
    StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTreeRootNode);
    LOG.info("Num leaf Nodes in star tree:" + leafNodes.size());
    leafNodesMap=new HashMap<UUID,StarTreeNode>();
    for (    StarTreeNode node : leafNodes) {
      leafNodesMap.put(node.getId(),node);
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  try {
    collectionName=config.getCollectionName();
    String tarGZName="dimensionStore.tar.gz";
    Path pathToDimensionIndexTarGz=new Path(starTreeOutputPath,tarGZName);
    dfs.copyToLocalFile(pathToDimensionIndexTarGz,new Path(tarGZName));
    new File(localInputDataDir).mkdirs();
    TarGzCompressionUtils.unTar(new File(tarGZName),new File(localInputDataDir));
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
  new File(localOutputDataDir + "/metricStore").mkdirs();
}
