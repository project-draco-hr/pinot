{
  boolean singleValue=true;
  String colName="single_value_col";
  FieldSpec spec=new DimensionFieldSpec(colName,DataType.INT,singleValue);
  int numDocs=20;
  int[] data=new int[numDocs];
  int cardinality=10;
  File indexDirHeap=new File("/tmp/indexDirHeap");
  FileUtils.forceMkdir(indexDirHeap);
  indexDirHeap.mkdirs();
  File indexDirOffHeap=new File("/tmp/indexDirOffHeap");
  FileUtils.forceMkdir(indexDirOffHeap);
  indexDirOffHeap.mkdirs();
  File bitmapIndexFileOffHeap=new File(indexDirOffHeap,colName + V1Constants.Indexes.BITMAP_INVERTED_INDEX_FILE_EXTENSION);
  File bitmapIndexFileHeap=new File(indexDirHeap,colName + V1Constants.Indexes.BITMAP_INVERTED_INDEX_FILE_EXTENSION);
  Random r=new Random();
  Map<Integer,List<Integer>> postingListMap=new HashMap<>();
  for (int i=0; i < cardinality; i++) {
    postingListMap.put(i,new ArrayList<>());
  }
  for (int i=0; i < numDocs; i++) {
    data[i]=r.nextInt(cardinality);
    LOGGER.debug("docId:" + i + "  dictId:"+ data[i]);
    postingListMap.get(data[i]).add(i);
  }
  for (int i=0; i < cardinality; i++) {
    LOGGER.debug("Posting list for " + i + " : "+ postingListMap.get(i));
  }
  OffHeapBitmapInvertedIndexCreator offHeapCreator=new OffHeapBitmapInvertedIndexCreator(indexDirOffHeap,cardinality,numDocs,numDocs,spec);
  for (int i=0; i < numDocs; i++) {
    offHeapCreator.add(i,data[i]);
  }
  offHeapCreator.seal();
  validate(colName,bitmapIndexFileOffHeap,cardinality,postingListMap);
  HeapBitmapInvertedIndexCreator heapCreator=new HeapBitmapInvertedIndexCreator(indexDirHeap,cardinality,numDocs,numDocs,spec);
  for (int i=0; i < numDocs; i++) {
    heapCreator.add(i,data[i]);
  }
  heapCreator.seal();
  validate(colName,bitmapIndexFileHeap,cardinality,postingListMap);
  Assert.assertEquals(bitmapIndexFileHeap.length(),bitmapIndexFileHeap.length());
  Assert.assertTrue(FileUtils.contentEquals(bitmapIndexFileHeap,bitmapIndexFileHeap));
  FileUtils.deleteQuietly(indexDirHeap);
  FileUtils.deleteQuietly(indexDirOffHeap);
}
