{
  this.nodeId=nodeId;
  this.dimensionNames=dimensionNames;
  this.metricNames=metricNames;
  this.bufferSize=bufferSize;
  this.useDirect=useDirect;
  this.targetLoadFactor=targetLoadFactor;
  this.nextValueId=new AtomicInteger(1);
  this.sync=new Object();
  this.recordCount=new AtomicInteger(0);
  this.entrySize=dimensionNames.size() * (Integer.SIZE / 8) + metricNames.size() * (Integer.SIZE / 8) + Long.SIZE / 8;
  this.forwardIndex=new HashMap<String,Map<String,Integer>>();
  this.reverseIndex=new HashMap<String,Map<Integer,String>>();
  for (  String dimensionName : dimensionNames) {
    Map<String,Integer> forward=new HashMap<String,Integer>();
    forward.put(StarTreeConstants.STAR,StarTreeConstants.STAR_VALUE);
    forward.put(StarTreeConstants.OTHER,StarTreeConstants.OTHER_VALUE);
    forwardIndex.put(dimensionName,forward);
    Map<Integer,String> reverse=new HashMap<Integer,String>();
    reverse.put(StarTreeConstants.STAR_VALUE,StarTreeConstants.STAR);
    reverse.put(StarTreeConstants.OTHER_VALUE,StarTreeConstants.OTHER);
    reverseIndex.put(dimensionName,reverse);
  }
  this.minTime=new AtomicLong(Long.MAX_VALUE);
  this.maxTime=new AtomicLong(0);
}
