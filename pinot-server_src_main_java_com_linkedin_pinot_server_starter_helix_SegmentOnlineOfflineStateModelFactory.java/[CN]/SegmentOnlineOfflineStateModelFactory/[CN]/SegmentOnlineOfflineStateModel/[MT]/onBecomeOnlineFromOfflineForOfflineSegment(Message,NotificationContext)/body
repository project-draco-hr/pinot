{
  final String segmentId=message.getPartitionName();
  final String tableName=message.getResourceName();
  ZkHelixPropertyStore<ZNRecord> propertyStore=ZkUtils.getZkPropertyStore(context.getManager(),_helixClusterName);
  OfflineSegmentZKMetadata offlineSegmentZKMetadata=ZKMetadataProvider.getOfflineSegmentZKMetadata(propertyStore,tableName,segmentId);
  LOGGER.info("Trying to load segment : " + segmentId + " for table : "+ tableName);
  try {
    SegmentMetadata segmentMetadataForCheck=new SegmentMetadataImpl(offlineSegmentZKMetadata);
    SegmentMetadata segmentMetadataFromServer=INSTANCE_DATA_MANAGER.getSegmentMetadata(tableName,segmentMetadataForCheck.getName());
    if (segmentMetadataFromServer == null) {
      final String localSegmentDir=new File(new File(INSTANCE_DATA_MANAGER.getSegmentDataDirectory(),tableName),segmentId).toString();
      if (new File(localSegmentDir).exists()) {
        try {
          segmentMetadataFromServer=SEGMENT_METADATA_LOADER.loadIndexSegmentMetadataFromDir(localSegmentDir);
        }
 catch (        Exception e) {
          LOGGER.error("Failed to load segment metadata from local: " + localSegmentDir);
          FileUtils.deleteQuietly(new File(localSegmentDir));
          segmentMetadataFromServer=null;
        }
        try {
          if (!isNewSegmentMetadata(segmentMetadataFromServer,segmentMetadataForCheck)) {
            LOGGER.info("Trying to bootstrap segment from local!");
            INSTANCE_DATA_MANAGER.addSegment(segmentMetadataFromServer);
            return;
          }
        }
 catch (        Exception e) {
          LOGGER.error("Failed to load segment from local, will try to reload it from controller!");
          FileUtils.deleteQuietly(new File(localSegmentDir));
          segmentMetadataFromServer=null;
        }
      }
    }
    if (isNewSegmentMetadata(segmentMetadataFromServer,segmentMetadataForCheck)) {
      if (segmentMetadataFromServer == null) {
        LOGGER.info("Loading new segment from controller - " + segmentMetadataForCheck.getName());
      }
 else {
        LOGGER.info("Trying to refresh a segment with new data.");
      }
      int retryCount;
      for (retryCount=0; retryCount < SEGMENT_LOAD_MAX_RETRY_COUNT; ++retryCount) {
        long attemptStartTime=System.currentTimeMillis();
        try {
          final String uri=offlineSegmentZKMetadata.getDownloadUrl();
          final String localSegmentDir=downloadSegmentToLocal(uri,tableName,segmentId);
          final SegmentMetadata segmentMetadata=SEGMENT_METADATA_LOADER.loadIndexSegmentMetadataFromDir(localSegmentDir);
          INSTANCE_DATA_MANAGER.addSegment(segmentMetadata);
          break;
        }
 catch (        Exception e) {
          long attemptDurationMillis=System.currentTimeMillis() - attemptStartTime;
          LOGGER.warn("Caught exception while loading segment " + segmentId + ", attempt "+ (retryCount + 1)+ " of "+ SEGMENT_LOAD_MAX_RETRY_COUNT,e);
          if (retryCount < SEGMENT_LOAD_MAX_RETRY_COUNT) {
            double maxRetryDurationMultiplier=Math.pow(2.0,(retryCount + 1));
            double retryDurationMultiplier=Math.random() * maxRetryDurationMultiplier + 1.0;
            long waitTime=(long)((SEGMENT_LOAD_MIN_RETRY_DELAY_MILLIS + attemptDurationMillis) * retryDurationMultiplier);
            LOGGER.warn("Waiting for " + TimeUnit.MILLISECONDS.toSeconds(waitTime) + " seconds to retry");
            long waitEndTime=System.currentTimeMillis() + waitTime;
            while (System.currentTimeMillis() < waitEndTime) {
              try {
                Thread.sleep(Math.max(System.currentTimeMillis() - waitEndTime,1L));
              }
 catch (              InterruptedException ie) {
              }
            }
          }
        }
      }
      if (SEGMENT_LOAD_MAX_RETRY_COUNT <= retryCount) {
        String msg="Failed to load segment " + segmentId + " after "+ retryCount+ " retries";
        LOGGER.error(msg);
        throw new RuntimeException(msg);
      }
    }
 else {
      LOGGER.info("Get already loaded segment again, will do nothing.");
    }
  }
 catch (  final Exception e) {
    LOGGER.error("Cannot load segment : " + segmentId + "!\n",e);
    Utils.rethrowException(e);
    throw new AssertionError("Should not reach this");
  }
}
