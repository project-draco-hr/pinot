{
  List<File> uncompressedFiles=null;
  if (uri.startsWith("hdfs:")) {
    throw new UnsupportedOperationException("Not implemented yet");
  }
 else {
    File tempSegmentFile=new File(INSTANCE_DATA_MANAGER.getSegmentFileDirectory() + "/" + resourceName+ "/temp_"+ segmentId+ "_"+ System.currentTimeMillis());
    if (uri.startsWith("http:")) {
      final File tempFile=new File(INSTANCE_DATA_MANAGER.getSegmentFileDirectory(),segmentId + ".tar.gz");
      final long httpGetResponseContentLength=FileUploadUtils.getFile(uri,tempFile);
      LOGGER.info("Downloaded file from " + uri + " to "+ tempFile+ "; Http GET response content length: "+ httpGetResponseContentLength+ ", Length of downloaded file : "+ tempFile.length());
      LOGGER.info("Trying to uncompress segment tar file from " + tempFile + " to "+ tempSegmentFile);
      uncompressedFiles=TarGzCompressionUtils.unTar(tempFile,tempSegmentFile);
      FileUtils.deleteQuietly(tempFile);
    }
 else {
      uncompressedFiles=TarGzCompressionUtils.unTar(new File(uri),tempSegmentFile);
    }
    final File segmentDir=new File(new File(INSTANCE_DATA_MANAGER.getSegmentDataDirectory(),resourceName),segmentId);
    Thread.sleep(1000);
    if (segmentDir.exists()) {
      LOGGER.info("Deleting the directory and recreating it again- " + segmentDir.getAbsolutePath());
      FileUtils.deleteDirectory(segmentDir);
    }
    LOGGER.info("Move the dir - " + tempSegmentFile.listFiles()[0] + " to "+ segmentDir.getAbsolutePath()+ ". The segment id is - "+ segmentId);
    FileUtils.moveDirectory(tempSegmentFile.listFiles()[0],segmentDir);
    FileUtils.deleteDirectory(tempSegmentFile);
    Thread.sleep(1000);
    LOGGER.info("Was able to succesfully rename the dir to match the segmentId - " + segmentId);
    new File(segmentDir,"finishedLoading").createNewFile();
    return segmentDir.getAbsolutePath();
  }
}
