{
  LOG.info("StarTreeGenerationJob.StarTreeGenerationMapper.setup()");
  mos=new MultipleOutputs<BytesWritable,BytesWritable>(context);
  Configuration configuration=context.getConfiguration();
  FileSystem fileSystem=FileSystem.get(configuration);
  Path configPath=new Path(configuration.get(STAR_TREE_GEN_CONFIG_PATH.toString()));
  try {
    StarTreeConfig starTreeConfig=StarTreeConfig.decode(fileSystem.open(configPath));
    config=StarTreeGenerationConfig.fromStarTreeConfig(starTreeConfig);
    dimensionNames=config.getDimensionNames();
    dimensionNameToIndexMapping=new HashMap<String,Integer>();
    for (int i=0; i < dimensionNames.size(); i++) {
      dimensionNameToIndexMapping.put(dimensionNames.get(i),i);
    }
    metricNames=config.getMetricNames();
    metricTypes=config.getMetricTypes();
    metricSchema=new MetricSchema(config.getMetricNames(),metricTypes);
    List<MetricSpec> metricSpecs=new ArrayList<MetricSpec>();
    for (int i=0; i < metricNames.size(); i++) {
      metricSpecs.add(new MetricSpec(metricNames.get(i),metricTypes.get(i)));
    }
    List<DimensionSpec> dimensionSpecs=new ArrayList<DimensionSpec>();
    for (    String dimensionName : dimensionNames) {
      dimensionSpecs.add(new DimensionSpec(dimensionName));
    }
    collectionName=config.getCollectionName();
    String timeColumnName=config.getTimeColumnName();
    List<String> splitOrder=config.getSplitOrder();
    int maxRecordStoreEntries=config.getSplitThreshold();
    StarTreeConfig genConfig=new StarTreeConfig.Builder().setRecordStoreFactoryClass(StarTreeRecordStoreFactoryLogBufferImpl.class.getCanonicalName()).setCollection(collectionName).setDimensions(dimensionSpecs).setMetrics(metricSpecs).setTime(starTreeConfig.getTime()).setSplit(new SplitSpec(maxRecordStoreEntries,splitOrder)).build();
    starTree=new StarTreeImpl(genConfig);
    starTree.open();
    hdfsOutputPath=context.getConfiguration().get(STAR_TREE_GEN_OUTPUT_PATH.toString()) + "/" + "star-tree-"+ collectionName;
    LOG.info(genConfig.encode());
    emptyMetricValuesMap=new HashMap<String,Number>();
    metricTypesMap=new HashMap<String,MetricType>();
    for (int i=0; i < metricNames.size(); i++) {
      emptyMetricValuesMap.put(metricNames.get(i),0);
      metricTypesMap.put(metricNames.get(i),config.getMetricTypes().get(i));
    }
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
