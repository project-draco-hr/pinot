def add_jobs_subparser(subparsers):
    ' GET, POST <id>, POST <id> (adhoc, optional start+end), DELETE <id> '
    jobs = subparsers.add_parser('jobs', help='anomaly function schedules')
    jobs_subparsers = jobs.add_subparsers()
    show_parser = jobs_subparsers.add_parser('show', help='show all active jobs')
    show_parser.set_defaults(func=show_active_jobs)
    enable_parser = jobs_subparsers.add_parser('enable', help='enable job schedule')
    enable_parser.add_argument('inps', type=int, nargs='+', help='job ids', metavar='ids')
    enable_parser.set_defaults(func=enable_job)
    adhoc_parser = jobs_subparsers.add_parser('adhoc', help='run adhoc job')
    adhoc_parser.add_argument('inps', type=int, nargs='+', help='job ids', metavar='ids')
    adhoc_parser.add_argument('--start', help='start time in IS08601 or as daysago(#)', required=False)
    adhoc_parser.add_argument('--end', help='end time in IS08601 or as daysago(#)', required=False)
    adhoc_parser.set_defaults(func=adhoc_job)
    from_file_parser = jobs_subparsers.add_parser('from_file', help='send adhoc function spec from a file configuration')
    from_file_parser.add_argument('inps', nargs='+', help='JSON files specifying function spec to be created', metavar='file_paths')
    from_file_parser.add_argument('--id', help='id of existing function to group anomalies under', required=True)
    from_file_parser.add_argument('--start', help='start time in IS08601 or as daysago(#)', required=False)
    from_file_parser.add_argument('--end', help='end time in IS08601 or as daysago(#)', required=False)
    from_file_parser.set_defaults(func=test_function_spec_from_file)
    disable_parser = jobs_subparsers.add_parser('disable', help='disable job schedule')
    disable_parser.add_argument('inps', type=int, nargs='+', help='job ids', metavar='ids')
    disable_parser.set_defaults(func=disable_job)
