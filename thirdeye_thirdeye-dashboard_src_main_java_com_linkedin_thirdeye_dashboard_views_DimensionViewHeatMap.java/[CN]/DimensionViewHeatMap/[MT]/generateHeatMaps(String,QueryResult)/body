{
  int dimensionIdx=queryResult.getDimensions().indexOf(dimension);
  if (queryResult.getData().isEmpty()) {
    return Collections.emptyList();
  }
  Map<String,String> metricAliases=new HashMap<>();
  for (int i=0; i < schema.getMetrics().size(); i++) {
    metricAliases.put(schema.getMetrics().get(i),schema.getMetricAliases().get(i));
  }
  Map<String,String> dimensionAliases=new HashMap<>();
  for (int i=0; i < schema.getDimensions().size(); i++) {
    dimensionAliases.put(schema.getDimensions().get(i),schema.getDimensionAliases().get(i));
  }
  Map<String,Set<String>> snapshotValues=new HashMap<>();
  for (  String metricName : queryResult.getMetrics()) {
    snapshotValues.put(metricName,new HashSet<String>());
  }
  try {
    String[][] snapshot=SnapshotUtils.snapshot(2,queryResult);
    for (int i=0; i < queryResult.getMetrics().size(); i++) {
      String[] snapshotCombinations=snapshot[i];
      String metricName=queryResult.getMetrics().get(i);
      for (      String combinationString : snapshotCombinations) {
        if (SnapshotUtils.REST.equals(combinationString)) {
          continue;
        }
        List<String> combination=objectMapper.readValue(combinationString.getBytes(),LIST_TYPE_REFERENCE);
        String value=combination.get(dimensionIdx);
        snapshotValues.get(metricName).add(value);
      }
    }
    LOGGER.info("snapshotValues={}",snapshotValues);
  }
 catch (  Exception e) {
    LOGGER.error("Error generating snapshot",e);
  }
  Map<String,List<HeatMapCell>> allCells=new HashMap<>();
  Map<String,DescriptiveStatistics> allBaselineStats=new HashMap<>();
  Map<String,DescriptiveStatistics> allCurrentStats=new HashMap<>();
  for (int i=0; i < queryResult.getMetrics().size(); i++) {
    String metric=queryResult.getMetrics().get(i);
    allCells.put(metric,new ArrayList<HeatMapCell>());
    allBaselineStats.put(metric,new DescriptiveStatistics());
    allCurrentStats.put(metric,new DescriptiveStatistics());
  }
  for (  Map.Entry<String,Map<String,Number[]>> entry : queryResult.getData().entrySet()) {
    List<String> combination=objectMapper.readValue(entry.getKey(),LIST_TYPE_REFERENCE);
    String value=combination.get(dimensionIdx);
    long minTime=-1;
    long maxTime=-1;
    for (    String timeString : entry.getValue().keySet()) {
      long time=Long.valueOf(timeString);
      if (minTime == -1 || time < minTime) {
        minTime=time;
      }
      if (maxTime == -1 || time > maxTime) {
        maxTime=time;
      }
    }
    for (int i=0; i < queryResult.getMetrics().size(); i++) {
      String metric=queryResult.getMetrics().get(i);
      Number baselineValue=getMetricValue(entry.getValue().get(String.valueOf(minTime)),i);
      Number currentValue=getMetricValue(entry.getValue().get(String.valueOf(maxTime)),i);
      if (baselineValue != null) {
        allBaselineStats.get(metric).addValue(baselineValue.doubleValue());
      }
      if (currentValue != null) {
        allCurrentStats.get(metric).addValue(currentValue.doubleValue());
      }
      HeatMapCell cell=new HeatMapCell(objectMapper,value);
      cell.addStat(baselineValue);
      cell.addStat(currentValue);
      allCells.get(metric).add(cell);
    }
  }
  List<HeatMap> heatMaps=new ArrayList<>();
  for (  Map.Entry<String,List<HeatMapCell>> entry : allCells.entrySet()) {
    String metric=entry.getKey();
    DescriptiveStatistics baselineStats=allBaselineStats.get(metric);
    DescriptiveStatistics currentStats=allCurrentStats.get(metric);
    NormalDistribution baselineDist=getDistribution(baselineStats);
    NormalDistribution currentDist=getDistribution(currentStats);
    for (    HeatMapCell cell : entry.getValue()) {
      Number baseline=cell.getStats().get(0);
      Number current=cell.getStats().get(1);
      if (baseline == null || baselineDist == null) {
        cell.addStat(null);
      }
 else {
        cell.addStat(baselineDist.cumulativeProbability(baseline.doubleValue()));
      }
      if (current == null || currentDist == null) {
        cell.addStat(null);
      }
 else {
        cell.addStat(currentDist.cumulativeProbability(current.doubleValue()));
      }
      if (baselineStats.getSum() > 0 && currentStats.getSum() > 0) {
        double currentContribution=current == null ? 0 : current.doubleValue() / currentStats.getSum();
        double baselineContribution=baseline == null ? 0 : baseline.doubleValue() / baselineStats.getSum();
        cell.addStat(currentContribution - baselineContribution);
      }
 else {
        cell.addStat(null);
      }
      if (baselineStats.getSum() > 0) {
        double currentValue=current == null ? 0 : current.doubleValue();
        double baselineValue=baseline == null ? 0 : baseline.doubleValue();
        cell.addStat((currentValue - baselineValue) / baselineStats.getSum());
      }
 else {
        cell.addStat(null);
      }
      if (snapshotValues.get(metric).contains(cell.getValue())) {
        cell.addStat(1);
      }
 else {
        cell.addStat(0);
      }
    }
    heatMaps.add(new HeatMap(objectMapper,entry.getKey(),metricAliases.get(entry.getKey()),dimension,dimensionAliases.get(dimension),entry.getValue(),Arrays.asList("baseline_value","current_value","baseline_cdf_value","current_cdf_value","contribution_difference","volume_difference","snapshot_category")));
  }
  return heatMaps;
}
