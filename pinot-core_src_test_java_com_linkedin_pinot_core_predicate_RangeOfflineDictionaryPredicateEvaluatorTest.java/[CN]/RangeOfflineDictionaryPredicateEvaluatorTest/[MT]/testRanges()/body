{
  int rangeStart, rangeEnd;
{
    rangeStart=2;
    rangeEnd=5;
    ImmutableDictionaryReader reader=createReader(rangeStart,rangeEnd);
    RangePredicate predicate=createPredicate(rangeStart,true,rangeEnd,true);
    PredicateEvaluator evaluator=new RangeOfflineDictionaryPredicateEvaluator(predicate,reader);
    Assert.assertFalse(evaluator.alwaysFalse());
    Assert.assertTrue(evaluator.apply(rangeStart));
    Assert.assertTrue(evaluator.apply(rangeEnd));
    Assert.assertTrue(evaluator.apply(rangeStart + 1));
    Assert.assertFalse(evaluator.apply(rangeStart - 1));
    Assert.assertFalse(evaluator.apply(rangeEnd + 1));
    int[] dictIds=new int[]{1,3,7};
    Assert.assertTrue(evaluator.apply(dictIds));
    Assert.assertFalse(evaluator.apply(dictIds,1));
    dictIds=evaluator.getMatchingDictionaryIds();
    verifyDictId(dictIds,rangeStart,rangeEnd);
  }
{
    rangeStart=2;
    rangeEnd=5;
    ImmutableDictionaryReader reader=createReader(rangeStart,rangeEnd);
    RangePredicate predicate=createPredicate(rangeStart,false,rangeEnd,true);
    PredicateEvaluator evaluator=new RangeOfflineDictionaryPredicateEvaluator(predicate,reader);
    Assert.assertFalse(evaluator.alwaysFalse());
    Assert.assertFalse(evaluator.apply(rangeStart));
    Assert.assertTrue(evaluator.apply(rangeEnd));
    Assert.assertTrue(evaluator.apply(rangeStart + 1));
    Assert.assertFalse(evaluator.apply(rangeStart - 1));
    Assert.assertFalse(evaluator.apply(rangeEnd + 1));
    int[] dictIds=new int[]{1,3,7};
    Assert.assertTrue(evaluator.apply(dictIds));
    Assert.assertFalse(evaluator.apply(dictIds,1));
    dictIds=evaluator.getMatchingDictionaryIds();
    verifyDictId(dictIds,rangeStart + 1,rangeEnd);
  }
{
    rangeStart=2;
    rangeEnd=5;
    ImmutableDictionaryReader reader=createReader(rangeStart,rangeEnd);
    RangePredicate predicate=createPredicate(rangeStart,true,rangeEnd,false);
    PredicateEvaluator evaluator=new RangeOfflineDictionaryPredicateEvaluator(predicate,reader);
    Assert.assertFalse(evaluator.alwaysFalse());
    Assert.assertTrue(evaluator.apply(rangeStart));
    Assert.assertFalse(evaluator.apply(rangeEnd));
    Assert.assertTrue(evaluator.apply(rangeStart + 1));
    Assert.assertFalse(evaluator.apply(rangeStart - 1));
    Assert.assertFalse(evaluator.apply(rangeEnd + 1));
    int[] dictIds=new int[]{1,3,7};
    Assert.assertTrue(evaluator.apply(dictIds));
    Assert.assertFalse(evaluator.apply(dictIds,1));
    dictIds=evaluator.getMatchingDictionaryIds();
    verifyDictId(dictIds,rangeStart,rangeEnd - 1);
  }
{
    rangeStart=2;
    rangeEnd=5;
    ImmutableDictionaryReader reader=createReader(rangeStart,rangeEnd);
    RangePredicate predicate=createPredicate(rangeStart,false,rangeEnd,false);
    PredicateEvaluator evaluator=new RangeOfflineDictionaryPredicateEvaluator(predicate,reader);
    Assert.assertFalse(evaluator.alwaysFalse());
    Assert.assertFalse(evaluator.apply(rangeStart));
    Assert.assertFalse(evaluator.apply(rangeEnd));
    Assert.assertTrue(evaluator.apply(rangeStart + 1));
    Assert.assertFalse(evaluator.apply(rangeStart - 1));
    Assert.assertFalse(evaluator.apply(rangeEnd + 1));
    int[] dictIds=new int[]{1,3,7};
    Assert.assertTrue(evaluator.apply(dictIds));
    Assert.assertFalse(evaluator.apply(dictIds,1));
    dictIds=evaluator.getMatchingDictionaryIds();
    verifyDictId(dictIds,rangeStart + 1,rangeEnd - 1);
  }
}
