{
  final int numSegments=20;
  setupSegmentList(numSegments);
  final PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  final BrokerRequest brokerRequest=getSelectionNoFilterBrokerRequest();
  final ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  final Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(_indexSegmentList,brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  final DataTable instanceResponse=globalPlan.getInstanceResponse();
  System.out.println("Test: InterSegmentSelectionPlanMakerAndRun");
  System.out.println("instanceResponse : " + instanceResponse);
  final BrokerReduceService reduceService=new BrokerReduceService();
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
  final BrokerResponseNative brokerResponse=reduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  SelectionResults selectionResults=brokerResponse.getSelectionResults();
  ObjectMapper mapper=new ObjectMapper();
  String actualResults=mapper.writeValueAsString(selectionResults);
  System.out.println("Selection Result : " + actualResults);
  System.out.println("Time used : " + brokerResponse.getTimeUsedMs());
  JsonAssert.assertEqualsIgnoreOrder(actualResults,"{\"columns\":[\"column11\",\"column12\",\"met_impressionCount\"],\"results\":[[\"i\",\"jgn\",\"4955241829510629137\"],[\"i\",\"lVH\",\"6240989492723764727\"],[\"i\",\"kWZ\",\"4955241829510629137\"],[\"i\",\"pm\",\"6240989492723764727\"],[\"i\",\"GF\",\"8637957270245933828\"],[\"i\",\"kB\",\"8637957270245933828\"],[\"i\",\"BQ\",\"8310347835142446717\"],[\"i\",\"YO\",\"4955241829510629137\"],[\"i\",\"RI\",\"8310347835142446717\"],[\"i\",\"RI\",\"6240989492723764727\"]]}");
}
