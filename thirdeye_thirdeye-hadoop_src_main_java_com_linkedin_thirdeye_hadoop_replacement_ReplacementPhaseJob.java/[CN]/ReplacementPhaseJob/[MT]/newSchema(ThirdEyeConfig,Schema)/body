{
  Schema outputSchema=null;
  Set<String> topkDimensionSet=new HashSet<>();
  List<TopKDimensionSpec> topKDimensionSpecs=thirdeyeConfig.getTopKRollup().getTopKDimensionSpec();
  for (  TopKDimensionSpec topKDimensionSpec : topKDimensionSpecs) {
    String dimension=topKDimensionSpec.getDimensionName();
    topkDimensionSet.add(dimension);
  }
  RecordBuilder<Schema> recordBuilder=SchemaBuilder.record(inputSchema.getName());
  FieldAssembler<Schema> fieldAssembler=recordBuilder.fields();
  for (  String dimension : thirdeyeConfig.getDimensionNames()) {
    fieldAssembler=fieldAssembler.name(dimension).type().nullable().stringType().noDefault();
    if (topkDimensionSet.contains(dimension)) {
      fieldAssembler=fieldAssembler.name(dimension + RAW_DIMENSION_SUFFIX).type().nullable().stringType().noDefault();
    }
  }
  for (  MetricSpec metricSpec : thirdeyeConfig.getMetrics()) {
    String metric=metricSpec.getName();
    MetricType metricType=metricSpec.getType();
    BaseFieldTypeBuilder<Schema> baseFieldTypeBuilder=fieldAssembler.name(metric).type().nullable();
switch (metricType) {
case SHORT:
case INT:
      fieldAssembler=baseFieldTypeBuilder.intType().noDefault();
    break;
case FLOAT:
  fieldAssembler=baseFieldTypeBuilder.floatType().noDefault();
break;
case DOUBLE:
fieldAssembler=baseFieldTypeBuilder.doubleType().noDefault();
break;
case LONG:
default :
fieldAssembler=baseFieldTypeBuilder.longType().noDefault();
}
}
String timeColumnName=thirdeyeConfig.getTime().getColumnName();
fieldAssembler=fieldAssembler.name(timeColumnName).type().longType().noDefault();
outputSchema=fieldAssembler.endRecord();
LOGGER.info("New schema {}",outputSchema.toString(true));
return outputSchema;
}
