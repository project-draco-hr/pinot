{
  for (  FieldSpec spec : schema.getAllFieldSpecs()) {
    if (!spec.isSingleValueField()) {
      DataSource offlineDS=offlineSegment.getDataSource(spec.getName());
      DataSource realtimeDS=realtimeSegment.getDataSource(spec.getName());
      Block offlineBlock=offlineDS.nextBlock();
      Block realtimeBlock=realtimeDS.nextBlock();
      BlockMetadata offlineMetadata=offlineBlock.getMetadata();
      BlockMetadata realtimeMetadata=realtimeBlock.getMetadata();
      BlockMultiValIterator offlineValIterator=(BlockMultiValIterator)offlineBlock.getBlockValueSet().iterator();
      BlockMultiValIterator realtimeValIterator=(BlockMultiValIterator)realtimeBlock.getBlockValueSet().iterator();
      Assert.assertEquals(offlineSegment.getTotalDocs(),realtimeSegment.getAggregateDocumentCount());
      int counter=-1;
      while (realtimeValIterator.hasNext()) {
        counter++;
        int[] offlineIds=new int[offlineBlock.getMetadata().maxNumberOfMultiValues()];
        int[] realtimeIds=new int[realtimeBlock.getMetadata().maxNumberOfMultiValues()];
        int Olen=offlineValIterator.nextIntVal(offlineIds);
        int Rlen=realtimeValIterator.nextIntVal(realtimeIds);
        Assert.assertEquals(Olen,Rlen);
        Object[] offlineRaw=new Object[Olen];
        Object[] realtimeRaw=new Object[Rlen];
        for (int i=0; i < Olen; i++) {
          offlineRaw[i]=offlineMetadata.getDictionary().get(offlineIds[i]);
          realtimeRaw[i]=realtimeMetadata.getDictionary().get(realtimeIds[i]);
          try {
            Assert.assertEquals(offlineMetadata.getDictionary().get(offlineIds[i]),realtimeMetadata.getDictionary().get(realtimeIds[i]));
          }
 catch (          AssertionError e) {
            System.out.println(counter + " offline : " + Arrays.toString(offlineRaw));
            System.out.println(counter + " realtime " + Arrays.toString(realtimeRaw));
            throw e;
          }
        }
      }
    }
  }
}
