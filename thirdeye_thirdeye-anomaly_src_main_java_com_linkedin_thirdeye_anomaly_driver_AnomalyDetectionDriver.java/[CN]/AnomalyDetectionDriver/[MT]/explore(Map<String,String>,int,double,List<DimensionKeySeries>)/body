{
  if (dimensionValues.size() >= driverConfig.getMaxExplorationDepth()) {
    return;
  }
  for (int i=groupByDimensionIndex; i < driverConfig.getDimensionPrecedence().size(); i++) {
    String groupByDimension=driverConfig.getDimensionPrecedence().get(i);
    ThirdEyeRequest request=ThirdEyeRequestUtils.buildRequest(starTreeConfig.getCollection(),groupByDimension,dimensionValues,Collections.singletonList(dimensionKeyContributionMetric),ONE_HOURS,timeRange);
    Map<DimensionKey,MetricTimeSeries> dataset=thirdEyeClient.execute(request);
    for (    Entry<DimensionKey,MetricTimeSeries> entry : dataset.entrySet()) {
      double estimateProportion=sumOverContributionMetric(entry.getValue()) / totalSeriesSum;
      if (estimateProportion < driverConfig.getContributionMinProportion()) {
        continue;
      }
      DimensionKey dimensionKey=entry.getKey();
      dimensionKeySeries.add(new DimensionKeySeries(dimensionKey,estimateProportion));
      dimensionValues.put(groupByDimension,dimensionKey.getDimensionValue(starTreeConfig.getDimensions(),groupByDimension));
      explore(dimensionValues,i + 1,totalSeriesSum,dimensionKeySeries);
      dimensionValues.remove(groupByDimension);
    }
  }
}
