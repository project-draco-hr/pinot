{
  final FileSystem fs=FileSystem.get(new Configuration());
  final Path hdfsDataPath=new Path(dataFilePath);
  final File dataPath=new File(currentDiskWorkDir,"data");
  if (dataPath.exists()) {
    dataPath.delete();
  }
  dataPath.mkdir();
  final Path localFilePath=new Path(dataPath + "/" + hdfsDataPath.getName());
  fs.copyToLocalFile(hdfsDataPath,localFilePath);
  LOGGER.info("Data schema is : {}",schema);
  LOGGER.info("*********************************************************************");
  SegmentGeneratorConfig segmentGeneratorConfig=new SegmentGeneratorConfig(schema);
  segmentGeneratorConfig.setTableName(tableName);
  segmentGeneratorConfig.setInputFilePath(new File(dataPath,hdfsDataPath.getName()).getAbsolutePath());
  LOGGER.info("Setting input path {}",segmentGeneratorConfig.getInputFilePath());
  segmentGeneratorConfig.setFormat(FileFormat.AVRO);
  segmentGeneratorConfig.setSegmentNamePostfix(seqId);
  segmentGeneratorConfig.setOutDir(localDiskSegmentDirectory);
  segmentGeneratorConfig.setEnableStarTreeIndex(true);
  LOGGER.info("Setting enableStarTreeIndex");
  String minTime=ThirdEyeConstants.DATE_TIME_FORMATTER.print(segmentWallClockStartTime);
  String maxTime=ThirdEyeConstants.DATE_TIME_FORMATTER.print(segmentWallClockEndTime);
  LOGGER.info("Wall clock time : min {} max {}",minTime,maxTime);
  LOGGER.info("isBackfill : {}",isBackfill);
  if (isBackfill) {
    String segmentName=hdfsDataPath.getName().split("-(m|r)-[0-9]{5}")[0];
    segmentName=segmentName.split(ThirdEyeConstants.AVRO_SUFFIX)[0];
    segmentGeneratorConfig.setSegmentName(segmentName);
  }
 else {
    segmentGeneratorConfig.setSegmentName(SegmentNameBuilder.buildBasic(tableName + ThirdEyeConstants.SEGMENT_JOINER + segmentSchedule,minTime,maxTime,seqId));
  }
  LOGGER.info("Setting segment name {}",segmentGeneratorConfig.getSegmentName());
  StarTreeIndexSpec starTreeIndexSpec=new StarTreeIndexSpec();
  Set<String> skipMaterializationForDimensions=new HashSet<>();
  Set<String> transformDimensionsSet=thirdeyeConfig.getTransformDimensions();
  LOGGER.info("Dimensions with _topk column {}",transformDimensionsSet);
  for (  String topkTransformDimension : transformDimensionsSet) {
    skipMaterializationForDimensions.add(topkTransformDimension);
    LOGGER.info("Adding {} to skipMaterialization set",topkTransformDimension);
  }
  starTreeIndexSpec.setSkipMaterializationForDimensions(skipMaterializationForDimensions);
  LOGGER.info("Setting skipMaterializationForDimensions {}",skipMaterializationForDimensions);
  if (thirdeyeConfig.getSplit() != null) {
    starTreeIndexSpec.setMaxLeafRecords(thirdeyeConfig.getSplit().getThreshold());
    LOGGER.info("Setting split threshold to {}",starTreeIndexSpec.getMaxLeafRecords());
    List<String> splitOrder=thirdeyeConfig.getSplit().getOrder();
    if (splitOrder != null) {
      LOGGER.info("Removing from splitOrder, any dimensions which are also in skipMaterializationForDimensions");
      splitOrder.removeAll(skipMaterializationForDimensions);
      starTreeIndexSpec.setDimensionsSplitOrder(splitOrder);
    }
    LOGGER.info("Setting splitOrder {}",splitOrder);
  }
  segmentGeneratorConfig.setStarTreeIndexSpec(starTreeIndexSpec);
  LOGGER.info("*********************************************************************");
  SegmentIndexCreationDriverImpl driver=new SegmentIndexCreationDriverImpl();
  driver.init(segmentGeneratorConfig);
  driver.build();
  String segmentName=null;
  File localDiskSegmentDirectoryFile=new File(localDiskSegmentDirectory);
  for (  File file : localDiskSegmentDirectoryFile.listFiles()) {
    segmentName=file.getName();
    if (segmentName.startsWith(tableName)) {
      break;
    }
  }
  String localSegmentPath=new File(localDiskSegmentDirectory,segmentName).getAbsolutePath();
  String localTarPath=localDiskSegmentTarPath + "/" + segmentName+ ".tar.gz";
  LOGGER.info("Trying to tar the segment to: {}",localTarPath);
  TarGzCompressionUtils.createTarGzOfDirectory(localSegmentPath,localTarPath);
  String hdfsTarPath=localHdfsSegmentTarPath + "/" + segmentName+ ".tar.gz";
  LOGGER.info("*********************************************************************");
  LOGGER.info("Copy from : {} to {}",localTarPath,hdfsTarPath);
  LOGGER.info("*********************************************************************");
  fs.copyFromLocalFile(true,true,new Path(localTarPath),new Path(hdfsTarPath));
  return segmentName;
}
