{
  final int numQueries=QUERIES.length;
  final Random random=new Random(RANDOM_SEED);
  final AtomicInteger counter=new AtomicInteger(0);
  final AtomicLong totalResponseTime=new AtomicLong(0L);
  final ExecutorService executorService=Executors.newFixedThreadPool(NUM_CLIENTS);
  for (int i=0; i < NUM_CLIENTS; i++) {
    executorService.submit(new Runnable(){
      @Override public void run(){
        try (CloseableHttpClient client=HttpClients.createDefault()){
          HttpPost post=new HttpPost("http://localhost:8099/query");
          CloseableHttpResponse res;
          while (true) {
            String query=QUERIES[random.nextInt(numQueries)];
            post.setEntity(new StringEntity("{\"pql\":\"" + query + "\"}"));
            long start=System.currentTimeMillis();
            res=client.execute(post);
            res.close();
            counter.getAndIncrement();
            totalResponseTime.getAndAdd(System.currentTimeMillis() - start);
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
  long startTime=System.currentTimeMillis();
  while (true) {
    Thread.sleep(REPORT_INTERVAL_MILLIS);
    double timePassedSeconds=((double)(System.currentTimeMillis() - startTime)) / MILLIS_PER_SECOND;
    int count=counter.get();
    double avgResponseTime=((double)totalResponseTime.get()) / count;
    System.out.println("Time Passed: " + timePassedSeconds + "s, Query Executed: "+ count+ ", QPS: "+ count / timePassedSeconds + ", Avg Response Time: " + avgResponseTime + "ms");
  }
}
