{
  Map<Integer,Set<List<Integer>>> uniqueCombinations=new HashMap<Integer,Set<List<Integer>>>();
  Map<Integer,Integer> rawCounts=new HashMap<Integer,Integer>();
  Map<Integer,Integer> minRecordIds=new HashMap<Integer,Integer>();
  int currentRecordId=0;
  StarTreeTableRow row=new StarTreeTableRow(dimensionTypes.size(),metricTypes.size());
  for (  ByteBuffer buffer : list) {
    fromByteBuffer(buffer,row);
    Integer value=row.getDimensions().get(dimension);
    Set<List<Integer>> uniqueSet=uniqueCombinations.get(value);
    if (uniqueSet == null) {
      uniqueSet=new HashSet<List<Integer>>();
      uniqueCombinations.put(value,uniqueSet);
    }
    if (!uniqueSet.contains(row.getDimensions())) {
      List<Integer> copy=new ArrayList<>(row.getDimensions());
      uniqueSet.add(copy);
    }
    Integer count=rawCounts.get(value);
    if (count == null) {
      count=0;
    }
    rawCounts.put(value,count + 1);
    Integer existingRecordId=minRecordIds.get(value);
    if (existingRecordId == null || currentRecordId < existingRecordId) {
      minRecordIds.put(value,currentRecordId);
    }
    currentRecordId++;
  }
  StarTreeTableGroupByStats result=new StarTreeTableGroupByStats();
  for (  Map.Entry<Integer,Set<List<Integer>>> entry : uniqueCombinations.entrySet()) {
    Integer value=entry.getKey();
    Integer uniqueCount=entry.getValue().size();
    Integer rawCount=rawCounts.get(value);
    Integer minRecordId=minRecordIds.get(value);
    result.setValue(value,rawCount,uniqueCount,minRecordId);
  }
  return result;
}
