{
  Map<List<Integer>,List<Number>> uniqueCombinations=new HashMap<List<Integer>,List<Number>>();
  for (  StarTreeTableRow combination : list) {
    List<Integer> aliased=new ArrayList<Integer>(combination.getDimensions());
    for (int i=0; i < aliased.size(); i++) {
      if (excludedDimensions != null && excludedDimensions.contains(i)) {
        aliased.set(i,StarTreeIndexNode.all());
      }
    }
    List<Number> aggregates=uniqueCombinations.get(aliased);
    if (aggregates == null) {
      aggregates=new ArrayList<Number>();
      for (int i=0; i < combination.getMetrics().size(); i++) {
        aggregates.add(0);
      }
      uniqueCombinations.put(aliased,aggregates);
    }
    aggregateOnto(aggregates,combination.getMetrics());
  }
  final Iterator<Map.Entry<List<Integer>,List<Number>>> itr=uniqueCombinations.entrySet().iterator();
  return new Iterator<StarTreeTableRow>(){
    @Override public boolean hasNext(){
      return itr.hasNext();
    }
    @Override public StarTreeTableRow next(){
      Map.Entry<List<Integer>,List<Number>> next=itr.next();
      return new StarTreeTableRow(next.getKey(),next.getValue());
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
