{
  final long randomSeed=123456789L;
  final Random random=new Random(randomSeed);
  final int reportIntervalMillis=3000;
  final List<String> queries;
  try (FileInputStream input=new FileInputStream(new File(queryFile))){
    queries=IOUtils.readLines(input);
  }
   final int numQueries=queries.size();
  final PerfBenchmarkDriver driver=new PerfBenchmarkDriver(conf);
  final AtomicInteger counter=new AtomicInteger(0);
  final AtomicLong totalResponseTime=new AtomicLong(0L);
  final ExecutorService executorService=Executors.newFixedThreadPool(numThreads);
  for (int i=0; i < numThreads; i++) {
    executorService.submit(new Runnable(){
      @Override public void run(){
        while (true) {
          String query=queries.get(random.nextInt(numQueries));
          long startTime=System.currentTimeMillis();
          try {
            driver.postQuery(query);
            counter.getAndIncrement();
            totalResponseTime.getAndAdd(System.currentTimeMillis() - startTime);
          }
 catch (          Exception e) {
            LOGGER.error("Caught exception while running query: {}",query,e);
            return;
          }
        }
      }
    }
);
  }
  long startTime=System.currentTimeMillis();
  while (true) {
    Thread.sleep(reportIntervalMillis);
    double timePassedSeconds=((double)(System.currentTimeMillis() - startTime)) / MILLIS_PER_SECOND;
    int count=counter.get();
    double avgResponseTime=((double)totalResponseTime.get()) / count;
    LOGGER.info("Time Passed: {}s, Query Executed: {}, QPS: {}, Avg Response Time: {}ms",timePassedSeconds,count,count / timePassedSeconds,avgResponseTime);
  }
}
