{
  List<AnomalyReportTableRow> reportTableRows=new ArrayList<AnomalyReportTableRow>(topK);
  List<String> dimensionSchema=null;
  for (  AnomalyTableRow row : anomalyTableRows) {
    ObjectReader reader=OBJECT_MAPPER.reader(Map.class);
    Map<String,String> dimensions=reader.readValue(row.getDimensions());
    if (dimensionSchema == null) {
      dimensionSchema=new ArrayList<>(dimensions.keySet());
      Collections.sort(dimensionSchema);
    }
    String[] dimensionValues=new String[dimensions.size()];
    for (    Entry<String,String> e : dimensions.entrySet()) {
      dimensionValues[dimensionSchema.indexOf(e.getKey())]=e.getValue();
    }
    DateTime timestamp=new DateTime(row.getTimeWindow(),DateTimeZone.UTC).toDateTime(DateTimeZone.getDefault());
    AnomalyReportTableRow reportTableRow=new AnomalyReportTableRow(timestamp,new DimensionKey(dimensionValues).toString(),row.getFunctionDescription(),row.getFunctionName().toLowerCase().contains("percent"),row.getAnomalyScore(),row.getAnomalyVolume());
    reportTableRows.add(reportTableRow);
    if (reportTableRows.size() >= topK) {
      break;
    }
  }
  int totalViolationCount=anomalyTableRows.size();
  int topLevelViolationCount=0;
  for (  AnomalyTableRow row : anomalyTableRows) {
    if (row.getNonStarCount() == 0) {
      topLevelViolationCount++;
    }
  }
  AnomalyReportTable result=new AnomalyReportTable();
  result.setReportRows(reportTableRows);
  result.setTopLevelViolationCount(topLevelViolationCount);
  result.setTotalViolationCount(totalViolationCount);
  if (dimensionSchema != null) {
    result.setDimensionSchema(new DimensionKey(dimensionSchema.toArray(new String[0])).toString());
  }
  return result;
}
