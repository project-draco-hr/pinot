{
  String[] metricFields={"\"dataType\":\"INT\"","\"name\":\"metric\"","\"defaultNullValue\":-1"};
  MetricFieldSpec metricFieldSpec=_mapper.readValue(getRandomOrderJsonString(metricFields),MetricFieldSpec.class);
  Assert.assertEquals(metricFieldSpec.toString(),"< data type: INT , field type: METRIC, single value column, default null value: -1 >",_errorMessage);
  Assert.assertTrue(metricFieldSpec.getDefaultNullValue() instanceof Integer,_errorMessage);
  String[] dimensionFields1={"\"dataType\":\"DOUBLE\"","\"name\":\"dimension\""};
  DimensionFieldSpec dimensionFieldSpec1=_mapper.readValue(getRandomOrderJsonString(dimensionFields1),DimensionFieldSpec.class);
  Assert.assertEquals(dimensionFieldSpec1.toString(),"< data type: DOUBLE , field type: DIMENSION, single value column, default null value: -Infinity >",_errorMessage);
  Assert.assertTrue(dimensionFieldSpec1.getDefaultNullValue() instanceof Double,_errorMessage);
  String[] dimensionFields2={"\"dataType\":\"STRING\"","\"name\":\"dimension\"","\"singleValueField\":false","\"defaultNullValue\":\"default\""};
  DimensionFieldSpec dimensionFieldSpec2=_mapper.readValue(getRandomOrderJsonString(dimensionFields2),DimensionFieldSpec.class);
  Assert.assertEquals(dimensionFieldSpec2.toString(),"< data type: STRING , field type: DIMENSION, multi value column, delimiter: ',', default null value: default >");
  Assert.assertTrue(dimensionFieldSpec2.getDefaultNullValue() instanceof String,_errorMessage);
  String[] timeFields={"\"incomingGranularitySpec\":{\"timeType\":\"MILLISECONDS\",\"dataType\":\"LONG\",\"name\":\"time\"}","\"outgoingGranularitySpec\":{\"timeType\":\"SECONDS\",\"dataType\":\"INT\",\"name\":\"time\"}","\"defaultNullValue\":-1"};
  TimeFieldSpec timeFieldSpec=_mapper.readValue(getRandomOrderJsonString(timeFields),TimeFieldSpec.class);
  Assert.assertEquals(timeFieldSpec.toString(),"< data type: INT, field type : TIME, " + "incoming granularity spec: < data type: LONG, time type: MILLISECONDS, time unit size: 1, name: time >, " + "outgoing granularity spec: < data type: INT, time type: SECONDS, time unit size: 1, name: time >, "+ "default null value: -1 >",_errorMessage);
  Assert.assertTrue(timeFieldSpec.getDefaultNullValue() instanceof Integer,_errorMessage);
}
