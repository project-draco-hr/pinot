{
  boolean successful=policy.attempt(new Callable<Boolean>(){
    @Override public Boolean call(){
      HelixDataAccessor dataAccessor=helixManager.getHelixDataAccessor();
      PropertyKey propertyKey=dataAccessor.keyBuilder().idealStates(resourceName);
      IdealState idealState=dataAccessor.getProperty(propertyKey);
      PropertyKey key=dataAccessor.keyBuilder().idealStates(resourceName);
      String path=key.getPath();
      IdealState idealStateCopy=new IdealState(idealState.getRecord());
      IdealState updatedIdealState;
      try {
        updatedIdealState=updater.apply(idealStateCopy);
      }
 catch (      Exception e) {
        LOGGER.error("Caught exception while updating ideal state",e);
        return false;
      }
      if (!EqualityUtils.isEqual(idealState,updatedIdealState) && updatedIdealState != null) {
        BaseDataAccessor<ZNRecord> baseDataAccessor=dataAccessor.getBaseDataAccessor();
        boolean success;
        try {
          success=baseDataAccessor.set(path,updatedIdealState.getRecord(),idealState.getRecord().getVersion(),AccessOption.PERSISTENT);
        }
 catch (        Exception e) {
          LOGGER.warn("Caught exception: {} while updating ideal state for resource {}, retrying.",resourceName,e.getMessage());
          return false;
        }
        if (success) {
          return true;
        }
 else {
          LOGGER.warn("Failed to update ideal state for resource {}, retrying.",resourceName);
          return false;
        }
      }
 else {
        LOGGER.warn("Idempotent or null ideal state update for resource {}, skipping update.",resourceName);
        return true;
      }
    }
  }
);
  if (!successful) {
    throw new RuntimeException("Failed to update ideal state for resource " + resourceName);
  }
}
