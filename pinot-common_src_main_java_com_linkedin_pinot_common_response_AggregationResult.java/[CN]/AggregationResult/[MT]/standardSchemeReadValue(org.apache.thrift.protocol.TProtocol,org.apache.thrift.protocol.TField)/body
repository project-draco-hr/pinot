{
  _Fields setField=_Fields.findByThriftId(field.id);
  if (setField != null) {
switch (setField) {
case LONG_VAL:
      if (field.type == LONG_VAL_FIELD_DESC.type) {
        Long longVal;
        longVal=iprot.readI64();
        return longVal;
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
        return null;
      }
case STRING_VAL:
    if (field.type == STRING_VAL_FIELD_DESC.type) {
      String stringVal;
      stringVal=iprot.readString();
      return stringVal;
    }
 else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      return null;
    }
case DOUBLE_VAL:
  if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
    Double doubleVal;
    doubleVal=iprot.readDouble();
    return doubleVal;
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
    return null;
  }
case LONG_SET:
if (field.type == LONG_SET_FIELD_DESC.type) {
  Set<Long> longSet;
{
    org.apache.thrift.protocol.TSet _set0=iprot.readSetBegin();
    longSet=new HashSet<Long>(2 * _set0.size);
    long _elem1;
    for (int _i2=0; _i2 < _set0.size; ++_i2) {
      _elem1=iprot.readI64();
      longSet.add(_elem1);
    }
    iprot.readSetEnd();
  }
  return longSet;
}
 else {
  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  return null;
}
case STRING_SET:
if (field.type == STRING_SET_FIELD_DESC.type) {
Set<String> stringSet;
{
  org.apache.thrift.protocol.TSet _set3=iprot.readSetBegin();
  stringSet=new HashSet<String>(2 * _set3.size);
  String _elem4;
  for (int _i5=0; _i5 < _set3.size; ++_i5) {
    _elem4=iprot.readString();
    stringSet.add(_elem4);
  }
  iprot.readSetEnd();
}
return stringSet;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case DOUBLE_SET:
if (field.type == DOUBLE_SET_FIELD_DESC.type) {
Set<Double> doubleSet;
{
org.apache.thrift.protocol.TSet _set6=iprot.readSetBegin();
doubleSet=new HashSet<Double>(2 * _set6.size);
double _elem7;
for (int _i8=0; _i8 < _set6.size; ++_i8) {
  _elem7=iprot.readDouble();
  doubleSet.add(_elem7);
}
iprot.readSetEnd();
}
return doubleSet;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_STRING_MAP:
if (field.type == STRING_STRING_MAP_FIELD_DESC.type) {
Map<String,String> stringStringMap;
{
org.apache.thrift.protocol.TMap _map9=iprot.readMapBegin();
stringStringMap=new HashMap<String,String>(2 * _map9.size);
String _key10;
String _val11;
for (int _i12=0; _i12 < _map9.size; ++_i12) {
_key10=iprot.readString();
_val11=iprot.readString();
stringStringMap.put(_key10,_val11);
}
iprot.readMapEnd();
}
return stringStringMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_LONG_MAP:
if (field.type == STRING_LONG_MAP_FIELD_DESC.type) {
Map<String,Long> stringLongMap;
{
org.apache.thrift.protocol.TMap _map13=iprot.readMapBegin();
stringLongMap=new HashMap<String,Long>(2 * _map13.size);
String _key14;
long _val15;
for (int _i16=0; _i16 < _map13.size; ++_i16) {
_key14=iprot.readString();
_val15=iprot.readI64();
stringLongMap.put(_key14,_val15);
}
iprot.readMapEnd();
}
return stringLongMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_DOUBLE_MAP:
if (field.type == STRING_DOUBLE_MAP_FIELD_DESC.type) {
Map<String,Double> stringDoubleMap;
{
org.apache.thrift.protocol.TMap _map17=iprot.readMapBegin();
stringDoubleMap=new HashMap<String,Double>(2 * _map17.size);
String _key18;
double _val19;
for (int _i20=0; _i20 < _map17.size; ++_i20) {
_key18=iprot.readString();
_val19=iprot.readDouble();
stringDoubleMap.put(_key18,_val19);
}
iprot.readMapEnd();
}
return stringDoubleMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_STRING_SET_MAP:
if (field.type == STRING_STRING_SET_MAP_FIELD_DESC.type) {
Map<String,Set<String>> stringStringSetMap;
{
org.apache.thrift.protocol.TMap _map21=iprot.readMapBegin();
stringStringSetMap=new HashMap<String,Set<String>>(2 * _map21.size);
String _key22;
Set<String> _val23;
for (int _i24=0; _i24 < _map21.size; ++_i24) {
_key22=iprot.readString();
{
org.apache.thrift.protocol.TSet _set25=iprot.readSetBegin();
_val23=new HashSet<String>(2 * _set25.size);
String _elem26;
for (int _i27=0; _i27 < _set25.size; ++_i27) {
_elem26=iprot.readString();
_val23.add(_elem26);
}
iprot.readSetEnd();
}
stringStringSetMap.put(_key22,_val23);
}
iprot.readMapEnd();
}
return stringStringSetMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_LONG_SET_MAP:
if (field.type == STRING_LONG_SET_MAP_FIELD_DESC.type) {
Map<String,Set<Long>> stringLongSetMap;
{
org.apache.thrift.protocol.TMap _map28=iprot.readMapBegin();
stringLongSetMap=new HashMap<String,Set<Long>>(2 * _map28.size);
String _key29;
Set<Long> _val30;
for (int _i31=0; _i31 < _map28.size; ++_i31) {
_key29=iprot.readString();
{
org.apache.thrift.protocol.TSet _set32=iprot.readSetBegin();
_val30=new HashSet<Long>(2 * _set32.size);
long _elem33;
for (int _i34=0; _i34 < _set32.size; ++_i34) {
_elem33=iprot.readI64();
_val30.add(_elem33);
}
iprot.readSetEnd();
}
stringLongSetMap.put(_key29,_val30);
}
iprot.readMapEnd();
}
return stringLongSetMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_DOUBLE_SET_MAP:
if (field.type == STRING_DOUBLE_SET_MAP_FIELD_DESC.type) {
Map<String,Set<Double>> stringDoubleSetMap;
{
org.apache.thrift.protocol.TMap _map35=iprot.readMapBegin();
stringDoubleSetMap=new HashMap<String,Set<Double>>(2 * _map35.size);
String _key36;
Set<Double> _val37;
for (int _i38=0; _i38 < _map35.size; ++_i38) {
_key36=iprot.readString();
{
org.apache.thrift.protocol.TSet _set39=iprot.readSetBegin();
_val37=new HashSet<Double>(2 * _set39.size);
double _elem40;
for (int _i41=0; _i41 < _set39.size; ++_i41) {
_elem40=iprot.readDouble();
_val37.add(_elem40);
}
iprot.readSetEnd();
}
stringDoubleSetMap.put(_key36,_val37);
}
iprot.readMapEnd();
}
return stringDoubleSetMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
default :
throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
}
