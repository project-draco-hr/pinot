{
  _Fields setField=_Fields.findByThriftId(field.id);
  if (setField != null) {
switch (setField) {
case LONG_VAL:
      if (field.type == LONG_VAL_FIELD_DESC.type) {
        Long longVal;
        longVal=iprot.readI64();
        return longVal;
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
        return null;
      }
case STRING_VAL:
    if (field.type == STRING_VAL_FIELD_DESC.type) {
      String stringVal;
      stringVal=iprot.readString();
      return stringVal;
    }
 else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      return null;
    }
case DOUBLE_VAL:
  if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
    Double doubleVal;
    doubleVal=iprot.readDouble();
    return doubleVal;
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
    return null;
  }
case LONG_SET:
if (field.type == LONG_SET_FIELD_DESC.type) {
  Set<Long> longSet;
{
    org.apache.thrift.protocol.TSet _set0=iprot.readSetBegin();
    longSet=new HashSet<Long>(2 * _set0.size);
    for (int _i1=0; _i1 < _set0.size; ++_i1) {
      long _elem2;
      _elem2=iprot.readI64();
      longSet.add(_elem2);
    }
    iprot.readSetEnd();
  }
  return longSet;
}
 else {
  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  return null;
}
case STRING_SET:
if (field.type == STRING_SET_FIELD_DESC.type) {
Set<String> stringSet;
{
  org.apache.thrift.protocol.TSet _set3=iprot.readSetBegin();
  stringSet=new HashSet<String>(2 * _set3.size);
  for (int _i4=0; _i4 < _set3.size; ++_i4) {
    String _elem5;
    _elem5=iprot.readString();
    stringSet.add(_elem5);
  }
  iprot.readSetEnd();
}
return stringSet;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case DOUBLE_SET:
if (field.type == DOUBLE_SET_FIELD_DESC.type) {
Set<Double> doubleSet;
{
org.apache.thrift.protocol.TSet _set6=iprot.readSetBegin();
doubleSet=new HashSet<Double>(2 * _set6.size);
for (int _i7=0; _i7 < _set6.size; ++_i7) {
  double _elem8;
  _elem8=iprot.readDouble();
  doubleSet.add(_elem8);
}
iprot.readSetEnd();
}
return doubleSet;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_STRING_MAP:
if (field.type == STRING_STRING_MAP_FIELD_DESC.type) {
Map<String,String> stringStringMap;
{
org.apache.thrift.protocol.TMap _map9=iprot.readMapBegin();
stringStringMap=new HashMap<String,String>(2 * _map9.size);
for (int _i10=0; _i10 < _map9.size; ++_i10) {
String _key11;
String _val12;
_key11=iprot.readString();
_val12=iprot.readString();
stringStringMap.put(_key11,_val12);
}
iprot.readMapEnd();
}
return stringStringMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_LONG_MAP:
if (field.type == STRING_LONG_MAP_FIELD_DESC.type) {
Map<String,Long> stringLongMap;
{
org.apache.thrift.protocol.TMap _map13=iprot.readMapBegin();
stringLongMap=new HashMap<String,Long>(2 * _map13.size);
for (int _i14=0; _i14 < _map13.size; ++_i14) {
String _key15;
long _val16;
_key15=iprot.readString();
_val16=iprot.readI64();
stringLongMap.put(_key15,_val16);
}
iprot.readMapEnd();
}
return stringLongMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_DOUBLE_MAP:
if (field.type == STRING_DOUBLE_MAP_FIELD_DESC.type) {
Map<String,Double> stringDoubleMap;
{
org.apache.thrift.protocol.TMap _map17=iprot.readMapBegin();
stringDoubleMap=new HashMap<String,Double>(2 * _map17.size);
for (int _i18=0; _i18 < _map17.size; ++_i18) {
String _key19;
double _val20;
_key19=iprot.readString();
_val20=iprot.readDouble();
stringDoubleMap.put(_key19,_val20);
}
iprot.readMapEnd();
}
return stringDoubleMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_STRING_SET_MAP:
if (field.type == STRING_STRING_SET_MAP_FIELD_DESC.type) {
Map<String,Set<String>> stringStringSetMap;
{
org.apache.thrift.protocol.TMap _map21=iprot.readMapBegin();
stringStringSetMap=new HashMap<String,Set<String>>(2 * _map21.size);
for (int _i22=0; _i22 < _map21.size; ++_i22) {
String _key23;
Set<String> _val24;
_key23=iprot.readString();
{
org.apache.thrift.protocol.TSet _set25=iprot.readSetBegin();
_val24=new HashSet<String>(2 * _set25.size);
for (int _i26=0; _i26 < _set25.size; ++_i26) {
String _elem27;
_elem27=iprot.readString();
_val24.add(_elem27);
}
iprot.readSetEnd();
}
stringStringSetMap.put(_key23,_val24);
}
iprot.readMapEnd();
}
return stringStringSetMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_LONG_SET_MAP:
if (field.type == STRING_LONG_SET_MAP_FIELD_DESC.type) {
Map<String,Set<Long>> stringLongSetMap;
{
org.apache.thrift.protocol.TMap _map28=iprot.readMapBegin();
stringLongSetMap=new HashMap<String,Set<Long>>(2 * _map28.size);
for (int _i29=0; _i29 < _map28.size; ++_i29) {
String _key30;
Set<Long> _val31;
_key30=iprot.readString();
{
org.apache.thrift.protocol.TSet _set32=iprot.readSetBegin();
_val31=new HashSet<Long>(2 * _set32.size);
for (int _i33=0; _i33 < _set32.size; ++_i33) {
long _elem34;
_elem34=iprot.readI64();
_val31.add(_elem34);
}
iprot.readSetEnd();
}
stringLongSetMap.put(_key30,_val31);
}
iprot.readMapEnd();
}
return stringLongSetMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
case STRING_DOUBLE_SET_MAP:
if (field.type == STRING_DOUBLE_SET_MAP_FIELD_DESC.type) {
Map<String,Set<Double>> stringDoubleSetMap;
{
org.apache.thrift.protocol.TMap _map35=iprot.readMapBegin();
stringDoubleSetMap=new HashMap<String,Set<Double>>(2 * _map35.size);
for (int _i36=0; _i36 < _map35.size; ++_i36) {
String _key37;
Set<Double> _val38;
_key37=iprot.readString();
{
org.apache.thrift.protocol.TSet _set39=iprot.readSetBegin();
_val38=new HashSet<Double>(2 * _set39.size);
for (int _i40=0; _i40 < _set39.size; ++_i40) {
double _elem41;
_elem41=iprot.readDouble();
_val38.add(_elem41);
}
iprot.readSetEnd();
}
stringDoubleSetMap.put(_key37,_val38);
}
iprot.readMapEnd();
}
return stringDoubleSetMap;
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
default :
throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
}
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
return null;
}
}
