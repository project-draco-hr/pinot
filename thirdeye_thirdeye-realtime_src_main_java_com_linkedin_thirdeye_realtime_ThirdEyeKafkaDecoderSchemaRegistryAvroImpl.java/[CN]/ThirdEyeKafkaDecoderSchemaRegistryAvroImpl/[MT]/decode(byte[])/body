{
  String md5=hex(Arrays.copyOfRange(bytes,MAGIC_BYTE_LENGTH,MD5_LENGTH_BYTES + MAGIC_BYTE_LENGTH));
  DatumReader<GenericRecord> reader=readers.get(md5);
  if (reader == null) {
    InputStream inputStream=URI.create(schemaRegistryUri + "/id=" + md5).toURL().openStream();
    Schema schema=Schema.parse(inputStream);
    inputStream.close();
    reader=new GenericDatumReader<GenericRecord>(schema);
    readers.put(md5,reader);
    LOGGER.info("Cached schema for {} (md5={}): {}",starTreeConfig.getCollection(),md5,schema);
  }
  int offset=MAGIC_BYTE_LENGTH + MD5_LENGTH_BYTES;
  int length=bytes.length - offset;
  decoderThreadLocal.set(DecoderFactory.defaultFactory().createBinaryDecoder(bytes,offset,length,decoderThreadLocal.get()));
  GenericRecord record=reader.read(null,decoderThreadLocal.get());
  if (record.getSchema().getName().equals(kafkaConfig.getTopicName())) {
    return ThirdEyeAvroUtils.convert(starTreeConfig,record);
  }
 else {
    LOGGER.warn("Received event with record name {} not topic name {}, skipping",record.getSchema().getName(),kafkaConfig.getTopicName());
    return null;
  }
}
