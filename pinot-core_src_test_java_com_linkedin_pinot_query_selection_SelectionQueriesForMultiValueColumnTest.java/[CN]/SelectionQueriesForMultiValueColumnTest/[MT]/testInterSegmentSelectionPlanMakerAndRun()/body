{
  final int numSegments=20;
  setupSegmentList(numSegments);
  final PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  final BrokerRequest brokerRequest=getSelectionNoFilterBrokerRequest();
  final ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  final Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(_indexSegmentList,brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  final DataTable instanceResponse=globalPlan.getInstanceResponse();
  System.out.println("instanceResponse : " + instanceResponse);
  final BrokerReduceService reduceService=new BrokerReduceService();
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
  final BrokerResponseNative brokerResponse=reduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  SelectionResults selectionResults=brokerResponse.getSelectionResults();
  List<String> columns=selectionResults.getColumns();
  Assert.assertEquals(columns.get(0),"column2");
  Assert.assertEquals(columns.get(1),"column1");
  Assert.assertEquals(columns.get(2),"column5");
  Assert.assertEquals(columns.get(3),"column6");
  Assert.assertEquals(columns.get(4),"column7");
  Assert.assertEquals(columns.get(5),"count");
  List<Serializable[]> rows=selectionResults.getRows();
  for (int i=0; i < rows.size(); ++i) {
    Serializable[] row=rows.get(i);
    Assert.assertEquals(row[0],"2147434110");
  }
}
