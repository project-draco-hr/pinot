{
  setupSegment();
  final BrokerRequest brokerRequest=getSelectionWithFilterBrokerRequest();
  System.out.println(brokerRequest);
  final PlanMaker instancePlanMaker=new InstancePlanMakerImplV0();
  final PlanNode rootPlanNode=instancePlanMaker.makeInnerSegmentPlan(_indexSegment,brokerRequest);
  rootPlanNode.showTree("");
  final MSelectionOrderByOperator operator=(MSelectionOrderByOperator)rootPlanNode.run();
  final IntermediateResultsBlock resultBlock=(IntermediateResultsBlock)operator.nextBlock();
  System.out.println("RunningTime : " + resultBlock.getTimeUsedMs());
  System.out.println("NumDocsScanned : " + resultBlock.getNumDocsScanned());
  System.out.println("TotalDocs : " + resultBlock.getTotalDocs());
  Assert.assertEquals(resultBlock.getNumDocsScanned(),10);
  Assert.assertEquals(resultBlock.getTotalDocs(),100000);
  final SelectionOperatorService selectionOperatorService=new SelectionOperatorService(brokerRequest.getSelections(),resultBlock.getSelectionDataSchema());
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:1111"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:2222"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:3333"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:4444"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:5555"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:6666"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:7777"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:8888"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:9999"),resultBlock.getDataTable());
  final Collection<Serializable[]> reducedResults=selectionOperatorService.reduce(instanceResponseMap);
  final JSONObject jsonResult=selectionOperatorService.render(reducedResults);
  System.out.println(jsonResult);
  JSONArray columnJsonArray=jsonResult.getJSONArray("columns");
  Assert.assertEquals(columnJsonArray.getString(0),"column2");
  Assert.assertEquals(columnJsonArray.getString(1),"column1");
  Assert.assertEquals(columnJsonArray.getString(2),"column5");
  Assert.assertEquals(columnJsonArray.getString(3),"column6");
  Assert.assertEquals(columnJsonArray.getString(4),"column7");
  Assert.assertEquals(columnJsonArray.getString(5),"count");
  JSONArray resultsJsonArray=jsonResult.getJSONArray("results");
  for (int i=0; i < resultsJsonArray.length(); ++i) {
    JSONArray rowJsonArray=resultsJsonArray.getJSONArray(i);
    Assert.assertEquals(rowJsonArray.getString(0),"1787748327");
  }
  System.out.println(jsonResult);
  JsonAssert.assertEqualsIgnoreOrder(jsonResult.toString(),"{\"columns\":[\"column2\",\"column1\",\"column5\",\"column6\",\"column7\",\"count\"]," + "\"results\":[[\"1787748327\",\"401448718\",\"OKyOqU\",[\"2147483647\"],[\"2147483647\"],\"890662862\"]," + "[\"1787748327\",\"1493628747\",\"AKXcXcIqsqOJFsdwxZ\",[\"1482\"],[\"478\"],\"890662862\"],"+ "[\"1787748327\",\"1295439109\",\"AKXcXcIqsqOJFsdwxZ\",[\"94413\"],[\"532\"],\"890662862\"],"+ "[\"1787748327\",\"269506187\",\"EOFxevm\",[\"10061\"],[\"239\",\"565\"],\"890662862\"],"+ "[\"1787748327\",\"1295439109\",\"AKXcXcIqsqOJFsdwxZ\",[\"94413\"],[\"532\"],\"890662862\"],"+ "[\"1787748327\",\"401448718\",\"OKyOqU\",[\"2147483647\"],[\"2147483647\"],\"890662862\"],"+ "[\"1787748327\",\"1493628747\",\"AKXcXcIqsqOJFsdwxZ\",[\"1482\"],[\"478\"],\"890662862\"],"+ "[\"1787748327\",\"401448718\",\"OKyOqU\",[\"2147483647\"],[\"2147483647\"],\"890662862\"],"+ "[\"1787748327\",\"401448718\",\"OKyOqU\",[\"2147483647\"],[\"2147483647\"],\"890662862\"],"+ "[\"1787748327\",\"1966355282\",\"AKXcXcIqsqOJFsdwxZ\",[\"2147483647\"],[\"2147483647\"],\"890662862\"]]}");
}
