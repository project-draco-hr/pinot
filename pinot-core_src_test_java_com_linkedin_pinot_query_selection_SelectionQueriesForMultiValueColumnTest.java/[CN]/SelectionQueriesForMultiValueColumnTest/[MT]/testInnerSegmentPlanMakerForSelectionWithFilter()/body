{
  setupSegment();
  final BrokerRequest brokerRequest=getSelectionWithFilterBrokerRequest();
  final PlanMaker instancePlanMaker=new InstancePlanMakerImplV0();
  final PlanNode rootPlanNode=instancePlanMaker.makeInnerSegmentPlan(_indexSegment,brokerRequest);
  rootPlanNode.showTree("");
  final MSelectionOrderByOperator operator=(MSelectionOrderByOperator)rootPlanNode.run();
  final IntermediateResultsBlock resultBlock=(IntermediateResultsBlock)operator.nextBlock();
  System.out.println("RunningTime : " + resultBlock.getTimeUsedMs());
  System.out.println("NumDocsScanned : " + resultBlock.getNumDocsScanned());
  System.out.println("TotalDocs : " + resultBlock.getTotalDocs());
  Assert.assertEquals(resultBlock.getNumDocsScanned(),10);
  Assert.assertEquals(resultBlock.getTotalDocs(),100000);
  final SelectionOperatorService selectionOperatorService=new SelectionOperatorService(brokerRequest.getSelections(),resultBlock.getSelectionDataSchema());
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:1111"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:2222"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:3333"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:4444"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:5555"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:6666"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:7777"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:8888"),resultBlock.getDataTable());
  instanceResponseMap.put(new ServerInstance("localhost:9999"),resultBlock.getDataTable());
  final Collection<Serializable[]> reducedResults=selectionOperatorService.reduce(instanceResponseMap);
  final JSONObject jsonResult=selectionOperatorService.render(reducedResults);
  System.out.println(jsonResult);
  JSONArray columnJsonArray=jsonResult.getJSONArray("columns");
  Assert.assertEquals(columnJsonArray.getString(0),"vieweeId");
  Assert.assertEquals(columnJsonArray.getString(1),"count");
  Assert.assertEquals(columnJsonArray.getString(2),"viewerCompanies");
  Assert.assertEquals(columnJsonArray.getString(3),"viewerId");
  Assert.assertEquals(columnJsonArray.getString(4),"viewerObfuscationType");
  Assert.assertEquals(columnJsonArray.getString(5),"viewerOccupations");
  JSONArray resultsJsonArray=jsonResult.getJSONArray("results");
  for (int i=0; i < resultsJsonArray.length(); ++i) {
    JSONArray rowJsonArray=resultsJsonArray.getJSONArray(i);
    Assert.assertEquals(rowJsonArray.getString(0),"356899");
  }
  JsonAssert.assertEqualsIgnoreOrder(jsonResult.toString(),"{\"results\":[[\"356899\",\"1\",[\"2147483647\"],\"189805519\",\"SCHOOL\",[\"2147483647\"]]," + "[\"356899\",\"1\",[\"1482\"],\"636019\",\"OCCUPATION_COMPANY\",[\"478\"]]," + "[\"356899\",\"1\",[\"94413\"],\"110523574\",\"OCCUPATION_COMPANY\",[\"532\"]],"+ "[\"356899\",\"1\",[\"10061\"],\"4094221\",\"COMPANY\",[\"239\",\"565\"]],"+ "[\"356899\",\"1\",[\"94413\"],\"110523574\",\"OCCUPATION_COMPANY\",[\"532\"]],"+ "[\"356899\",\"1\",[\"2147483647\"],\"189805519\",\"SCHOOL\",[\"2147483647\"]],"+ "[\"356899\",\"1\",[\"1482\"],\"636019\",\"OCCUPATION_COMPANY\",[\"478\"]],"+ "[\"356899\",\"1\",[\"2147483647\"],\"189805519\",\"SCHOOL\",[\"2147483647\"]],"+ "[\"356899\",\"1\",[\"2147483647\"],\"189805519\",\"SCHOOL\",[\"2147483647\"]],"+ "[\"356899\",\"1\",[\"2147483647\"],\"4315729\",\"OCCUPATION_COMPANY\",[\"2147483647\"]]],"+ "\"columns\":[\"vieweeId\",\"count\",\"viewerCompanies\",\"viewerId\",\"viewerObfuscationType\",\"viewerOccupations\"]}");
}
