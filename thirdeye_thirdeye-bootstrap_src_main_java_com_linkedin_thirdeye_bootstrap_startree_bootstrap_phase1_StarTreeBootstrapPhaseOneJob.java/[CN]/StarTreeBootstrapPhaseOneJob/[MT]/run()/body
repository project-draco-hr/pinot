{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(StarTreeBootstrapPhaseOneJob.class);
  FileSystem fs=FileSystem.get(getConf());
  Schema schema=new Schema.Parser().parse(fs.open(new Path(getAndCheck(STAR_TREE_BOOTSTRAP_INPUT_AVRO_SCHEMA.toString()))));
  LOG.info("{}",schema);
  job.setMapperClass(BootstrapMapper.class);
  AvroJob.setInputKeySchema(job,schema);
  job.setInputFormatClass(AvroKeyInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setPartitionerClass(NodeIdBasedPartitioner.class);
  job.setCombinerClass(StarTreeBootstrapReducer.class);
  job.setReducerClass(StarTreeBootstrapReducer.class);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(BytesWritable.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  String numReducers=props.getProperty("num.reducers");
  if (numReducers != null) {
    job.setNumReduceTasks(Integer.parseInt(numReducers));
  }
 else {
    job.setNumReduceTasks(10);
  }
  LOG.info("Setting number of reducers : " + job.getNumReduceTasks());
  Configuration configuration=job.getConfiguration();
  String inputPathDir=getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_INPUT_PATH);
  getAndSetConfiguration(configuration,STAR_TREE_GENERATION_OUTPUT_PATH);
  getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_CONFIG_PATH);
  getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_OUTPUT_PATH);
  getAndSetConfiguration(configuration,STAR_TREE_BOOTSTRAP_INPUT_AVRO_SCHEMA);
  LOG.info("Input path dir: " + inputPathDir);
  FileInputFormat.setInputDirRecursive(job,true);
  for (  String inputPath : inputPathDir.split(",")) {
    Path input=new Path(inputPath);
    FileStatus[] listFiles=fs.listStatus(input);
    boolean isNested=false;
    for (    FileStatus fileStatus : listFiles) {
      if (fileStatus.isDirectory()) {
        isNested=true;
        LOG.info("Adding input:" + fileStatus.getPath());
        FileInputFormat.addInputPath(job,fileStatus.getPath());
      }
    }
    if (!isNested) {
      LOG.info("Adding input:" + inputPath);
      FileInputFormat.addInputPath(job,input);
    }
  }
  FileOutputFormat.setOutputPath(job,new Path(getAndCheck(STAR_TREE_BOOTSTRAP_OUTPUT_PATH.toString())));
  job.waitForCompletion(true);
  Counters counters=job.getCounters();
  for (  Enum e : StarTreeBootstrapPhase1Counter.values()) {
    Counter counter=counters.findCounter(e);
    LOG.info(counter.getDisplayName() + " : " + counter.getValue());
  }
  Path configPath=new Path(configuration.get(STAR_TREE_BOOTSTRAP_CONFIG_PATH.toString()));
  StarTreeConfig starTreeConfig=StarTreeConfig.decode(fs.open(configPath));
  StarTreeBootstrapPhaseOneConfig config=StarTreeBootstrapPhaseOneConfig.fromStarTreeConfig(starTreeConfig);
  for (  String metricName : config.getMetricNames()) {
    Counter counter=counters.findCounter(config.getCollectionName(),metricName);
    LOG.info(counter.getDisplayName() + " : " + counter.getValue());
  }
  return job;
}
