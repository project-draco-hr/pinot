{
  this.predicate=predicate;
switch (predicate.getType()) {
case EQ:
    String equalsValueToLookup=((EqPredicate)predicate).getEqualsValue();
  filteredDocIdBitmap=invertedINdex.getDocIdSetFor(dictionary.indexOf(equalsValueToLookup));
break;
case IN:
MutableRoaringBitmap orBitmapForInQueries=new MutableRoaringBitmap();
String[] inRangeStrings=((InPredicate)predicate).getInRange();
int[] dicIdsToOrTogether=new int[inRangeStrings.length];
int counter=0;
for (String rawValueInString : inRangeStrings) {
dicIdsToOrTogether[counter++]=dictionary.indexOf(rawValueInString);
}
for (int dicId : dicIdsToOrTogether) {
orBitmapForInQueries.or(invertedINdex.getDocIdSetFor(dicId));
}
filteredDocIdBitmap=orBitmapForInQueries;
break;
case NEQ:
MutableRoaringBitmap neqBitmap=new MutableRoaringBitmap();
int valueToExclude=((NEqPredicate)predicate).getNotEqualsValue() == null ? 0 : dictionary.indexOf(((NEqPredicate)predicate).getNotEqualsValue());
for (int i=1; i <= dictionary.length(); i++) {
if (valueToExclude != i) {
neqBitmap.or(invertedINdex.getDocIdSetFor(i));
}
}
filteredDocIdBitmap=neqBitmap;
break;
case NOT_IN:
final String[] notInValues=((NotInPredicate)predicate).getNotInRange();
final List<Integer> notInIds=new ArrayList<Integer>();
for (final String notInValue : notInValues) {
notInIds.add(new Integer(dictionary.indexOf(notInValue)));
}
final MutableRoaringBitmap notINHolder=new MutableRoaringBitmap();
for (int i=0; i < dictionary.length(); i++) {
if (!notInIds.contains(new Integer(i))) {
notINHolder.or(invertedINdex.getDocIdSetFor(i));
}
}
filteredDocIdBitmap=notINHolder;
break;
case RANGE:
String rangeStart="";
String rangeEnd="";
final boolean incLower=((RangePredicate)predicate).includeLowerBoundary();
final boolean incUpper=((RangePredicate)predicate).includeUpperBoundary();
final String lower=((RangePredicate)predicate).getLowerBoundary();
final String upper=((RangePredicate)predicate).getUpperBoundary();
if (lower.equals("*")) {
rangeStart=dictionary.getString(REALTIME_DICTIONARY_INIT_ID);
}
 else {
rangeStart=lower;
}
if (upper.equals("*")) {
rangeEnd=dictionary.getString(dictionary.length());
}
 else {
rangeEnd=upper;
}
MutableRoaringBitmap rangeBitmap=new MutableRoaringBitmap();
for (int dicId=1; dicId <= dictionary.length(); dicId++) {
if (dictionary.inRange(rangeStart,rangeEnd,dicId,incLower,incUpper)) {
rangeBitmap.or(invertedINdex.getDocIdSetFor(dicId));
}
}
filteredDocIdBitmap=rangeBitmap;
break;
case REGEX:
throw new UnsupportedOperationException("regex filter not supported");
}
return true;
}
