{
  Map<String,List<RawAnomalyResultDTO>> dimensionsResultMap=new HashMap<>();
  for (  RawAnomalyResultDTO anomalyResult : unmergedResults) {
    String dimensions=anomalyResult.getDimensions();
    if (!dimensionsResultMap.containsKey(dimensions)) {
      dimensionsResultMap.put(dimensions,new ArrayList<>());
    }
    dimensionsResultMap.get(dimensions).add(anomalyResult);
  }
  for (  String dimensions : dimensionsResultMap.keySet()) {
    MergedAnomalyResultDTO latestMergedResult=mergedResultDAO.findLatestByFunctionIdDimensions(function.getId(),dimensions);
    List<RawAnomalyResultDTO> unmergedResultsByDimensions=dimensionsResultMap.get(dimensions);
    List<MergedAnomalyResultDTO> mergedResults=AnomalyTimeBasedSummarizer.mergeAnomalies(latestMergedResult,unmergedResultsByDimensions,mergeConfig.getMergeDuration(),mergeConfig.getSequentialAllowedGap());
    for (    MergedAnomalyResultDTO mergedResult : mergedResults) {
      mergedResult.setFunction(function);
      mergedResult.setDimensions(dimensions);
    }
    LOG.info("Merging [{}] raw anomalies into [{}] merged anomalies for function id : [{}] and dimensions : [{}]",unmergedResults.size(),mergedResults.size(),function.getId(),dimensions);
    output.addAll(mergedResults);
  }
}
