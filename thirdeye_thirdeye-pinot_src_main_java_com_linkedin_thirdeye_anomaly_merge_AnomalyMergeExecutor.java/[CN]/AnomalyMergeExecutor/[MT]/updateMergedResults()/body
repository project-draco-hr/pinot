{
  List<AnomalyFunctionSpec> activeFunctions=anomalyFunctionDAO.findAllActiveFunctions();
  for (  AnomalyFunctionSpec function : activeFunctions) {
    List<AnomalyResult> unmergedResults=anomalyResultDAO.findUnmergedByFunctionId(function.getId());
    List<AnomalyMergedResult> output=new ArrayList<>();
    if (unmergedResults.size() > 0) {
switch (mergeConfig.getMergeStrategy()) {
case FUNCTION:
        performMergeBasedOnFunctionId(function,unmergedResults,output);
      break;
case FUNCTION_DIMENSIONS:
    performMergeBasedOnFunctionIdAndDimensions(function,unmergedResults,output);
  break;
default :
throw new IllegalArgumentException("Merge strategy " + mergeConfig.getMergeStrategy() + " not supported");
}
}
}
}
