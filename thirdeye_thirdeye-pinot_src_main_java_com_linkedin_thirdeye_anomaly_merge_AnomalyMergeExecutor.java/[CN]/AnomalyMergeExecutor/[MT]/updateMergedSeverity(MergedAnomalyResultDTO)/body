{
  AnomalyFunctionDTO anomalyFunctionSpec=anomalyMergedResult.getFunction();
  TimeSeriesRequest timeSeriesRequest=new TimeSeriesRequest();
  timeSeriesRequest.setCollectionName(anomalyFunctionSpec.getCollection());
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(anomalyFunctionSpec.getMetric(),anomalyFunctionSpec.getMetricFunction(),anomalyFunctionSpec.getCollection());
  timeSeriesRequest.setMetricExpressions(metricExpressions);
  TimeGranularity timeBucket=new TimeGranularity(anomalyFunctionSpec.getBucketSize(),anomalyFunctionSpec.getBucketUnit());
  timeSeriesRequest.setAggregationTimeGranularity(timeBucket);
  timeSeriesRequest.setEndDateInclusive(false);
  Multimap<String,String> filters=ArrayListMultimap.create();
  if (StringUtils.isNotBlank(anomalyFunctionSpec.getFilters())) {
    filters.putAll(ThirdEyeUtils.getFilterSet(anomalyFunctionSpec.getFilters()));
  }
  String exploreDimension=anomalyFunctionSpec.getExploreDimensions();
  if (StringUtils.isNotBlank(exploreDimension)) {
    timeSeriesRequest.setGroupByDimensions(Collections.singletonList(exploreDimension));
    String anomalyDimensions=anomalyMergedResult.getDimensions();
    String[] dimArr=anomalyDimensions.split(",");
    for (    String dim : dimArr) {
      if (!StringUtils.isBlank(dim) && !"*".equals(dim)) {
        filters.removeAll(exploreDimension);
        if (dim.equalsIgnoreCase("other")) {
          filters.put(exploreDimension,dim);
          filters.put(exploreDimension,dim.toLowerCase());
          filters.put(exploreDimension,"");
        }
 else {
          filters.put(exploreDimension,dim);
        }
        LOG.info("Adding filter : [{} = {}] in the query",exploreDimension,dim);
      }
    }
  }
  LOG.info("Applying final filter : {}",filters.toString());
  timeSeriesRequest.setFilterSet(filters);
  timeSeriesRequest.setStart(new DateTime(anomalyMergedResult.getStartTime()));
  timeSeriesRequest.setEnd(new DateTime(anomalyMergedResult.getEndTime()));
  TimeSeriesResponse responseCurrent=timeSeriesHandler.handle(timeSeriesRequest);
  long baselineOffset=AnomalyFunctionUtils.getBaselineOffset(anomalyFunctionSpec);
  timeSeriesRequest.setStart(new DateTime(anomalyMergedResult.getStartTime() - baselineOffset));
  timeSeriesRequest.setEnd(new DateTime(anomalyMergedResult.getEndTime() - baselineOffset));
  TimeSeriesResponse responseBaseline=timeSeriesHandler.handle(timeSeriesRequest);
  Double currentValue;
  Double baselineValue;
  if (Utils.isDerievedMetric(anomalyFunctionSpec.getCollection(),anomalyFunctionSpec.getMetric())) {
    LOG.info("Found derived metric [{}], assigning avg value per bucket in the message",anomalyFunctionSpec.getMetric());
    currentValue=getAvgMetricValuePerBucket(responseCurrent,anomalyFunctionSpec.getMetric());
    baselineValue=getAvgMetricValuePerBucket(responseBaseline,anomalyFunctionSpec.getMetric());
  }
 else {
    LOG.info("Assigning total value in the message for metric : [{}]",anomalyFunctionSpec.getMetric());
    currentValue=getMetricValueSum(responseCurrent,anomalyFunctionSpec.getMetric());
    baselineValue=getMetricValueSum(responseBaseline,anomalyFunctionSpec.getMetric());
  }
  Double severity;
  if (baselineValue != 0) {
    severity=(currentValue - baselineValue) / baselineValue;
    anomalyMergedResult.setWeight(severity);
  }
 else {
    LOG.error("Could not recompute severity for merged anomaly [{}], assigning weighted avg",anomalyMergedResult.toString());
  }
  anomalyMergedResult.setMessage(createMessage(anomalyMergedResult.getWeight(),currentValue,baselineValue));
}
