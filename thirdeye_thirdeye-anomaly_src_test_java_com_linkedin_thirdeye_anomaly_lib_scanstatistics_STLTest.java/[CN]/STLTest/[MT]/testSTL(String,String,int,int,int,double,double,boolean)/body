{
  String[] lines=ResourceUtils.getResourceAsString(filename).split("\n");
  int numData=lines.length;
  long[] timestamps=new long[numData];
  double[] series=new double[numData];
  double[] trend_r=new double[numData];
  double[] residual_r=new double[numData];
  double[] seasonal_r=new double[numData];
  for (int i=0; i < numData; i++) {
    timestamps[i]=i;
    String[] values=lines[i].split(",");
    String value=values[1];
    if (value.equals("NA")) {
      series[i]=Double.NaN;
    }
 else {
      series[i]=Double.valueOf(value);
    }
    trend_r[i]=Double.valueOf(values[2]);
    residual_r[i]=Double.valueOf(values[3]);
    seasonal_r[i]=Double.valueOf(values[4]);
  }
  ScanStatisticsAnomalyDetectionFunction.removeMissingValuesByAveragingNeighbors(series);
  double[][] data=removeSeasonality(timestamps,series,seasonality,innerloop,outerloop,lowpassbandwidth,trendcomponentbandwidth,true);
  double[] data_trend=data[0];
  double[] data_remainder=data[1];
  double[] data_seasonal=data[2];
  double[] data_seasonal_check=new double[seasonality];
  double[] seasonal_r_check=new double[seasonality];
  outputToCsv(trend_r,data_trend,seasonal_r,data_seasonal,residual_r,data_remainder,outputfilename);
  double trend_pearson=CheckTimeSeriesSimularityPearson(trend_r,data_trend);
  double remainder_pearson=CheckTimeSeriesSimularityPearson(residual_r,data_remainder);
  double seasonal_pearson=CheckTimeSeriesSimularityPearson(seasonal_r,data_seasonal);
  boolean trend_pearson_test=trend_pearson > 0.75;
  boolean remainder_pearson_test=remainder_pearson > 0.75;
  boolean seasonal_pearson_test=seasonal_pearson > 0.75;
  System.out.println(trend_pearson + "," + remainder_pearson+ ","+ seasonal_pearson);
  Assert.assertEquals(trend_pearson_test,true);
  Assert.assertEquals(remainder_pearson_test,true);
  Assert.assertEquals(seasonal_pearson_test,true);
  boolean reject_null=checkTimeSeriesSimularityTtest(seasonal_r_check,data_seasonal_check);
  Assert.assertEquals(reject_null,false);
}
