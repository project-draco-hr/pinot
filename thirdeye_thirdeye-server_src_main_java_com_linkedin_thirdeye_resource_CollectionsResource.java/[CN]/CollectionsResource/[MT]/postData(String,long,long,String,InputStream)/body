{
  DateTime minTime=new DateTime(minTimeMillis,DateTimeZone.UTC);
  DateTime maxTime=new DateTime(maxTimeMillis,DateTimeZone.UTC);
  LOG.info("Received data for {} in {} to {}",collection,minTime,maxTime);
  dataUpdateManager.updateData(collection,schedule,minTime,maxTime,dataBytes);
  final String collectionName=collection;
  AtomicLong value=lastPostDataMillis.putIfAbsent(collectionName,new AtomicLong(System.currentTimeMillis()));
  if (value == null) {
    metricRegistry.register(MetricRegistry.name(CollectionsResource.class,collectionName,LAST_POST_DATA_MILLIS),new Gauge<Long>(){
      @Override public Long getValue(){
        return lastPostDataMillis.get(collectionName).get();
      }
    }
);
  }
 else {
    value.set((System.currentTimeMillis()));
  }
  File collectionDir=new File(rootDir,collection);
  final String schedulePrefix=schedule;
  final DateTime minTimePrefix=minTime;
  final DateTime maxTimePrefix=maxTime;
  File[] dataDirs=collectionDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(StorageUtils.getDataDirPrefix(schedulePrefix,minTimePrefix,maxTimePrefix));
    }
  }
);
  if (dataDirs.length == 0) {
    throw new IllegalStateException("server upload failed");
  }
  IndexMetadata indexMetadata=getIndexMetadata(dataDirs[0]);
  AtomicLong maxDataTimeValue=maxDataTimeMillis.putIfAbsent(collection,new AtomicLong(indexMetadata.getMaxDataTimeMillis()));
  if (maxDataTimeValue == null) {
    metricRegistry.register(MetricRegistry.name(CollectionsResource.class,collection,MAX_DATA_TIME_MILLIS),new Gauge<Long>(){
      @Override public Long getValue(){
        return maxDataTimeMillis.get(collectionName).get();
      }
    }
);
  }
 else {
    if (indexMetadata.getMaxDataTimeMillis() > maxDataTimeValue.get())     maxDataTimeValue.set(indexMetadata.getMaxDataTimeMillis());
  }
  return Response.ok().build();
}
