{
  Options options=new Options();
  options.addOption("filter",true,"JSON map of dimension name -> value");
  options.addOption("time",true,"Time value");
  options.addOption("debug",false,"Print out each matching star tree record");
  CommandLine commandLine=new GnuParser().parse(options,args);
  if (commandLine.getArgs().length < 2) {
    HelpFormatter helpFormatter=new HelpFormatter();
    helpFormatter.printHelp("usage: [opts] configFile inputFile(s) ...",options);
    return;
  }
  StarTreeConfig config=StarTreeConfig.decode(new FileInputStream(commandLine.getArgs()[0]));
  Map<String,String> filter=OBJECT_MAPPER.readValue(commandLine.getOptionValue("filter","{}"),TYPE_REFERENCE);
  Long time=null;
  if (commandLine.hasOption("time")) {
    time=Long.valueOf(commandLine.getOptionValue("time"));
  }
  List<Iterable<StarTreeRecord>> streams=new ArrayList<Iterable<StarTreeRecord>>();
  for (int i=1; i < commandLine.getArgs().length; i++) {
    streams.add(new StarTreeRecordStreamAvroFileImpl(new File(commandLine.getArgs()[i]),config.getDimensions(),config.getMetrics(),config.getTime().getColumnName()));
  }
  boolean debug=commandLine.hasOption("debug");
  PrintWriter printWriter=new PrintWriter(System.out);
  new StarTreeRecordAnalysisTool(printWriter,config,filter,time,streams,debug).run();
  printWriter.flush();
}
