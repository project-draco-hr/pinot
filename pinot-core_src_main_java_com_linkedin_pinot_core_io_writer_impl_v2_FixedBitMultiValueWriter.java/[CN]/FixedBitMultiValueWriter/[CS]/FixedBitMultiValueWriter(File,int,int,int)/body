{
  float averageValuesPerDoc=totalNumValues / numDocs;
  this.docsPerChunk=(int)(Math.ceil(PREFERRED_NUM_VALUES_PER_CHUNK / averageValuesPerDoc));
  this.numChunks=(numDocs + docsPerChunk - 1) / docsPerChunk;
  chunkOffsetHeaderSize=numChunks * SIZE_OF_INT * NUM_COLS_IN_HEADER;
  bitsetSize=(totalNumValues + 7) / 8;
  rawDataSize=SizeUtil.computeBytesRequired(totalNumValues,columnSizeInBits,SizeUtil.BIT_UNPACK_BATCH_SIZE);
  LOGGER.info("Allocating:{} for rawDataSize to store {} values of bits:{}",rawDataSize,totalNumValues,columnSizeInBits);
  totalSize=chunkOffsetHeaderSize + bitsetSize + rawDataSize;
  Preconditions.checkState(totalSize > 0 && totalSize < Integer.MAX_VALUE,"Total size exceeds 2GB for file: " + file.toString());
  this.indexDataBuffer=PinotDataBuffer.fromFile(file,0,totalSize,ReadMode.mmap,FileChannel.MapMode.READ_WRITE,file.getAbsolutePath() + ".fixedBitMVWriter");
  chunkOffsetsBuffer=indexDataBuffer.view(0,chunkOffsetHeaderSize);
  int bitSetEnd=chunkOffsetHeaderSize + bitsetSize;
  bitsetBuffer=indexDataBuffer.view(chunkOffsetHeaderSize,bitSetEnd);
  rawDataBuffer=indexDataBuffer.view(bitSetEnd,bitSetEnd + rawDataSize);
  chunkOffsetsWriter=new FixedByteSingleValueMultiColWriter(chunkOffsetsBuffer,numDocs,NUM_COLS_IN_HEADER,new int[]{SIZE_OF_INT});
  customBitSet=PinotDataCustomBitSet.withDataBuffer(bitsetSize,bitsetBuffer);
  rawDataWriter=new FixedBitSingleValueWriter(rawDataBuffer,totalNumValues,columnSizeInBits);
}
