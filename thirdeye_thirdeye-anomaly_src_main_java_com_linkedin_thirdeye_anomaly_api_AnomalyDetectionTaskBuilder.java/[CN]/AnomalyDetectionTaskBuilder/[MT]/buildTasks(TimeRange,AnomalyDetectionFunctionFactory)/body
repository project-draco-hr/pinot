{
  List<AnomalyDetectionTask> tasks=new LinkedList<AnomalyDetectionTask>();
  List<? extends FunctionTableRow> rows=FunctionTable.selectRows(dbConfig,functionFactory.getFunctionRowClass());
  for (  FunctionTableRow functionTableRow : rows) {
    try {
      AnomalyDetectionDriverConfig collectionDriverConfig=AnomalyDetectionDriverConfig.find(collectionDrivers,functionTableRow.getCollectionName());
      StarTreeConfig starTreeConfig=ThirdEyeServerQueryUtils.getStarTreeConfig(collectionDriverConfig);
      AnomalyDetectionFunction function=functionFactory.getFunction(starTreeConfig,dbConfig,functionTableRow);
      AnomalyDetectionTaskInfo taskInfo=new AnomalyDetectionTaskInfo(functionTableRow.getFunctionName(),functionTableRow.getFunctionId(),functionTableRow.getFunctionDescription(),timeRange);
      AnomalyResultHandler resultHandler=new AnomalyResultHandlerDatabase(dbConfig);
      resultHandler.init(starTreeConfig,new HandlerProperties());
      AnomalyDetectionFunctionHistory functionHistory=new AnomalyDetectionFunctionHistory(starTreeConfig,dbConfig,functionTableRow.getFunctionId());
      AnomalyDetectionTask task=new AnomalyDetectionTaskImpl(starTreeConfig,collectionDriverConfig,taskInfo,function,resultHandler,functionHistory);
      tasks.add(task);
    }
 catch (    Exception e) {
      LOGGER.error("could not create function for function_id={}",functionTableRow.getFunctionId(),e);
    }
  }
  return tasks;
}
