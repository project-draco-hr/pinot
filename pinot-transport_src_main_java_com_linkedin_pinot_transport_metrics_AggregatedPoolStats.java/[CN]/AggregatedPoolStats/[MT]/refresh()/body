{
  int totalCreated=0;
  int totalDestroyed=0;
  int totalCreateErrors=0;
  int totalDestroyErrors=0;
  int totalBadDestroyed=0;
  int totalTimedOut=0;
  int checkedOut=0;
  int maxPoolSize=0;
  int minPoolSize=0;
  int poolSize=0;
  int sampleMaxCheckedOut=0;
  int sampleMaxPoolSize=0;
  int idleCount=0;
  AggregatedHistogram<Sampling> waitTimeHist=new AggregatedHistogram<Sampling>();
  AggregatedHistogram<Sampling> createTimeHist=new AggregatedHistogram<Sampling>();
  for (  PoolStatsProvider p : _poolStatsProvider) {
    PoolStats<T> s=p.getStats();
    totalCreated+=s.getTotalCreated();
    totalDestroyed+=s.getTotalBadDestroyed();
    totalCreateErrors+=s.getTotalCreateErrors();
    totalDestroyErrors+=s.getTotalDestroyErrors();
    totalBadDestroyed+=s.getTotalBadDestroyed();
    totalTimedOut+=s.getTotalTimedOut();
    checkedOut+=s.getCheckedOut();
    maxPoolSize+=s.getMaxPoolSize();
    minPoolSize+=s.getMinPoolSize();
    poolSize+=s.getPoolSize();
    sampleMaxCheckedOut+=s.getSampleMaxCheckedOut();
    sampleMaxPoolSize+=s.getSampleMaxPoolSize();
    idleCount+=s.getIdleCount();
    waitTimeHist.add(s.getWaitTime().getHistogram());
    createTimeHist.add(s.getLifecycleStats().getCreateTime().getHistogram());
  }
  _totalCreated=totalCreated;
  _totalDestroyed=totalDestroyed;
  _totalBadDestroyed=totalBadDestroyed;
  _totalCreateErrors=totalCreateErrors;
  _totalDestroyErrors=totalDestroyErrors;
  _totalTimedOut=totalTimedOut;
  _checkedOut=checkedOut;
  _maxPoolSize=maxPoolSize;
  _minPoolSize=minPoolSize;
  _poolSize=poolSize;
  _sampleMaxCheckedOut=sampleMaxCheckedOut;
  _sampleMaxPoolSize=sampleMaxPoolSize;
  _idleCount=idleCount;
  _waitTime=new LatencyMetric(waitTimeHist);
  _lifecycleStats=new LifecycleStats(new LatencyMetric<AggregatedHistogram<Sampling>>(createTimeHist));
}
