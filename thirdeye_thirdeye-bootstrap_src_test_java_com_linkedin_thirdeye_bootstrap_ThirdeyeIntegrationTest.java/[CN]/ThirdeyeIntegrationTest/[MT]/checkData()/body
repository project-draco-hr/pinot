{
  long metric1SumActual=0;
  long metric1SumExpected=0;
  String sql="SELECT metric1 FROM " + COLLECTION + " WHERE time BETWEEN '"+ getDateString(MIN_TIME)+ "' AND '"+ getDateString(MAX_TIME)+ "'";
  URL url=new URL(THIRDEYE_SERVER + "/query/" + URLEncoder.encode(sql,"UTF-8"));
  ObjectMapper OBJECT_MAPPER=new ObjectMapper();
  ThirdEyeRawResponse queryResult=OBJECT_MAPPER.readValue((new InputStreamReader(url.openStream(),"UTF-8")),ThirdEyeRawResponse.class);
  for (  Entry<String,Map<String,Number[]>> entry : queryResult.getData().entrySet()) {
    for (    Entry<String,Number[]> metricEntry : entry.getValue().entrySet()) {
      metric1SumActual+=metricEntry.getValue()[0].longValue();
    }
  }
  File schemaFile=new File(getClass().getClassLoader().getResource("integrationTest/" + SCHEMA_FILE).getFile());
  Schema schema=new Schema.Parser().parse(schemaFile);
  GenericRecord record=new GenericData.Record(schema);
  File avroDataInput=new File(rootDir,COLLECTION);
  avroDataInput=new File(avroDataInput,INPUT_DIR);
  for (  File avroFile : avroDataInput.listFiles()) {
    DatumReader<GenericRecord> datumReader=new GenericDatumReader<GenericRecord>(schema);
    DataFileReader<GenericRecord> dataFileReader=new DataFileReader<>(avroFile,datumReader);
    while (dataFileReader.hasNext()) {
      record=dataFileReader.next();
      long metric1=(long)record.get("metric1");
      metric1SumExpected+=metric1;
    }
  }
  assertTrue("Data mismatch between input files and server",metric1SumActual == metric1SumExpected);
}
