{
  LOGGER.info("Starting rollup_phase4 job");
  Job job=Job.getInstance(conf);
  job.setJobName("RollupPhase4Test");
  job.setJarByClass(RollupPhaseFourJob.class);
  job.setMapperClass(RollupPhaseFourMapper.class);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setCombinerClass(RollupPhaseFourReducer.class);
  job.setReducerClass(RollupPhaseFourReducer.class);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(BytesWritable.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  job.setNumReduceTasks(1);
  Configuration configuration=job.getConfiguration();
  configuration.set(ROLLUP_PHASE4_INPUT_PATH.toString(),rollupPhase3OutputPath.toString() + "," + aboveThresholdPath.toString());
  configuration.set(ROLLUP_PHASE4_CONFIG_PATH.toString(),configFilePath.toString());
  configuration.set(ROLLUP_PHASE4_OUTPUT_PATH.toString(),rollupPhase4OutputPath.toString());
  for (  String inputPath : configuration.get(ROLLUP_PHASE4_INPUT_PATH.toString()).split(",")) {
    FileInputFormat.addInputPath(job,new Path(inputPath));
  }
  FileOutputFormat.setOutputPath(job,new Path(configuration.get(ROLLUP_PHASE4_OUTPUT_PATH.toString())));
  job.waitForCompletion(true);
  assertTrue("rollup_phase4 job failed",job.isSuccessful());
  assertTrue("rollup_phase4 folder not created",fs.exists(rollupPhase4OutputPath));
  FileStatus[] rollupPhase4Status=fs.listStatus(rollupPhase4OutputPath,new PathFilter(){
    @Override public boolean accept(    Path path){
      return path.getName().startsWith("part");
    }
  }
);
  assertTrue("rollup_phase4 data not generated",rollupPhase4Status.length != 0);
  LOGGER.info("rollup_phase4 job completed");
}
