{
  metric=functionConfig.getProperty("metric");
  pValueThreshold=Double.parseDouble(functionConfig.getProperty("pValueThreshold",PROP_DEFAULT_P_VALUE_THRESHOLD));
  if (pValueThreshold <= 0) {
    throw new IllegalFunctionException("pValueThreshold must be > 0");
  }
  trainSize=Integer.parseInt(functionConfig.getProperty("trainSize"));
  trainUnit=TimeUnit.valueOf(functionConfig.getProperty("trainUnit"));
  if (trainSize < 0) {
    throw new IllegalFunctionException("trainSize must be >= 0");
  }
  bucketSize=Integer.parseInt(functionConfig.getProperty("bucketSize"));
  bucketUnit=TimeUnit.valueOf(functionConfig.getProperty("bucketUnit"));
  if (bucketSize < 0) {
    throw new IllegalFunctionException("bucketSize must be >= 0");
  }
  monitoringWindowSize=Integer.parseInt(functionConfig.getProperty("monitoringWindowSize",PROP_DEFAULT_MONITORING_WINDOW_SIZE));
  monitoringWindowUnit=TimeUnit.valueOf(functionConfig.getProperty("monitoringWindowUnit",PROP_DEFAULT_MONITORING_WINDOW_UNIT));
  if (monitoringWindowSize < 0) {
    throw new IllegalFunctionException("monitoringWindowSize must be >= 0");
  }
  onlyAlertBoundaries=Boolean.parseBoolean(functionConfig.getProperty("onlyAlertBoundaries",PROP_DEFAULT_ONLY_ALERT_BOUNDARIES));
  stlTrendBandwidth=Double.parseDouble(functionConfig.getProperty("stlTrendBandwidth",PROP_DEFAULT_STL_TREND_BANDWIDTH));
  seasonal=Integer.parseInt(functionConfig.getProperty("seasonal",PROP_DEFAULT_SEASONAL));
  numSimulation=Integer.parseInt(functionConfig.getProperty("numSimulations",PROP_DEFAULT_NUM_SIMULATIONS));
  minWindowLength=Integer.parseInt(functionConfig.getProperty("minWindowLength",PROP_DEFAULT_MIN_WINDOW_LEN));
  maxWindowLength=Integer.parseInt(functionConfig.getProperty("maxWindowLength",PROP_DEFAULT_MAX_WINDOW_LEN));
  minIncrement=Integer.parseInt(functionConfig.getProperty("minIncrement",PROP_DEFAULT_MIN_INCREMENT));
  bootstrap=Boolean.parseBoolean(functionConfig.getProperty("bootstrap",PROP_DEFAULT_BOOTSTRAP));
  pattern=Pattern.valueOf(functionConfig.getProperty("pattern"));
}
