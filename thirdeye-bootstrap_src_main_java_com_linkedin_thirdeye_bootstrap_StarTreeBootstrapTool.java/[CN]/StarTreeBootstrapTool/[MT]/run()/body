{
  try {
    if (!outputDir.exists() && outputDir.mkdir()) {
      LOG.info("Created {}",outputDir);
    }
    StarTreeManager starTreeManager=new StarTreeManagerImpl(executorService);
    starTreeManager.registerConfig(starTreeConfig.getCollection(),starTreeConfig);
    int streamId=0;
    for (    Iterable<StarTreeRecord> recordStream : recordStreams) {
      LOG.info("Processing stream {} of {}",++streamId,recordStreams.size());
      starTreeManager.load(starTreeConfig.getCollection(),recordStream);
    }
    StarTree starTree=starTreeManager.getStarTree(starTreeConfig.getCollection());
    File starTreeFile=new File(outputDir,TREE_FILE);
    LOG.info("Writing {}",starTreeFile);
    ObjectOutputStream os=new ObjectOutputStream(new FileOutputStream(starTreeFile));
    os.writeObject(starTree.getRoot());
    os.flush();
    os.close();
    if (keepBuffers) {
      if (!dataDir.exists() && dataDir.mkdir()) {
        LOG.info("Created {}",dataDir);
      }
      writeFixedBuffers(starTree.getRoot());
    }
    Properties recordStoreFactoryConfig=new Properties();
    recordStoreFactoryConfig.setProperty("rootDir",dataDir.getAbsolutePath());
    recordStoreFactoryConfig.setProperty("numTimeBuckets",Integer.toString(numTimeBuckets));
    Map<String,Object> configJson=new HashMap<String,Object>();
    configJson.put("collection",starTreeConfig.getCollection());
    configJson.put("dimensionNames",starTreeConfig.getDimensionNames());
    configJson.put("metricNames",starTreeConfig.getMetricNames());
    configJson.put("timeColumnName",starTreeConfig.getTimeColumnName());
    configJson.put("thresholdFunctionClass",starTreeConfig.getThresholdFunction().getClass().getCanonicalName());
    configJson.put("thresholdFunctionConfig",starTreeConfig.getThresholdFunction().getConfig());
    configJson.put("recordStoreFactoryClass",StarTreeRecordStoreFactoryCircularBufferImpl.class.getCanonicalName());
    configJson.put("recordStoreFactoryConfig",recordStoreFactoryConfig);
    File configFile=new File(outputDir,CONFIG_FILE);
    LOG.info("Writing {}",configFile);
    OBJECT_MAPPER.writerWithDefaultPrettyPrinter().writeValue(configFile,configJson);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    executorService.shutdown();
  }
}
