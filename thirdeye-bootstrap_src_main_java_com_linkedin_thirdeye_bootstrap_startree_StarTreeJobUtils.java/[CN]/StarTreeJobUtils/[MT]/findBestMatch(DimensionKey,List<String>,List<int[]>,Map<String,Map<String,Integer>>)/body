{
  int[] target=new int[dimensionKey.getDimensionsValues().length];
  for (int i=0; i < dimensionNames.size(); i++) {
    String dimensionName=dimensionNames.get(i);
    String dimensionValue=dimensionKey.getDimensionsValues()[i];
    Integer intValue=forwardIndex.get(dimensionName).get(dimensionValue);
    if (intValue == null) {
      intValue=-1;
    }
    target[i]=intValue;
  }
  int[] closestCombination=null;
  Integer closestScore=null;
  for (  int[] combination : dimensionCombinations) {
    int score=0;
    for (int i=0; i < target.length; i++) {
      if (target[i] != combination[i]) {
        if (combination[i] == StarTreeConstants.OTHER_VALUE) {
          score+=1;
        }
 else         if (combination[i] == StarTreeConstants.STAR_VALUE) {
          score+=0;
        }
 else         if (target[i] == StarTreeConstants.STAR_VALUE) {
          score+=0;
        }
 else {
          score=-1;
          break;
        }
      }
    }
    if (score >= 0 && (closestScore == null || score < closestScore)) {
      closestScore=score;
      closestCombination=combination;
    }
  }
  if (closestCombination == null) {
    StringBuilder sb=new StringBuilder();
    for (    int[] combination : dimensionCombinations) {
      sb.append(Arrays.toString(combination));
      sb.append("\n");
    }
    throw new IllegalArgumentException("Could not find matching combination for " + dimensionKey + " in \n"+ sb.toString()+ "\n"+ " forwardIndex:"+ forwardIndex);
  }
  return closestCombination;
}
