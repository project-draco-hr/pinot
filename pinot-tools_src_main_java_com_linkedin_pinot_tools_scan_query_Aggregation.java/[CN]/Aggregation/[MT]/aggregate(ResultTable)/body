{
  if (_groupByColumns == null) {
    return aggregateOne(input);
  }
  Map<GroupByOperator,ResultTable> resultsMap=new HashMap<>();
  for (  ResultTable.Row row : input) {
    List<Object> groupByValues=new ArrayList<>();
    for (    String groupByColumn : _groupByColumns) {
      groupByValues.add(row.get(groupByColumn,null));
    }
    GroupByOperator groupByOperator=new GroupByOperator(groupByValues);
    ResultTable resultTable;
    if (resultsMap.containsKey(groupByOperator)) {
      resultTable=resultsMap.get(groupByOperator);
    }
 else {
      resultTable=new ResultTable(_allColumns,0);
      resultsMap.put(groupByOperator,resultTable);
    }
    resultTable.append(row);
  }
  ResultTable results=new ResultTable(_allColumns,0);
  for (  Map.Entry<GroupByOperator,ResultTable> entry : resultsMap.entrySet()) {
    GroupByOperator groupByOperator=entry.getKey();
    ResultTable groupByTable=entry.getValue();
    ResultTable aggregationResult=new ResultTable(_allColumns,1);
    for (    Object groupByColumn : groupByOperator._getGroupBys()) {
      aggregationResult.add(0,groupByColumn);
    }
    ResultTable.Row row=aggregateOne(groupByTable).getRow(0);
    for (    Object value : row) {
      aggregationResult.add(0,value);
    }
    results.append(aggregationResult);
  }
  results.setResultType(ResultTable.ResultType.AggregationGroupBy);
  return results;
}
