{
  SegmentCompletionProtocol.Response response=new SegmentCompletionProtocol.Response(SegmentCompletionProtocol.ControllerResponseStatus.NOT_SENT,-1L);
  HttpClient httpClient=new HttpClient();
  ControllerLeaderLocator leaderLocator=ControllerLeaderLocator.getInstance();
  final String leaderAddress=leaderLocator.getControllerLeader();
  if (leaderAddress == null) {
    LOGGER.error("No leader found {}",this.toString());
    return new SegmentCompletionProtocol.Response(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER,-1L);
  }
  final String url=request.getUrl(leaderAddress);
  HttpMethodBase method;
  if (parts != null) {
    PostMethod postMethod=new PostMethod(url);
    postMethod.setRequestEntity(new MultipartRequestEntity(parts,new HttpMethodParams()));
    method=postMethod;
  }
 else {
    method=new GetMethod(url);
  }
  LOGGER.info("Sending request {} for {}",url,this.toString());
  try {
    int responseCode=httpClient.executeMethod(method);
    if (responseCode >= 300) {
      LOGGER.error("Bad controller response code {} for {}",responseCode,this.toString());
      return response;
    }
 else {
      response=new SegmentCompletionProtocol.Response(method.getResponseBodyAsString());
      LOGGER.info("Controller response {} for {}",response.toJsonString(),this.toString());
      if (response.getStatus().equals(SegmentCompletionProtocol.ControllerResponseStatus.NOT_LEADER)) {
        leaderLocator.refreshControllerLeader();
      }
      return response;
    }
  }
 catch (  IOException e) {
    LOGGER.error("IOException {}",this.toString(),e);
    leaderLocator.refreshControllerLeader();
    return response;
  }
}
