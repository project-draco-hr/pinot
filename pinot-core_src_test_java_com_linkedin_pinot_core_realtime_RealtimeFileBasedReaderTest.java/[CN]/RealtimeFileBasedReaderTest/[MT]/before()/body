{
  filePath=RealtimeFileBasedReaderTest.class.getClassLoader().getResource(AVRO_DATA).getFile();
  fieldTypeMap=new HashMap<String,FieldSpec.FieldType>();
  fieldTypeMap.put("viewerId",FieldType.DIMENSION);
  fieldTypeMap.put("vieweeId",FieldType.DIMENSION);
  fieldTypeMap.put("viewerPrivacySetting",FieldType.DIMENSION);
  fieldTypeMap.put("vieweePrivacySetting",FieldType.DIMENSION);
  fieldTypeMap.put("viewerObfuscationType",FieldType.DIMENSION);
  fieldTypeMap.put("viewerCompanies",FieldType.DIMENSION);
  fieldTypeMap.put("viewerOccupations",FieldType.DIMENSION);
  fieldTypeMap.put("viewerRegionCode",FieldType.DIMENSION);
  fieldTypeMap.put("viewerIndustry",FieldType.DIMENSION);
  fieldTypeMap.put("viewerSchool",FieldType.DIMENSION);
  fieldTypeMap.put("weeksSinceEpochSunday",FieldType.DIMENSION);
  fieldTypeMap.put("daysSinceEpoch",FieldType.DIMENSION);
  fieldTypeMap.put("minutesSinceEpoch",FieldType.TIME);
  fieldTypeMap.put("count",FieldType.METRIC);
  schema=SegmentTestUtils.extractSchemaFromAvro(new File(filePath),fieldTypeMap,TimeUnit.MINUTES);
  StreamProviderConfig config=new FileBasedStreamProviderConfig(FileFormat.AVRO,filePath,schema);
  StreamProvider provider=new FileBasedStreamProviderImpl();
  provider.init(config);
  realtimeSegment=new RealtimeSegmentImpl(schema,100000);
  GenericRow row=provider.next();
  while (row != null) {
    realtimeSegment.index(row);
    row=provider.next();
  }
  provider.shutdown();
  if (new File("/tmp/realtime").exists()) {
    FileUtils.deleteQuietly(new File("/tmp/realtime"));
  }
  RealtimeSegmentConverter conveter=new RealtimeSegmentConverter(realtimeSegment,"/tmp/realtime",schema,"mirror","seomg-segment",null);
  conveter.build();
  offlineSegment=Loaders.IndexSegment.load(new File("/tmp/realtime").listFiles()[0],ReadMode.mmap);
}
