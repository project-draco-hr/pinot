{
  for (  FieldSpec spec : schema.getAllFieldSpecs()) {
    if (spec.isSingleValueField() && spec.getFieldType() == FieldType.DIMENSION) {
      DataSource offlineDS=offlineSegment.getDataSource(spec.getName());
      DataSource realtimeDS=realtimeSegment.getDataSource(spec.getName());
      Block offlineBlock=offlineDS.nextBlock();
      Block realtimeBlock=realtimeDS.nextBlock();
      BlockMetadata offlineMetadata=offlineBlock.getMetadata();
      BlockMetadata realtimeMetadata=realtimeBlock.getMetadata();
      BlockSingleValIterator offlineValIterator=(BlockSingleValIterator)offlineBlock.getBlockValueSet().iterator();
      BlockSingleValIterator realtimeValIterator=(BlockSingleValIterator)realtimeBlock.getBlockValueSet().iterator();
      Assert.assertEquals(offlineSegment.getSegmentMetadata().getTotalRawDocs(),realtimeSegment.getAggregateDocumentCount());
      while (realtimeValIterator.hasNext()) {
        int offlineDicId=offlineValIterator.nextIntVal();
        int realtimeDicId=realtimeValIterator.nextIntVal();
        try {
          Assert.assertEquals(offlineMetadata.getDictionary().get(offlineDicId),realtimeMetadata.getDictionary().get(realtimeDicId));
        }
 catch (        AssertionError e) {
          LOGGER.info("column : {}",spec.getName());
          LOGGER.info("realtimeDicId : {}, rawValue : {}",realtimeDicId,realtimeMetadata.getDictionary().get(realtimeDicId));
          LOGGER.info("offlineDicId : {}, rawValue : {}",offlineDicId,offlineMetadata.getDictionary().get(offlineDicId));
          throw e;
        }
      }
      Assert.assertEquals(offlineValIterator.hasNext(),realtimeValIterator.hasNext());
    }
  }
}
