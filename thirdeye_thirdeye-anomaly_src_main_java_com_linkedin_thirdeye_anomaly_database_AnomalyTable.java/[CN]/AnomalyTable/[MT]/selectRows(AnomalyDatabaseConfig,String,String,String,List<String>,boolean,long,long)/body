{
  String sql=buildAnomalyTableSelectStatement(dbConfig,functionName,functionDescription,collection,metrics,topLevelOnly,startTimeWindow,endTimeWindow);
  Connection conn=null;
  Statement stmt=null;
  ResultSet rs=null;
  try {
    conn=dbConfig.getConnection();
    stmt=conn.createStatement();
    rs=stmt.executeQuery(sql);
    List<AnomalyTableRow> results=new LinkedList<AnomalyTableRow>();
    while (rs.next()) {
      AnomalyTableRow row=new AnomalyTableRow();
      row.setId(rs.getInt("id"));
      row.setFunctionId(rs.getInt("function_id"));
      row.setFunctionName(rs.getString("function_name"));
      row.setFunctionDescription(rs.getString("function_description"));
      row.setCollection(rs.getString("collection"));
      row.setTimeWindow(rs.getTimestamp("time_window").getTime());
      row.setNonStarCount(rs.getInt("non_star_count"));
      row.setDimensions(rs.getString("dimension"));
      row.setMetrics(deserializeMetrics(rs.getString("metrics")));
      row.setAnomalyScore(rs.getDouble("anomaly_score"));
      row.setAnomalyVolume(rs.getDouble("anomaly_volume"));
      row.setProperties(rs.getString("properties"));
      results.add(row);
    }
    return results;
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (conn != null) {
        conn.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
  }
  return null;
}
