{
  Connection conn=null;
  Statement stmt=null;
  ResultSet rs=null;
  try {
    String sql=buildAnomalyTableSelectStatement(dbConfig,functionId,functionName,functionDescription,collection,topLevelOnly,orderBy,timeRange);
    conn=dbConfig.getConnection();
    stmt=conn.createStatement();
    rs=stmt.executeQuery(sql);
    List<AnomalyTableRow> results=new LinkedList<AnomalyTableRow>();
    while (rs.next()) {
      AnomalyTableRow row=new AnomalyTableRow();
      row.setId(rs.getInt("id"));
      row.setFunctionTable(rs.getString("function_table"));
      row.setFunctionId(rs.getInt("function_id"));
      row.setFunctionName(rs.getString("function_name"));
      row.setFunctionDescription(rs.getString("function_description"));
      row.setCollection(rs.getString("collection"));
      row.setTimeWindow(rs.getLong("time_window"));
      row.setNonStarCount(rs.getInt("non_star_count"));
      row.setDimensions(rs.getString("dimensions"));
      row.setDimensionsContribution(rs.getDouble("dimensions_contribution"));
      row.setMetrics(deserializeMetrics(rs.getString("metrics")));
      row.setAnomalyScore(rs.getDouble("anomaly_score"));
      row.setAnomalyVolume(rs.getDouble("anomaly_volume"));
      ResultProperties properties=new ResultProperties();
      try {
        properties.load(new StringReader(rs.getString("properties")));
      }
 catch (      IOException e) {
        LOGGER.warn("unable to deserialize anomaly result properties",e);
        properties=null;
      }
      row.setProperties(properties);
      if (metrics != null) {
        if (row.getMetrics() != null && row.getMetrics().size() == metrics.size() && metrics.containsAll(row.getMetrics())) {
          results.add(row);
        }
      }
 else {
        results.add(row);
      }
    }
    return results;
  }
 catch (  SQLException e) {
    LOGGER.error("there was a problem retrieving rows",e);
    throw e;
  }
 finally {
    try {
      if (conn != null) {
        conn.close();
      }
      if (stmt != null) {
        stmt.close();
      }
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException e) {
      LOGGER.error("close exception",e);
    }
  }
}
