{
  final String dataSchedule=schedule;
  File[] higherDataDirs=collectionDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith(StorageUtils.getDataDirPrefix()) && StorageUtils.getSchedule(name).equals(dataSchedule) && StarTreeConstants.Schedule.valueOf(dataSchedule).getLowerSchedule() != null;
    }
  }
);
  for (  File higherDataDir : higherDataDirs) {
    String lowerSchedule=StarTreeConstants.Schedule.valueOf(StorageUtils.getSchedule(higherDataDir.getName())).getLowerSchedule();
    DateTime maxDateTime=StorageUtils.getMaxTime(higherDataDir.getName());
    DateTime startDateTime=StorageUtils.getMinTime(higherDataDir.getName());
    while (startDateTime.compareTo(maxDateTime) < 0) {
      DateTime endDateTime=StarTreeConstants.Schedule.valueOf(lowerSchedule).getEndDateTime(startDateTime);
      final String lowerDir=StorageUtils.getDataDirPrefix(lowerSchedule,startDateTime,endDateTime);
      File[] lowerDataDir=collectionDir.listFiles(new FileFilter(){
        @Override public boolean accept(        File pathname){
          return StorageUtils.isExpirable(pathname,lowerDir);
        }
      }
);
      for (      File expireDataDir : lowerDataDir) {
        LOGGER.info("Deleting segment {}",expireDataDir);
        FileUtils.deleteDirectory(expireDataDir);
      }
      startDateTime=endDateTime;
    }
  }
}
