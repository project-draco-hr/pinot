{
  Lock lock=collectionLocks.get(collection);
  if (lock == null) {
    collectionLocks.putIfAbsent(collection,new ReentrantLock());
    lock=collectionLocks.get(collection);
  }
  lock.lock();
  LOG.info("Locked collection {} using lock {} for data update",collection,lock);
  try {
    File collectionDir=new File(rootDir,collection);
    if (!collectionDir.exists()) {
      FileUtils.forceMkdir(collectionDir);
      LOG.info("Created {}",collectionDir);
    }
    if (schedule.contains("_")) {
      throw new IOException("schedule cannot contain '_'");
    }
    String loadId="load_" + UUID.randomUUID();
    File tmpDir=new File(new File(rootDir,collection),loadId);
    File tmpMetricStore=new File(tmpDir,StarTreeConstants.METRIC_STORE);
    File tmpDimensionStore=new File(tmpDir,StarTreeConstants.DIMENSION_STORE);
    try {
      FileUtils.forceMkdir(tmpDir);
      TarUtils.extractGzippedTarArchive(new ByteArrayInputStream(data),tmpDir,2);
      LOG.info("Extracted data into {}",tmpDir);
      StorageUtils.prefixFilesWithTime(tmpMetricStore,schedule,minTime,maxTime);
      StorageUtils.prefixFilesWithTime(tmpDimensionStore,schedule,minTime,maxTime);
      File tmpTreeFile=new File(tmpDir,StarTreeConstants.TREE_FILE_NAME);
      ObjectInputStream treeStream=new ObjectInputStream(new FileInputStream(tmpTreeFile));
      StarTreeNode rootNode=(StarTreeNode)treeStream.readObject();
      String treeId=rootNode.getId().toString();
      LOG.info("Tree ID for {} is {}",loadId,treeId);
      File dataDir=new File(collectionDir,StorageUtils.getDataDirName(treeId,schedule,minTime,maxTime));
      FileUtils.forceMkdir(dataDir);
      StorageUtils.moveAllFiles(tmpDir,dataDir);
      LOG.info("Moved files from {} to {}",tmpDir,dataDir);
      if (!dataDir.setLastModified(System.currentTimeMillis())) {
        LOG.warn("setLastModified on dataDir failed - watch service will not be triggered!");
      }
    }
  finally {
      FileUtils.forceDelete(tmpDir);
      LOG.info("Deleted tmp dir {}",tmpDir);
    }
  }
  finally {
    lock.unlock();
    LOG.info("Unlocked collection {} using lock {} for data update",collection,lock);
  }
}
