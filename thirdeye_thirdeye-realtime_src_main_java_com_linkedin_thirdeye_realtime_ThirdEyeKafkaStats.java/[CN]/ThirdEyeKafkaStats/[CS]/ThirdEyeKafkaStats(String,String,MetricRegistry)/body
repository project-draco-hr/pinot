{
  this.recordsAdded=metricRegistry.meter(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,RECORDS_ADDED));
  this.recordsError=metricRegistry.meter(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,RECORDS_ERROR));
  this.recordsSkippedInvalid=metricRegistry.meter(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,RECORDS_SKIPPED_INVALID));
  this.recordsSkippedExpired=metricRegistry.meter(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,RECORDS_SKIPPED_EXPIRED));
  this.bytesRead=metricRegistry.meter(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,BYTES_READ));
  metricRegistry.register(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,LAST_PERSIST_TIME_MILLIS),new Gauge<Long>(){
    @Override public Long getValue(){
      return lastPersistTimeMillis.get();
    }
  }
);
  metricRegistry.register(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,LAST_CONSUMED_RECORD_TIME_MILLIS),new Gauge<Long>(){
    @Override public Long getValue(){
      return lastConsumedRecordTimeMillis.get();
    }
  }
);
  metricRegistry.register(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,DATA_TIME_MILLIS),new Gauge<Long>(){
    @Override public Long getValue(){
      return dataTimeMillis.get();
    }
  }
);
  metricRegistry.register(MetricRegistry.name(ThirdEyeKafkaStats.class,collection,topic,DATA_LAG_MILLIS),new Gauge<Long>(){
    @Override public Long getValue(){
      return System.currentTimeMillis() - dataTimeMillis.get();
    }
  }
);
}
