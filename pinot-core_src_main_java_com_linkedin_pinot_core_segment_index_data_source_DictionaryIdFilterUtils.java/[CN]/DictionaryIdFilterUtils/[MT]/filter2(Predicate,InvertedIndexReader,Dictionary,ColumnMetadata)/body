{
  ImmutableRoaringBitmap filteredBitmap=null;
switch (predicate.getType()) {
case EQ:
    final int valueToLookUP=dictionary.indexOf(((EqPredicate)predicate).getEqualsValue());
  if (valueToLookUP < 0) {
    filteredBitmap=new MutableRoaringBitmap();
  }
 else {
    filteredBitmap=invertedIndex.getImmutable(valueToLookUP);
  }
break;
case NEQ:
final int neq=dictionary.indexOf(((NEqPredicate)predicate).getNotEqualsValue());
final MutableRoaringBitmap holderNEQ=new MutableRoaringBitmap();
for (int i=0; i < dictionary.length(); i++) {
if (i != neq) {
holderNEQ.or(invertedIndex.getImmutable(i));
}
}
filteredBitmap=holderNEQ;
break;
case IN:
final String[] inValues=((InPredicate)predicate).getInRange();
final MutableRoaringBitmap inHolder=new MutableRoaringBitmap();
for (final String value : inValues) {
final int index=dictionary.indexOf(value);
if (index >= 0) {
inHolder.or(invertedIndex.getImmutable(index));
}
}
filteredBitmap=inHolder;
break;
case NOT_IN:
final String[] notInValues=((NotInPredicate)predicate).getNotInRange();
final List<Integer> notInIds=new ArrayList<Integer>();
for (final String notInValue : notInValues) {
notInIds.add(new Integer(dictionary.indexOf(notInValue)));
}
final MutableRoaringBitmap notINHolder=new MutableRoaringBitmap();
for (int i=0; i < dictionary.length(); i++) {
if (!notInIds.contains(new Integer(i))) {
notINHolder.or(invertedIndex.getImmutable(i));
}
}
filteredBitmap=notINHolder;
break;
case RANGE:
int[] rangeStartEndIndex=RangePredicateEvaluator.get().evalStartEndIndex(dictionary,(RangePredicate)predicate);
int rangeStartIndex=rangeStartEndIndex[0];
int rangeEndIndex=rangeStartEndIndex[1];
LOG.info("rangeStartIndex:{}, rangeEndIndex:{}",rangeStartIndex,rangeEndIndex);
if (rangeStartIndex > rangeEndIndex) {
filteredBitmap=new MutableRoaringBitmap();
}
final MutableRoaringBitmap rangeBitmapHolder=new MutableRoaringBitmap();
for (int i=rangeStartIndex; i <= rangeEndIndex; i++) {
rangeBitmapHolder.or(invertedIndex.getImmutable(i));
}
filteredBitmap=rangeBitmapHolder;
break;
case REGEX:
throw new UnsupportedOperationException("unsupported type : " + columnMetadata.getDataType().toString() + " for filter type : regex");
}
return filteredBitmap;
}
