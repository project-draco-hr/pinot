{
  List<Integer> ret=new ArrayList<Integer>();
switch (predicate.getType()) {
case EQ:
    final int valueToLookUP=dictionary.indexOf(((EqPredicate)predicate).getEqualsValue());
  if (valueToLookUP >= 0) {
    ret.add(valueToLookUP);
  }
break;
case NEQ:
final int neq=dictionary.indexOf(((NEqPredicate)predicate).getNotEqualsValue());
final MutableRoaringBitmap holderNEQ=new MutableRoaringBitmap();
for (int i=0; i < dictionary.length(); i++) {
if (i != neq) {
ret.add(i);
}
}
break;
case IN:
final String[] inValues=((InPredicate)predicate).getInRange();
final MutableRoaringBitmap inHolder=new MutableRoaringBitmap();
for (final String value : inValues) {
final int index=dictionary.indexOf(value);
if ((index >= 0) && (!ret.contains(index))) {
ret.add(index);
}
}
break;
case NOT_IN:
final String[] notInValues=((NotInPredicate)predicate).getNotInRange();
final List<Integer> notInIds=new ArrayList<Integer>();
for (final String notInValue : notInValues) {
notInIds.add(new Integer(dictionary.indexOf(notInValue)));
}
final MutableRoaringBitmap notINHolder=new MutableRoaringBitmap();
for (int i=0; i < dictionary.length(); i++) {
if (!notInIds.contains(new Integer(i))) {
ret.add(i);
}
}
break;
case RANGE:
int[] rangeStartEndIndex=RangePredicateEvaluator.get().evalStartEndIndex(dictionary,(RangePredicate)predicate);
int rangeStartIndex=rangeStartEndIndex[0];
int rangeEndIndex=rangeStartEndIndex[1];
LOGGER.info("rangeStartIndex:{}, rangeEndIndex:{}",rangeStartIndex,rangeEndIndex);
for (int i=rangeStartIndex; i <= rangeEndIndex; i++) {
ret.add(i);
}
break;
case REGEX:
throw new UnsupportedOperationException("unsupported type : " + predicate.getType() + " : "+ predicate);
}
return ret;
}
