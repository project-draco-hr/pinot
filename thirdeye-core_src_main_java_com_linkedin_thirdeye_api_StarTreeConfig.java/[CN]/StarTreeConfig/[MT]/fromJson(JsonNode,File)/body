{
  String collection=jsonNode.get("collection").asText();
  List<String> dimensionNames=new ArrayList<String>();
  for (  JsonNode dimensionName : jsonNode.get("dimensionNames")) {
    dimensionNames.add(dimensionName.asText());
  }
  List<String> metricNames=new ArrayList<String>();
  for (  JsonNode metricName : jsonNode.get("metricNames")) {
    metricNames.add(metricName.asText());
  }
  String timeColumnName=jsonNode.get("timeColumnName").asText();
  StarTreeConfig.Builder starTreeConfig=new StarTreeConfig.Builder();
  starTreeConfig.setCollection(collection).setDimensionNames(dimensionNames).setMetricNames(metricNames).setTimeColumnName(timeColumnName);
  if (jsonNode.has("thresholdFunctionClass")) {
    starTreeConfig.setThresholdFunctionClass(jsonNode.get("thresholdFunctionClass").asText());
  }
  Properties thresholdFunctionConfig=new Properties();
  if (jsonNode.has("thresholdFunctionConfig")) {
    Iterator<Map.Entry<String,JsonNode>> itr=jsonNode.get("thresholdFunctionConfig").fields();
    while (itr.hasNext()) {
      Map.Entry<String,JsonNode> next=itr.next();
      thresholdFunctionConfig.put(next.getKey(),next.getValue().asText());
    }
    starTreeConfig.setThresholdFunctionConfig(thresholdFunctionConfig);
  }
  if (jsonNode.has("recordStoreFactoryClass")) {
    starTreeConfig.setRecordStoreFactoryClass(jsonNode.get("recordStoreFactoryClass").asText());
  }
  Properties recordStoreConfig=new Properties();
  if (jsonNode.has("recordStoreFactoryConfig")) {
    Iterator<Map.Entry<String,JsonNode>> itr=jsonNode.get("recordStoreFactoryConfig").fields();
    while (itr.hasNext()) {
      Map.Entry<String,JsonNode> next=itr.next();
      recordStoreConfig.put(next.getKey(),next.getValue().asText());
    }
    if (rootDir != null) {
      recordStoreConfig.put("rootDir",new File(new File(rootDir,collection),StarTreeConstants.DATA_DIR_NAME).getAbsolutePath());
    }
  }
  starTreeConfig.setRecordStoreFactoryConfig(recordStoreConfig);
  if (jsonNode.has("maxRecordStoreEntries")) {
    starTreeConfig.setMaxRecordStoreEntries(jsonNode.get("maxRecordStoreEntries").asInt());
  }
  if (jsonNode.has("splitOrder")) {
    List<String> splitOrder=new ArrayList<String>();
    for (    JsonNode dimensionName : jsonNode.get("splitOrder")) {
      splitOrder.add(dimensionName.asText());
    }
    starTreeConfig.setSplitOrder(splitOrder);
  }
  return starTreeConfig.build();
}
