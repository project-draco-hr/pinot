{
  DateTimeZone timeZone=DateTimeZone.forTimeZone(DEFAULT_TIME_ZONE);
  DateFormatMethod dateFormatMethod=new DateFormatMethod(timeZone);
  HtmlEmail email=new HtmlEmail();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try (Writer out=new OutputStreamWriter(baos,CHARSET)){
    Configuration freemarkerConfig=new Configuration(Configuration.VERSION_2_3_21);
    freemarkerConfig.setClassForTemplateLoading(getClass(),"/com/linkedin/thirdeye/detector/");
    freemarkerConfig.setDefaultEncoding(CHARSET);
    freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    Map<String,Object> templateData=new HashMap<>();
    String metric=alertConfig.getMetric();
    String filtersJson=ThirdEyeUtils.convertMultiMapToJson(alertConfig.getFilterSet());
    String filtersJsonEncoded=URLEncoder.encode(filtersJson,"UTF-8");
    String windowUnit=alertConfig.getWindowUnit().toString();
    Set<String> functionTypes=new HashSet<>();
    for (    AnomalyFunctionDTO spec : alertConfig.getFunctions()) {
      functionTypes.add(spec.getType());
    }
    templateData.put("groupedAnomalyResults",groupedResults);
    templateData.put("anomalyCount",results.size());
    templateData.put("startTime",windowStart.getMillis());
    templateData.put("endTime",windowEnd.getMillis());
    templateData.put("reportGenerationTimeMillis",System.currentTimeMillis());
    templateData.put("assignedDimensions",new AssignedDimensionsMethod(dimensionNames));
    templateData.put("dateFormat",dateFormatMethod);
    templateData.put("timeZone",timeZone);
    templateData.put("collection",collectionAlias);
    templateData.put("metric",metric);
    templateData.put("filters",filtersJsonEncoded);
    templateData.put("windowUnit",windowUnit);
    templateData.put("dashboardHost",thirdeyeConfig.getDashboardHost());
    Template template=freemarkerConfig.getTemplate("merged-anomaly-report.ftl");
    template.process(templateData,out);
  }
 catch (  Exception e) {
    throw new JobExecutionException(e);
  }
  try {
    String alertEmailSubject=String.format("Anomaly Alert!: %d anomalies detected for %s:%s",results.size(),collectionAlias,alertConfig.getMetric());
    String alertEmailHtml=new String(baos.toByteArray(),CHARSET);
    EmailHelper.sendEmailWithHtml(email,thirdeyeConfig.getSmtpConfiguration(),alertEmailSubject,alertEmailHtml,alertConfig.getFromAddress(),alertConfig.getToAddresses());
  }
 catch (  Exception e) {
    throw new JobExecutionException(e);
  }
  LOG.info("Sent email with {} anomalies! {}",results.size(),alertConfig);
}
