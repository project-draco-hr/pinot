{
  LOG.info("Starting email report {}",alertConfig.getId());
  ThirdEyeClient client=queryCache.getClient();
  final String collection=alertConfig.getCollection();
  final String collectionAlias=ThirdEyeUtils.getAliasFromCollection(collection);
  final List<AnomalyMergedResult> results=anomalyMergedResultDAO.getAllByTimeEmailIdAndNotifiedFalse(windowStart.getMillis(),windowEnd.getMillis(),alertConfig.getId());
  if (results.isEmpty() && !alertConfig.getSendZeroAnomalyEmail()) {
    LOG.info("Zero anomalies found, skipping sending email");
    return;
  }
  Map<String,List<AnomalyMergedResult>> groupedResults=new TreeMap<>();
  for (  AnomalyMergedResult result : results) {
    String dimensions=result.getDimensions();
    if (!groupedResults.containsKey(dimensions)) {
      groupedResults.put(dimensions,new ArrayList<>());
    }
    groupedResults.get(dimensions).add(result);
  }
  Map<AnomalyMergedResult,String> anomaliesWithLabels=new LinkedHashMap<>();
  int counter=1;
  for (  List<AnomalyMergedResult> resultsByDimensionKey : groupedResults.values()) {
    Collections.sort(resultsByDimensionKey);
    for (    AnomalyMergedResult result : resultsByDimensionKey) {
      anomaliesWithLabels.put(result,String.valueOf(counter));
      counter++;
    }
  }
  List<String> dimensionNames;
  try {
    dimensionNames=client.getCollectionSchema(collection).getDimensionNames();
  }
 catch (  Exception e) {
    throw new JobExecutionException(e);
  }
  sendAlertForAnomalies(collectionAlias,results,groupedResults,dimensionNames);
  updateNotifiedStatus(results);
}
