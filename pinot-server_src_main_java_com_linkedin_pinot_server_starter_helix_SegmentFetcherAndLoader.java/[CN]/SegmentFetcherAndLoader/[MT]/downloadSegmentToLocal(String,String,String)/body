{
  File tempSegmentFile=null;
  File tempFile=null;
  if (uri.startsWith("hdfs:")) {
    throw new UnsupportedOperationException("Not implemented yet");
  }
 else {
    try {
      tempSegmentFile=new File(_dataManager.getSegmentFileDirectory() + "/" + tableName+ "/temp_"+ segmentId+ "_"+ System.currentTimeMillis());
      if (uri.startsWith("http:") || uri.startsWith("https:")) {
        tempFile=new File(_dataManager.getSegmentFileDirectory(),segmentId + ".tar.gz");
        final long httpGetResponseContentLength=FileUploadUtils.getFile(uri,tempFile);
        LOGGER.info("Downloaded file from " + uri + " to "+ tempFile+ "; Http GET response content length: "+ httpGetResponseContentLength+ ", Length of downloaded file : "+ tempFile.length());
        LOGGER.info("Trying to uncompress segment tar file from " + tempFile + " to "+ tempSegmentFile);
        TarGzCompressionUtils.unTar(tempFile,tempSegmentFile);
        FileUtils.deleteQuietly(tempFile);
      }
 else {
        TarGzCompressionUtils.unTar(new File(uri),tempSegmentFile);
      }
      final File segmentDir=new File(new File(_dataManager.getSegmentDataDirectory(),tableName),segmentId);
      Thread.sleep(1000);
      if (segmentDir.exists()) {
        LOGGER.info("Deleting the directory and recreating it again- " + segmentDir.getAbsolutePath());
        FileUtils.deleteDirectory(segmentDir);
      }
      LOGGER.info("Move the dir - " + tempSegmentFile.listFiles()[0] + " to "+ segmentDir.getAbsolutePath()+ ". The segment id is - "+ segmentId);
      FileUtils.moveDirectory(tempSegmentFile.listFiles()[0],segmentDir);
      FileUtils.deleteDirectory(tempSegmentFile);
      Thread.sleep(1000);
      LOGGER.info("Was able to succesfully rename the dir to match the segmentId - " + segmentId);
      new File(segmentDir,"finishedLoading").createNewFile();
      return segmentDir.getAbsolutePath();
    }
 catch (    Exception e) {
      FileUtils.deleteQuietly(tempSegmentFile);
      FileUtils.deleteQuietly(tempFile);
      LOGGER.error("Caught exception",e);
      Utils.rethrowException(e);
      throw new AssertionError("Should not reach this");
    }
  }
}
