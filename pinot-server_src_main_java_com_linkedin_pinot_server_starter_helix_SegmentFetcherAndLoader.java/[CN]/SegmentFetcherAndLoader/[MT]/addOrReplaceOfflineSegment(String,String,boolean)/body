{
  OfflineSegmentZKMetadata offlineSegmentZKMetadata=ZKMetadataProvider.getOfflineSegmentZKMetadata(_propertyStore,tableName,segmentId);
  LOGGER.info("Adding or replacing segment {} for table {}, metadata {}",segmentId,tableName,offlineSegmentZKMetadata);
  try {
    SegmentMetadata segmentMetadataForCheck=new SegmentMetadataImpl(offlineSegmentZKMetadata);
    SegmentMetadata localSegmentMetadata=_dataManager.getSegmentMetadata(tableName,segmentId);
    if (localSegmentMetadata == null) {
      LOGGER.info("Segment {} of table {} is not loaded in memory, checking disk",segmentId,tableName);
      final String localSegmentDir=getSegmentLocalDirectory(tableName,segmentId);
      if (new File(localSegmentDir).exists()) {
        LOGGER.info("Segment {} of table {} found on disk, attempting to load it",segmentId,tableName);
        try {
          localSegmentMetadata=_metadataLoader.loadIndexSegmentMetadataFromDir(localSegmentDir);
          LOGGER.info("Found segment {} of table {} with crc {} on disk",segmentId,tableName,localSegmentMetadata.getCrc());
        }
 catch (        Exception e) {
          LOGGER.error("Failed to load segment metadata from {}. Deleting it.",localSegmentDir,e);
          FileUtils.deleteQuietly(new File(localSegmentDir));
          localSegmentMetadata=null;
        }
        try {
          if (!isNewSegmentMetadata(localSegmentMetadata,segmentMetadataForCheck,segmentId,tableName)) {
            LOGGER.info("Segment metadata same as before, loading {} of table {} (crc {}) from disk",segmentId,tableName,localSegmentMetadata.getCrc());
            AbstractTableConfig tableConfig=ZKMetadataProvider.getOfflineTableConfig(_propertyStore,tableName);
            _dataManager.addSegment(localSegmentMetadata,tableConfig);
            return;
          }
        }
 catch (        Exception e) {
          LOGGER.error("Failed to load {} of table {} from local, will try to reload it from controller!",segmentId,tableName,e);
          FileUtils.deleteQuietly(new File(localSegmentDir));
          localSegmentMetadata=null;
        }
      }
    }
    if (isNewSegmentMetadata(localSegmentMetadata,segmentMetadataForCheck,segmentId,tableName)) {
      if (localSegmentMetadata == null) {
        LOGGER.info("Loading new segment {} of table {} from controller",segmentId,tableName);
      }
 else {
        LOGGER.info("Trying to refresh segment {} of table {} with new data.",segmentId,tableName);
      }
      int retryCount;
      int maxRetryCount=1;
      if (retryOnFailure) {
        maxRetryCount=_segmentLoadMaxRetryCount;
      }
      for (retryCount=0; retryCount < maxRetryCount; ++retryCount) {
        long attemptStartTime=System.currentTimeMillis();
        try {
          AbstractTableConfig tableConfig=ZKMetadataProvider.getOfflineTableConfig(_propertyStore,tableName);
          final String uri=offlineSegmentZKMetadata.getDownloadUrl();
          final String localSegmentDir=downloadSegmentToLocal(uri,tableName,segmentId);
          final SegmentMetadata segmentMetadata=_metadataLoader.loadIndexSegmentMetadataFromDir(localSegmentDir);
          _dataManager.addSegment(segmentMetadata,tableConfig);
          LOGGER.info("Downloaded segment {} of table {} crc {} from controller",segmentId,tableName,segmentMetadata.getCrc());
          break;
        }
 catch (        Exception e) {
          long attemptDurationMillis=System.currentTimeMillis() - attemptStartTime;
          LOGGER.warn("Caught exception while loading segment " + segmentId + "(table "+ tableName+ "), attempt "+ (retryCount + 1)+ " of "+ maxRetryCount,e);
          if (retryCount < maxRetryCount - 1) {
            double maxRetryDurationMultiplier=Math.pow(2.0,(retryCount + 1));
            double retryDurationMultiplier=Math.random() * maxRetryDurationMultiplier + 1.0;
            long waitTime=(long)((_segmentLoadMinRetryDelayMs + attemptDurationMillis) * retryDurationMultiplier);
            LOGGER.warn("Waiting for " + TimeUnit.MILLISECONDS.toSeconds(waitTime) + " seconds to retry("+ segmentId+ " of table "+ tableName);
            long waitEndTime=System.currentTimeMillis() + waitTime;
            while (System.currentTimeMillis() < waitEndTime) {
              try {
                Thread.sleep(Math.max(System.currentTimeMillis() - waitEndTime,1L));
              }
 catch (              InterruptedException ie) {
              }
            }
          }
        }
      }
      if (_segmentLoadMaxRetryCount <= retryCount) {
        String msg="Failed to download segment " + segmentId + " (table "+ tableName+ " after "+ retryCount+ " retries";
        LOGGER.error(msg);
        throw new RuntimeException(msg);
      }
    }
 else {
      LOGGER.info("Got already loaded segment {} of table {} crc {} again, will do nothing.",segmentId,tableName,localSegmentMetadata.getCrc());
    }
  }
 catch (  final Exception e) {
    LOGGER.error("Cannot load segment : " + segmentId + " for table "+ tableName,e);
    Utils.rethrowException(e);
    throw new AssertionError("Should not reach this");
  }
}
