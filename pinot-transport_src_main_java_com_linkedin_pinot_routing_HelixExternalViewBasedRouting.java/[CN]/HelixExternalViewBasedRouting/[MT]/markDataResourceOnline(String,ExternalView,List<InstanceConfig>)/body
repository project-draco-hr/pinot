{
  if (externalView == null) {
    return;
  }
  int externalViewRecordVersion=externalView.getRecord().getVersion();
  if (_routingTableLastKnownZkVersionMap.containsKey(tableName)) {
    long lastKnownZkVersion=_routingTableLastKnownZkVersionMap.get(tableName);
    if (externalViewRecordVersion == lastKnownZkVersion) {
      LOGGER.info("No change on routing table version (current version {}, last known version {}), do nothing for table {}",externalViewRecordVersion,lastKnownZkVersion,tableName);
      return;
    }
    LOGGER.info("Updating routing table for table {} due to ZK change (current version {}, last known version {})",tableName,externalViewRecordVersion,lastKnownZkVersion);
  }
  _routingTableLastKnownZkVersionMap.put(tableName,externalViewRecordVersion);
  if (!_dataTableSet.contains(tableName)) {
    LOGGER.info("Adding a new data table to broker : " + tableName);
    _dataTableSet.add(tableName);
  }
  RoutingTableBuilder routingTableBuilder;
  TableType tableType=TableNameBuilder.getTableTypeFromTableName(tableName);
  if (tableType != null) {
switch (tableType) {
case REALTIME:
      routingTableBuilder=_defaultRealtimeRoutingTableBuilder;
    break;
case OFFLINE:
  routingTableBuilder=_defaultOfflineRoutingTableBuilder;
break;
default :
routingTableBuilder=_defaultOfflineRoutingTableBuilder;
break;
}
}
 else {
routingTableBuilder=_defaultOfflineRoutingTableBuilder;
}
if (_routingTableBuilderMap.containsKey(tableName) && (_routingTableBuilderMap.get(tableName) != null)) {
routingTableBuilder=_routingTableBuilderMap.get(tableName);
}
LOGGER.info("Trying to compute routing table for table : " + tableName + ",by : "+ routingTableBuilder);
try {
List<ServerToSegmentSetMap> serverToSegmentSetMap=routingTableBuilder.computeRoutingTableFromExternalView(tableName,externalView,instanceConfigList);
_brokerRoutingTable.put(tableName,serverToSegmentSetMap);
}
 catch (Exception e) {
LOGGER.error("Failed to compute/update the routing table" + e.getCause(),e);
}
try {
LOGGER.info("Trying to compute time boundary service for table : " + tableName);
_timeBoundaryService.updateTimeBoundaryService(externalView);
}
 catch (Exception e) {
LOGGER.error("Failed to update the TimeBoundaryService : " + e.getCause(),e);
}
}
