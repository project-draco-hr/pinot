{
  if (externalView == null) {
    return;
  }
  int externalViewRecordVersion=externalView.getRecord().getVersion();
  if (_routingTableLastKnownZkVersionMap.containsKey(tableName)) {
    long lastKnownZkVersion=_routingTableLastKnownZkVersionMap.get(tableName);
    if (externalViewRecordVersion == lastKnownZkVersion) {
      LOGGER.info("No change on routing table version (current version {}, last known version {}), do nothing for table {}",externalViewRecordVersion,lastKnownZkVersion,tableName);
      return;
    }
    LOGGER.info("Updating routing table for table {} due to ZK change (current version {}, last known version {})",tableName,externalViewRecordVersion,lastKnownZkVersion);
  }
  _routingTableLastKnownZkVersionMap.put(tableName,externalViewRecordVersion);
  RoutingTableBuilder routingTableBuilder;
  CommonConstants.Helix.TableType tableType=TableNameBuilder.getTableTypeFromTableName(tableName);
  if (CommonConstants.Helix.TableType.REALTIME.equals(tableType)) {
    routingTableBuilder=_realtimeHLCRoutingTableBuilder;
  }
 else {
    routingTableBuilder=_offlineRoutingTableBuilder;
  }
  LOGGER.info("Trying to compute routing table for table {} using {}",tableName,routingTableBuilder);
  try {
    List<ServerToSegmentSetMap> serverToSegmentSetMap=routingTableBuilder.computeRoutingTableFromExternalView(tableName,externalView,instanceConfigList);
    _brokerRoutingTable.put(tableName,serverToSegmentSetMap);
    if (CommonConstants.Helix.TableType.REALTIME.equals(tableType)) {
      try {
        List<ServerToSegmentSetMap> llcserverToSegmentSetMap=_realtimeLLCRoutingTableBuilder.computeRoutingTableFromExternalView(tableName,externalView,instanceConfigList);
        _llcBrokerRoutingTable.put(tableName,llcserverToSegmentSetMap);
      }
 catch (      Exception e) {
        LOGGER.error("Failed to compute LLC routing table for {}. Ignoring",tableName,e);
      }
    }
  }
 catch (  Exception e) {
    LOGGER.error("Failed to compute/update the routing table",e);
  }
  try {
    LOGGER.info("Trying to compute time boundary service for table {}",tableName);
    _timeBoundaryService.updateTimeBoundaryService(externalView);
  }
 catch (  Exception e) {
    LOGGER.error("Failed to update the TimeBoundaryService",e);
  }
}
