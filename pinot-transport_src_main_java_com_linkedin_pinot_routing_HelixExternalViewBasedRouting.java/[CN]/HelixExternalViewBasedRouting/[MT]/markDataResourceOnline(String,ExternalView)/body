{
  if (externalView == null) {
    return;
  }
  if (_routingTableModifiedTimeStampMap.containsKey(tableName)) {
    long recentModifiedTimeStamp=_routingTableModifiedTimeStampMap.get(tableName);
    LOGGER.info("ExternalView modified timestamp for table: " + tableName + " is "+ externalView.getRecord().getModifiedTime());
    LOGGER.info("Recent updated timestamp for for table: " + tableName + " is "+ recentModifiedTimeStamp);
    if (externalView.getRecord().getModifiedTime() <= recentModifiedTimeStamp) {
      LOGGER.info("No change on routing table version, do nothing for table: " + tableName);
      return;
    }
  }
  _routingTableModifiedTimeStampMap.put(tableName,externalView.getRecord().getModifiedTime());
  if (!_dataTableSet.contains(tableName)) {
    LOGGER.info("Adding a new data table to broker : " + tableName);
    _dataTableSet.add(tableName);
  }
  RoutingTableBuilder routingTableBuilder=null;
  TableType tableType=TableNameBuilder.getTableTypeFromTableName(tableName);
  if (tableType != null) {
switch (tableType) {
case REALTIME:
      routingTableBuilder=_defaultRealtimeRoutingTableBuilder;
    break;
case OFFLINE:
  routingTableBuilder=_defaultOfflineRoutingTableBuilder;
break;
default :
routingTableBuilder=_defaultOfflineRoutingTableBuilder;
break;
}
}
 else {
routingTableBuilder=_defaultOfflineRoutingTableBuilder;
}
if (_routingTableBuilderMap.containsKey(tableName) && (_routingTableBuilderMap.get(tableName) != null)) {
routingTableBuilder=_routingTableBuilderMap.get(tableName);
}
LOGGER.info("Trying to compute routing table for table : " + tableName + ",by : "+ routingTableBuilder);
try {
List<ServerToSegmentSetMap> serverToSegmentSetMap=routingTableBuilder.computeRoutingTableFromExternalView(tableName,externalView);
_brokerRoutingTable.put(tableName,serverToSegmentSetMap);
}
 catch (Exception e) {
LOGGER.error("Failed to compute/update the routing table" + e.getCause());
}
try {
LOGGER.info("Trying to compute time boundary service for table : " + tableName);
_timeBoundaryService.updateTimeBoundaryService(externalView);
}
 catch (Exception e) {
LOGGER.error("Failed to update the TimeBoundaryService : " + e.getCause());
}
}
