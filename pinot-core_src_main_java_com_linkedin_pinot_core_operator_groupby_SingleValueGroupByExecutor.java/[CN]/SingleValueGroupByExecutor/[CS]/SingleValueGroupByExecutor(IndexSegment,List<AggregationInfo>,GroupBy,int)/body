{
  Preconditions.checkNotNull(indexSegment);
  Preconditions.checkArgument((aggregationsInfoList != null) && (aggregationsInfoList.size() > 0));
  Preconditions.checkNotNull(groupBy);
  Preconditions.checkArgument(maxNumGroupKeys > 0);
  List<String> groupByColumns=groupBy.getColumns();
  _groupByColumns=groupByColumns.toArray(new String[groupByColumns.size()]);
  _aggrFuncContextList=new ArrayList<AggregationFunctionContext>(aggregationsInfoList.size());
  _columnToDictArrayMap=new HashMap<String,int[]>();
  _columnToValueArrayMap=new HashMap<String,double[]>();
  for (  AggregationInfo aggregationInfo : aggregationsInfoList) {
    String[] columns=aggregationInfo.getAggregationParams().get("column").trim().split(",");
    for (    String column : columns) {
      if (!_columnToDictArrayMap.containsKey(column)) {
        _columnToDictArrayMap.put(column,new int[DocIdSetPlanNode.MAX_DOC_PER_CALL]);
        _columnToValueArrayMap.put(column,new double[DocIdSetPlanNode.MAX_DOC_PER_CALL]);
      }
    }
    AggregationFunctionContext aggregationFunctionContext=new AggregationFunctionContext(indexSegment,aggregationInfo.getAggregationType(),columns);
    _aggrFuncContextList.add(aggregationFunctionContext);
  }
  int resultHolderSize=Math.min(maxNumGroupKeys,ResultHolderFactory.MAX_NUM_GROUP_KEYS_FOR_ARRAY_BASED);
  _groupKeyGenerator=new SingleValueGroupKeyGenerator(indexSegment,_groupByColumns,resultHolderSize);
  _resultHolderArray=new ResultHolder[_aggrFuncContextList.size()];
  for (int i=0; i < _aggrFuncContextList.size(); i++) {
    AggregationFunctionContext aggregationFunctionContext=_aggrFuncContextList.get(i);
    String functionName=aggregationFunctionContext.getFunctionName();
    double defaultValue=aggregationFunctionContext.getAggregationFunction().getDefaultValue();
    _resultHolderArray[i]=ResultHolderFactory.getResultHolder(functionName,maxNumGroupKeys,defaultValue);
  }
  _docIdToGroupKey=new int[DocIdSetPlanNode.MAX_DOC_PER_CALL];
}
