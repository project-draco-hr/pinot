{
  final String pql=request.getString("pql");
  final long requestId=requestIdGenerator.incrementAndGet();
  LOGGER.info("Query string for requestId {}: {}",requestId,pql);
  boolean isTraceEnabled=false;
  if (request.has("trace")) {
    try {
      isTraceEnabled=Boolean.parseBoolean(request.getString("trace"));
      LOGGER.info("Trace is set to: {}",isTraceEnabled);
    }
 catch (    Exception e) {
      LOGGER.warn("Invalid trace value: {}",request.getString("trace"),e);
    }
  }
 else {
  }
  final long startTime=System.nanoTime();
  final BrokerRequest brokerRequest;
  try {
    brokerRequest=REQUEST_COMPILER.compileToBrokerRequest(pql);
    if (isTraceEnabled)     brokerRequest.setEnableTrace(true);
  }
 catch (  Exception e) {
    BrokerResponse brokerResponse=new BrokerResponse();
    brokerResponse.setExceptions(Arrays.asList(QueryException.getException(QueryException.PQL_PARSING_ERROR,e)));
    brokerMetrics.addMeteredValue(null,BrokerMeter.REQUEST_COMPILATION_EXCEPTIONS,1);
    return brokerResponse;
  }
  brokerMetrics.addMeteredValue(brokerRequest,BrokerMeter.QUERIES,1);
  final long requestCompilationTime=System.nanoTime() - startTime;
  brokerMetrics.addPhaseTiming(brokerRequest,BrokerQueryPhase.REQUEST_COMPILATION,requestCompilationTime);
  final ScatterGatherStats scatterGatherStats=new ScatterGatherStats();
  final BrokerResponse resp=brokerMetrics.timePhase(brokerRequest,BrokerQueryPhase.QUERY_EXECUTION,new Callable<BrokerResponse>(){
    @Override public BrokerResponse call() throws Exception {
      final BucketingSelection bucketingSelection=getBucketingSelection(brokerRequest);
      return (BrokerResponse)broker.processBrokerRequest(brokerRequest,bucketingSelection,scatterGatherStats,requestId);
    }
  }
);
  LOGGER.info("Broker Response : {}",resp);
  LOGGER.info("ResponseTimes for {} {}",requestId,scatterGatherStats);
  return resp;
}
