{
  final int numReplicas=3;
  String OfflineTableConfigJson=ControllerRequestBuilderUtil.buildCreateOfflineTableJSON(TABLE_NAME_BALANCED,null,null,numReplicas,"BalanceNumSegmentAssignmentStrategy").toString();
  AbstractTableConfig offlineTableConfig=AbstractTableConfig.init(OfflineTableConfigJson);
  _pinotHelixResourceManager.addTable(offlineTableConfig);
  Thread.sleep(3000);
  for (int i=0; i < 100; ++i) {
    addOneSegment(TABLE_NAME_BALANCED);
    Thread.sleep(2000);
    final Set<String> taggedInstances=_pinotHelixResourceManager.getAllInstancesForServerTenant("DefaultTenant_OFFLINE");
    final Map<String,Integer> instance2NumSegmentsMap=new HashMap<String,Integer>();
    for (    final String instance : taggedInstances) {
      instance2NumSegmentsMap.put(instance,0);
    }
    final ExternalView externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(TABLE_NAME_BALANCED));
    for (    final String segmentId : externalView.getPartitionSet()) {
      for (      final String instance : externalView.getStateMap(segmentId).keySet()) {
        instance2NumSegmentsMap.put(instance,instance2NumSegmentsMap.get(instance) + 1);
      }
    }
    final int totalSegments=(i + 1) * numReplicas;
    final int minNumSegmentsPerInstance=totalSegments / _numServerInstance;
    int maxNumSegmentsPerInstance=minNumSegmentsPerInstance;
    if ((minNumSegmentsPerInstance * _numServerInstance) < totalSegments) {
      maxNumSegmentsPerInstance=maxNumSegmentsPerInstance + 1;
    }
    for (    final String instance : instance2NumSegmentsMap.keySet()) {
      Assert.assertTrue(instance2NumSegmentsMap.get(instance) >= minNumSegmentsPerInstance);
      Assert.assertTrue(instance2NumSegmentsMap.get(instance) <= maxNumSegmentsPerInstance);
    }
  }
  _helixAdmin.dropResource(HELIX_CLUSTER_NAME,TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(TABLE_NAME_BALANCED));
}
