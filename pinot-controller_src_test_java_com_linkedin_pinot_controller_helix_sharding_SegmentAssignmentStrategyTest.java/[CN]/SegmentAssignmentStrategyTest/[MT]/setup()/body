{
  _zookeeperInstance=ZkStarter.startLocalZkServer();
  _zkClient=new ZkClient(ZK_SERVER);
  final String zkPath="/" + HELIX_CLUSTER_NAME;
  if (_zkClient.exists(zkPath)) {
    _zkClient.deleteRecursive(zkPath);
  }
  final String instanceId="localhost_helixController";
  _pinotHelixResourceManager=new PinotHelixResourceManager(ZK_SERVER,HELIX_CLUSTER_NAME,instanceId,null,10000L,true);
  _pinotHelixResourceManager.start();
  final String helixZkURL=HelixConfig.getAbsoluteZkPathForHelix(ZK_SERVER);
  _helixZkManager=HelixSetupUtils.setup(HELIX_CLUSTER_NAME,helixZkURL,instanceId);
  _helixAdmin=_helixZkManager.getClusterManagmentTool();
  ControllerRequestBuilderUtil.addFakeDataInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_SERVER,_numServerInstance,true);
  ControllerRequestBuilderUtil.addFakeBrokerInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_SERVER,_numBrokerInstance,true);
  Thread.sleep(3000);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_OFFLINE").size(),_numServerInstance);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_REALTIME").size(),_numServerInstance);
  Assert.assertEquals(_helixAdmin.getInstancesInClusterWithTag(HELIX_CLUSTER_NAME,"DefaultTenant_BROKER").size(),_numBrokerInstance);
}
