{
  final int numReplicas=2;
  String serverTenantName="randomServerTenant";
  Tenant serverTenant=new TenantBuilder(serverTenantName).setRole(TenantRole.SERVER).setTotalInstances(20).setOfflineInstances(20).setRealtimeInstances(0).build();
  _pinotHelixResourceManager.createServerTenant(serverTenant);
  String OfflineTableConfigJson=ControllerRequestBuilderUtil.buildCreateOfflineTableJSON(TABLE_NAME_RANDOM,serverTenantName,BROKER_TENANT_NAME,numReplicas,"RandomAssignmentStrategy").toString();
  AbstractTableConfig offlineTableConfig=AbstractTableConfig.init(OfflineTableConfigJson);
  _pinotHelixResourceManager.addTable(offlineTableConfig);
  Thread.sleep(3000);
  for (int i=0; i < 10; ++i) {
    addOneSegment(TABLE_NAME_RANDOM);
    Thread.sleep(2000);
    final Set<String> taggedInstances=_pinotHelixResourceManager.getAllInstancesForServerTenant(serverTenantName);
    final Map<String,Integer> instance2NumSegmentsMap=new HashMap<String,Integer>();
    for (    final String instance : taggedInstances) {
      instance2NumSegmentsMap.put(instance,0);
    }
    final ExternalView externalView=_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(TABLE_NAME_RANDOM));
    Assert.assertEquals(externalView.getPartitionSet().size(),i + 1);
    for (    final String segmentId : externalView.getPartitionSet()) {
      Assert.assertEquals(externalView.getStateMap(segmentId).size(),numReplicas);
    }
  }
}
