{
  Map<String,MetricTimeSeries> result=new HashMap<String,MetricTimeSeries>();
  for (  final StarTree starTree : starTrees) {
    StarTreeQuery baseQuery=UriUtils.createQueryBuilder(starTree,uriInfo).setTimeRange(timeRange).build(config);
    int dimensionIndex=-1;
    for (int i=0; i < config.getDimensions().size(); i++) {
      if (config.getDimensions().get(i).getName().equals(dimensionName)) {
        baseQuery.getDimensionKey().getDimensionValues()[i]=StarTreeConstants.ALL;
        dimensionIndex=i;
        break;
      }
    }
    if (dimensionIndex < 0) {
      throw new NotFoundException("No dimension " + dimensionName);
    }
    List<StarTreeQuery> queries=StarTreeUtils.expandQueries(starTree,baseQuery);
    queries=StarTreeUtils.filterQueries(config,queries,uriInfo.getQueryParameters());
    Map<StarTreeQuery,Future<MetricTimeSeries>> futures=new HashMap<StarTreeQuery,Future<MetricTimeSeries>>(queries.size());
    for (    final StarTreeQuery query : queries) {
      futures.put(query,parallelQueryExecutor.submit(new Callable<MetricTimeSeries>(){
        @Override public MetricTimeSeries call() throws Exception {
          return starTree.getTimeSeries(query);
        }
      }
));
    }
    for (    Map.Entry<StarTreeQuery,Future<MetricTimeSeries>> entry : futures.entrySet()) {
      String dimensionValue=entry.getKey().getDimensionKey().getDimensionValues()[dimensionIndex];
      MetricTimeSeries existingTimeSeries=result.get(dimensionValue);
      if (existingTimeSeries == null) {
        result.put(dimensionValue,entry.getValue().get());
      }
 else {
        existingTimeSeries.aggregate(entry.getValue().get());
      }
    }
  }
  return result;
}
