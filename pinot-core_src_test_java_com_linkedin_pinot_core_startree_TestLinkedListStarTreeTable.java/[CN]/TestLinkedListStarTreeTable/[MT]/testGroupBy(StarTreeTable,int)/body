{
  Map<Integer,Integer> rawCounts=new HashMap<Integer,Integer>();
  Map<Integer,Set<List<Integer>>> uniqueCombinations=new HashMap<Integer,Set<List<Integer>>>();
  for (  List<Integer> combination : generateCombinations()) {
    Integer value=combination.get(groupByDimension);
    table.append(new StarTreeTableRow(combination,metrics));
    Set<List<Integer>> combinationSet=uniqueCombinations.get(value);
    if (combinationSet == null) {
      combinationSet=new HashSet<List<Integer>>();
      uniqueCombinations.put(value,combinationSet);
    }
    combinationSet.add(combination);
    Integer count=rawCounts.get(value);
    if (count == null) {
      count=0;
    }
    rawCounts.put(value,count + 1);
  }
  StarTreeTableGroupByStats result=table.groupBy(groupByDimension);
  Assert.assertEquals(result.getValues(),rawCounts.keySet());
  for (  Map.Entry<Integer,Integer> entry : rawCounts.entrySet()) {
    Integer value=entry.getKey();
    Integer rawCount=entry.getValue();
    Integer uniqueCount=uniqueCombinations.get(value).size();
    Assert.assertEquals(result.getRawCount(value),rawCount);
    Assert.assertEquals(result.getUniqueCount(value),uniqueCount);
  }
}
