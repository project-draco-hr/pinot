{
  LOG.info("START: serializing star tree and the leaf record dimension store");
  String localOutputDir="./star-tree-" + collectionName;
  LinkedList<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
  starTree.close();
  StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTree.getRoot());
  int prevLeafNodes;
  do {
    prevLeafNodes=leafNodes.size();
    LOG.info("Number of leaf Nodes" + prevLeafNodes);
    for (    StarTreeNode node : leafNodes) {
      String[] values=new String[starTreeConfig.getDimensions().size()];
      for (int i=0; i < starTreeConfig.getDimensions().size(); i++) {
        String dimensionName=starTreeConfig.getDimensions().get(i).getName();
        if (node.getAncestorDimensionValues().containsKey(dimensionName)) {
          values[i]=node.getAncestorDimensionValues().get(dimensionName);
        }
 else         if (node.getDimensionName().equals(dimensionName)) {
          values[i]=node.getDimensionValue();
        }
 else {
          values[i]=StarTreeConstants.OTHER;
        }
      }
      StarTreeRecord record=new StarTreeRecordImpl(starTreeConfig,new DimensionKey(values),emptyTimeSeries);
      starTree.add(record);
    }
    leafNodes.clear();
    StarTreeUtils.traverseAndGetLeafNodes(leafNodes,starTree.getRoot());
    LOG.info("Number of leaf Nodes" + prevLeafNodes);
  }
 while (prevLeafNodes != leafNodes.size());
  starTree.close();
  FileSystem dfs=FileSystem.get(context.getConfiguration());
  Path src, dst;
  StarTreePersistanceUtil.saveTree(starTree,localOutputDir);
  String treeOutputFileName=collectionName + "-tree.bin";
  src=FileSystem.getLocal(new Configuration()).makeQualified(new Path(localOutputDir + "/" + treeOutputFileName));
  dst=dfs.makeQualified(new Path(hdfsOutputPath,treeOutputFileName));
  LOG.info("Copying " + src + " to "+ dst);
  dfs.copyFromLocalFile(src,dst);
  String leafDataOutputDir=localOutputDir + "/" + "data";
  new File(leafDataOutputDir).mkdirs();
  StarTreePersistanceUtil.saveLeafDimensionData(starTree,leafDataOutputDir);
  LOG.info("END: serializing the leaf record dimension store");
  String leafDataTarGz=localOutputDir + "/leaf-data.tar.gz";
  LOG.info("Generating " + leafDataTarGz + " from "+ leafDataOutputDir);
  TarGzCompressionUtils.createTarGzOfDirectory(leafDataOutputDir,leafDataTarGz);
  src=FileSystem.getLocal(new Configuration()).makeQualified(new Path(leafDataTarGz));
  dst=dfs.makeQualified(new Path(hdfsOutputPath,"leaf-data.tar.gz"));
  LOG.info("Copying " + src + " to "+ dst);
  dfs.copyFromLocalFile(src,dst);
}
