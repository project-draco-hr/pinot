{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(StarTreeGenerationJob.class);
  job.setMapperClass(StarTreeGenerationMapper.class);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setMapOutputKeyClass(NullWritable.class);
  job.setMapOutputValueClass(NullWritable.class);
  job.setOutputFormatClass(NullOutputFormat.class);
  job.setNumReduceTasks(0);
  Configuration configuration=job.getConfiguration();
  FileSystem fs=FileSystem.get(configuration);
  String inputPathDir=getAndSetConfiguration(configuration,StarTreeGenerationConstants.STAR_TREE_GEN_INPUT_PATH);
  getAndSetConfiguration(configuration,StarTreeGenerationConstants.STAR_TREE_GEN_CONFIG_PATH);
  Path outputPath=new Path(getAndSetConfiguration(configuration,StarTreeGenerationConstants.STAR_TREE_GEN_OUTPUT_PATH));
  LOGGER.info("Running star tree generation job");
  LOGGER.info("Input path dir: " + inputPathDir);
  for (  String inputPath : inputPathDir.split(",")) {
    LOGGER.info("Adding input:" + inputPath);
    Path input=new Path(inputPath);
    FileInputFormat.addInputPath(job,input);
  }
  if (fs.exists(outputPath)) {
    fs.delete(outputPath,true);
  }
  FileOutputFormat.setOutputPath(job,outputPath);
  job.waitForCompletion(true);
  LOGGER.info("Finished running star tree generation job");
  Counters counters=job.getCounters();
  for (  Enum e : StarTreeGenerationCounters.values()) {
    Counter counter=counters.findCounter(e);
    LOGGER.info(counter.getDisplayName() + " : " + counter.getValue());
  }
  return job;
}
