{
  CollectionSchema schema=new CollectionSchema();
  HttpGet httpUriRequest=new HttpGet(URI.create(uri));
  HttpResponse response=httpClient.execute(httpUriRequest);
  try {
    JsonNode json=objectMapper.readTree(response.getEntity().getContent());
    List<String> dimensions=new ArrayList<>();
    List<String> dimensionAliases=new ArrayList<>();
    for (    JsonNode dimension : json.get("dimensions")) {
      dimensions.add(dimension.get("name").asText());
      dimensionAliases.add(dimension.get("alias").isNull() ? null : dimension.get("alias").asText());
    }
    schema.setDimensions(dimensions);
    schema.setDimensionAliases(dimensionAliases);
    List<String> metrics=new ArrayList<>();
    List<String> metricAliases=new ArrayList<>();
    for (    JsonNode metric : json.get("metrics")) {
      metrics.add(metric.get("name").asText());
      metricAliases.add(metric.get("alias").isNull() ? null : metric.get("alias").asText());
    }
    schema.setMetrics(metrics);
    schema.setMetricAliases(metricAliases);
  }
  finally {
    EntityUtils.consume(response.getEntity());
  }
  LOGGER.info("Cached schema for {}: {}",uri,schema);
  return schema;
}
