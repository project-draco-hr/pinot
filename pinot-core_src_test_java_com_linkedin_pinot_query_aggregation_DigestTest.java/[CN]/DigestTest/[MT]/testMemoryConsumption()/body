{
  int numOfItems=1000000;
  for (  Byte percentile : functionMap.keySet()) {
    LOGGER.info("[Test Percentile " + percentile + "]");
    println("#items_inserted, QuantileDigest_ser_size, DoubleArrayList_ser_size, ser_size_ratio, estimate, precise, error");
    for (int i=0; i < numOfItems; i+=numOfItems / 17) {
      if (i == 0) {
        continue;
      }
      RandomNumberArray arr=new RandomNumberArray(i,DUPLICATION_PER_ITEM);
      QuantileDigest digest=new QuantileDigest(maxError);
      DoubleArrayList list=new DoubleArrayList();
      arr.offerAllNumberTo(digest);
      arr.offerAllNumberTo(list);
      int digestSize=getSerializedSize(digest);
      int listSize=getSerializedSize(list);
      long estimate=digest.getQuantile(((double)percentile) / 100);
      long actual=(long)PercentileUtil.getValueOnPercentile(list,percentile);
      println(i + ", " + digestSize+ ", "+ listSize+ ", "+ (digestSize + 0.0) / (listSize + 0.0) + ", " + estimate + ", " + actual + ", " + getErrorString(actual,estimate));
    }
  }
}
