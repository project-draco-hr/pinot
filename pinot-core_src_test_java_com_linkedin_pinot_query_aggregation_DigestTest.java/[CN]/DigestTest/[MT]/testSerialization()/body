{
  int numOfItems=10000;
  for (  Byte percentile : functionMap.keySet()) {
    LOGGER.info("[Test Percentile " + percentile + "]");
    for (int i=0; i < numOfItems; i+=numOfItems / 17) {
      if (i == 0) {
        continue;
      }
      RandomNumberArray arr=new RandomNumberArray(i,DUPLICATION_PER_ITEM);
      QuantileDigest digest=new QuantileDigest(maxError);
      DoubleArrayList list=new DoubleArrayList();
      arr.offerAllNumberTo(digest);
      arr.offerAllNumberTo(list);
      byte[] bytes=serialize(digest);
      QuantileDigest digest2=deserialize(bytes);
      long estimate=digest.getQuantile((percentile + 0.0) / 100);
      long estimate2=digest2.getQuantile((percentile + 0.0) / 100);
      long actual=(long)PercentileUtil.getValueOnPercentile(list,percentile);
      println("[Before Serialization Estimate]: " + estimate);
      println("[After Serialization Estimate]: " + estimate2);
    }
  }
  assertEquals(true,true);
}
