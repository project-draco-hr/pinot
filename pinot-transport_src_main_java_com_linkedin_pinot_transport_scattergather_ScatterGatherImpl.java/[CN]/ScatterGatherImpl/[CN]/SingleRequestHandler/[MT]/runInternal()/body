{
  if (_isCancelled.get()) {
    LOGGER.error("Request {} to server {} cancelled even before request is sent !! Not sending request",_request.getRequestId(),_server);
    _requestDispatchLatch.countDown();
    return;
  }
  NettyClientConnection conn=null;
  KeyedFuture<ServerInstance,NettyClientConnection> keyedFuture=null;
  boolean gotConnection=false;
  boolean error=true;
  try {
    keyedFuture=_connPool.checkoutObject(_server);
    byte[] serializedRequest=_request.getRequestForService(_server,_segmentIds);
    long timeRemaining=_timeoutMS - (System.currentTimeMillis() - _startTime);
    int ntries=0;
    while (true) {
      if (timeRemaining <= 0) {
        throw new TimeoutException("Timed out trying to connect to " + _server + "(timeout="+ _timeoutMS+ "ms,ntries="+ ntries+ ")");
      }
      conn=keyedFuture.getOne(timeRemaining,TimeUnit.MILLISECONDS);
      if (conn != null && conn.validate()) {
        gotConnection=true;
        break;
      }
      Map<ServerInstance,Throwable> errorMap=keyedFuture.getError();
      String errStr="";
      if (errorMap != null && errorMap.containsKey(_server)) {
        errStr=errorMap.get(_server).getMessage();
      }
      LOGGER.warn("Destroying invalid conn {}:{}",conn,errStr);
      if (conn != null) {
        _connPool.destroyObject(_server,conn);
      }
      if (++ntries == MAX_CONN_RETRIES - 1) {
        throw new RuntimeException("Could not connect to " + _server + " after "+ ntries+ "attempts(timeRemaining="+ timeRemaining+ "ms)");
      }
      keyedFuture=_connPool.checkoutObject(_server);
      timeRemaining=_timeoutMS - (System.currentTimeMillis() - _startTime);
    }
    ByteBuf req=Unpooled.wrappedBuffer(serializedRequest);
    _responseFuture=conn.sendRequest(req,_request.getRequestId(),timeRemaining);
    _isSent.set(true);
    LOGGER.debug("Response Future is : {}",_responseFuture);
    error=false;
  }
 catch (  TimeoutException e1) {
    LOGGER.error("Timed out waiting for connection for server ({})({})(gotConnection={}). Setting error future",_server,_request.getRequestId(),gotConnection,e1);
    _responseFuture=new ResponseFuture(_server,e1,"Error Future for request " + _request.getRequestId());
  }
catch (  Exception e) {
    LOGGER.error("Got exception sending request ({})(gotConnection={}). Setting error future",_request.getRequestId(),gotConnection,e);
    _responseFuture=new ResponseFuture(_server,e,"Error Future for request " + _request.getRequestId());
  }
 finally {
    _requestDispatchLatch.countDown();
    BrokerRequest brokerRequest=(BrokerRequest)_request.getBrokerRequest();
    if (error) {
      if (gotConnection) {
        _brokerMetrics.addMeteredQueryValue(brokerRequest,BrokerMeter.REQUEST_DROPPED_DUE_TO_SEND_ERROR,1);
      }
 else {
        if (keyedFuture != null) {
          keyedFuture.cancel(true);
        }
        _brokerMetrics.addMeteredQueryValue(brokerRequest,BrokerMeter.REQUEST_DROPPED_DUE_TO_CONNECTION_ERROR,1);
      }
    }
  }
}
