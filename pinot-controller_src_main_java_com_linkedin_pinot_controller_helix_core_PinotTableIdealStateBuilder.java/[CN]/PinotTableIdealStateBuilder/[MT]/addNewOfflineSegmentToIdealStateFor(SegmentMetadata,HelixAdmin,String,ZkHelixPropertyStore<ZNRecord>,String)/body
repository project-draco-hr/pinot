{
  final String offlineTableName=TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(segmentMetadata.getTableName());
  final String segmentName=segmentMetadata.getName();
  AbstractTableConfig offlineTableConfig=ZKMetadataProvider.getOfflineTableConfig(propertyStore,offlineTableName);
  if (!SEGMENT_ASSIGNMENT_STRATEGY_MAP.containsKey(offlineTableName)) {
    SEGMENT_ASSIGNMENT_STRATEGY_MAP.put(offlineTableName,SegmentAssignmentStrategyFactory.getSegmentAssignmentStrategy(offlineTableConfig.getValidationConfig().getSegmentAssignmentStrategy()));
  }
  final SegmentAssignmentStrategy segmentAssignmentStrategy=SEGMENT_ASSIGNMENT_STRATEGY_MAP.get(offlineTableName);
  final IdealState currentIdealState=helixAdmin.getResourceIdealState(helixClusterName,offlineTableName);
  final Set<String> currentInstanceSet=currentIdealState.getInstanceSet(segmentName);
  if (currentInstanceSet.isEmpty()) {
    final int replicas=Integer.parseInt(offlineTableConfig.getValidationConfig().getReplication());
    final List<String> selectedInstances=segmentAssignmentStrategy.getAssignedInstances(helixAdmin,helixClusterName,segmentMetadata,replicas,serverTenant);
    for (    final String instance : selectedInstances) {
      currentIdealState.setPartitionState(segmentName,instance,ONLINE);
    }
    currentIdealState.setNumPartitions(currentIdealState.getNumPartitions() + 1);
  }
 else {
    for (    final String instance : currentInstanceSet) {
      currentIdealState.setPartitionState(segmentName,instance,OFFLINE);
      currentIdealState.setPartitionState(segmentName,instance,ONLINE);
    }
  }
  return currentIdealState;
}
