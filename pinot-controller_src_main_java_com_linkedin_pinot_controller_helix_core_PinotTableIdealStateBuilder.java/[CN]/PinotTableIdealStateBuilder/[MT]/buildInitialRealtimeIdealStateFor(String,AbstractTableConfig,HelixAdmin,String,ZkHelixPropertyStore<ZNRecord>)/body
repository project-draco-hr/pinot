{
  KafkaStreamMetadata kafkaStreamMetadata=new KafkaStreamMetadata(realtimeTableConfig.getIndexingConfig().getStreamConfigs());
  String realtimeServerTenant=ControllerTenantNameBuilder.getRealtimeTenantNameForTenant(realtimeTableConfig.getTenantConfig().getServer());
  List<Helix.DataSource.Realtime.Kafka.ConsumerType> consumerTypes=kafkaStreamMetadata.getConsumerTypes();
  IdealState idealState=buildInitialKafkaHighLevelConsumerRealtimeIdealStateFor(realtimeTableName);
  final List<String> realtimeInstances=helixAdmin.getInstancesInClusterWithTag(helixClusterName,realtimeServerTenant);
  int nConsumers=0;
  for (  Helix.DataSource.Realtime.Kafka.ConsumerType consumerType : consumerTypes) {
    LOGGER.info("Setting up instances for highlevel consumer for table {}",realtimeTableName);
    if (consumerType.equals(Helix.DataSource.Realtime.Kafka.ConsumerType.highLevel)) {
      if (realtimeInstances.size() % Integer.parseInt(realtimeTableConfig.getValidationConfig().getReplication()) != 0) {
        throw new RuntimeException("Number of instance in current tenant should be an integer multiples of the number of replications");
      }
      setupInstanceConfigForKafkaHighLevelConsumer(realtimeTableName,realtimeInstances.size(),Integer.parseInt(realtimeTableConfig.getValidationConfig().getReplication()),realtimeTableConfig.getIndexingConfig().getStreamConfigs(),zkHelixPropertyStore,realtimeInstances);
      nConsumers++;
    }
 else     if (consumerType.equals(Helix.DataSource.Realtime.Kafka.ConsumerType.simple)) {
      LOGGER.info("Assigning partitions to instances for simple consumer for table {}",realtimeTableName);
      final int nReplicas=Integer.valueOf(realtimeTableConfig.getValidationConfig().getReplicasPerPartition());
      final KafkaStreamMetadata kafkaMetadata=new KafkaStreamMetadata(realtimeTableConfig.getIndexingConfig().getStreamConfigs());
      final String topicName=kafkaMetadata.getKafkaTopicName();
      final PinotLLCRealtimeSegmentManager segmentManager=PinotLLCRealtimeSegmentManager.getInstance();
      final int nPartitions=getPartitionsCount(kafkaMetadata);
      final long startOffset=0L;
      segmentManager.setupHelixEntries(topicName,realtimeTableName,nPartitions,realtimeInstances,nReplicas,0L);
      nConsumers++;
    }
 else {
      LOGGER.warn("Unsupported consumer type {} for table {}",consumerType.name(),realtimeTableName);
    }
  }
  if (nConsumers == 0) {
    throw new UnsupportedOperationException("Unknown kafka consumer types: " + consumerTypes + " for table "+ realtimeTableName);
  }
  return idealState;
}
