{
  List<List<Integer>> rawValueContainer=new LinkedList<List<Integer>>();
  List<ByteBuffer> dimbufferContainer=new LinkedList<ByteBuffer>();
  for (int i=0; i < 1000; i++) {
    List<Integer> row=Lists.<Integer>newLinkedList();
    Random random=new Random(System.currentTimeMillis());
    for (    String dimension : schema.getDimensionNames()) {
      if (schema.getFieldSpecFor(dimension).isSingleValueField()) {
        row.add(random.nextInt(10000));
      }
 else {
        int len=random.nextInt(10);
        row.add(len);
        for (int j=0; j < len; j++) {
          row.add(random.nextInt(10000));
        }
      }
    }
    rawValueContainer.add(row);
  }
  for (  List<Integer> row : rawValueContainer) {
    ByteBuffer dimBuff=ByteBuffer.allocate(row.size() * 4);
    for (    Integer e : row) {
      dimBuff.putInt(e);
    }
    dimbufferContainer.add(dimBuff);
  }
  Assert.assertEquals(rawValueContainer.size(),dimbufferContainer.size());
  for (int i=0; i < dimbufferContainer.size(); i++) {
    int offset=0;
    ByteBuffer buff=dimbufferContainer.get(i);
    buff.rewind();
    for (    Integer e : rawValueContainer.get(i)) {
      Assert.assertEquals(e.intValue(),buff.getInt(offset));
      offset+=4;
    }
  }
  for (int i=0; i < rawValueContainer.size(); i++) {
    List<Integer> rawRow=rawValueContainer.get(i);
    ByteBuffer byteBufferRow=dimbufferContainer.get(i);
    for (    String dimension : schema.getDimensionNames()) {
      int[] valuesFromList=extractValuesFromList(dimension,rawRow);
      int[] valuesFromBuff=new int[]{};
      Assert.assertEquals(valuesFromBuff,valuesFromList);
    }
  }
}
