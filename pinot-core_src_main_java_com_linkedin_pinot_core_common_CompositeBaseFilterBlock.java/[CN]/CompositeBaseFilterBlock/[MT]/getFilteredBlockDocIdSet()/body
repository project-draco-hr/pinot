{
  Integer minDocId=null;
  Integer maxDocId=null;
  List<FilterBlockDocIdSet> filterBlocks=new ArrayList<>(blocks.size());
  for (  BaseFilterBlock block : blocks) {
    FilterBlockDocIdSet filterBlock=block.getFilteredBlockDocIdSet();
    if (minDocId == null || filterBlock.getMinDocId() < minDocId) {
      minDocId=filterBlock.getMinDocId();
    }
    if (maxDocId == null || filterBlock.getMaxDocId() > maxDocId) {
      maxDocId=filterBlock.getMaxDocId();
    }
    filterBlocks.add(filterBlock);
  }
  final int finalMinDocId=minDocId == null ? 0 : minDocId;
  final int finalMaxDocId=maxDocId == null ? 0 : maxDocId;
  return new FilterBlockDocIdSet(){
    @Override public int getMinDocId(){
      return finalMinDocId;
    }
    @Override public int getMaxDocId(){
      return finalMaxDocId;
    }
    @Override public void setStartDocId(    int startDocId){
      throw new UnsupportedOperationException();
    }
    @Override public void setEndDocId(    int endDocId){
      throw new UnsupportedOperationException();
    }
    @Override public BlockDocIdIterator iterator(){
      return new BlockDocIdIterator(){
        int blockIdx=0;
        BlockDocIdIterator itr=null;
        @Override public int currentDocId(){
          checkIterator();
          return itr.currentDocId();
        }
        @Override public int next(){
          checkIterator();
          int next=itr.next();
          while (next == Constants.EOF && blockIdx < filterBlocks.size()) {
            checkIterator();
            next=itr.next();
          }
          return next;
        }
        @Override public int advance(        int targetDocId){
          do {
            checkIterator();
            itr.advance(targetDocId);
          }
 while (itr.currentDocId() == Constants.EOF && blockIdx < filterBlocks.size());
          return next();
        }
        void checkIterator(){
          if (itr == null) {
            itr=filterBlocks.get(blockIdx++).iterator();
          }
          while (itr.currentDocId() == Constants.EOF && blockIdx < filterBlocks.size()) {
            itr=filterBlocks.get(blockIdx++).iterator();
          }
        }
      }
;
    }
    @Override public <T>T getRaw(){
      throw new UnsupportedOperationException();
    }
  }
;
}
