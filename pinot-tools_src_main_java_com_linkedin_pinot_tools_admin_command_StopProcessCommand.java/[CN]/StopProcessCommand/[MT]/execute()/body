{
  LOGGER.info("Executing command: " + toString());
  Map<String,String> processes=new HashMap<String,String>();
  String prefix=System.getProperty("java.io.tmpdir") + File.separator;
  File tempDir=new File(System.getProperty("java.io.tmpdir"));
  if (_server) {
    File[] serverFiles=tempDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        if (StringUtils.containsIgnoreCase(name,"pinotAdminServer")) {
          return true;
        }
        return false;
      }
    }
);
    for (    File serverFile : serverFiles) {
      processes.put(serverFile.getName(),serverFile.getAbsolutePath());
    }
  }
  if (_broker) {
    File[] serverFiles=tempDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        if (StringUtils.containsIgnoreCase(name,"pinotAdminBroker")) {
          return true;
        }
        return false;
      }
    }
);
    for (    File serverFile : serverFiles) {
      processes.put(serverFile.getName(),serverFile.getAbsolutePath());
    }
  }
  if (_controller) {
    File[] serverFiles=tempDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        if (StringUtils.containsIgnoreCase(name,"pinotAdminController")) {
          return true;
        }
        return false;
      }
    }
);
    for (    File serverFile : serverFiles) {
      processes.put(serverFile.getName(),serverFile.getAbsolutePath());
    }
  }
  if (_zooKeeper) {
    processes.put("Zookeeper",prefix + ".zooKeeper.pid");
  }
  if (_kafka) {
    processes.put("Kafka",prefix + ".kafka.pid");
  }
  boolean ret=true;
  for (  Map.Entry<String,String> entry : processes.entrySet()) {
    try {
      stopProcess(entry.getValue());
    }
 catch (    Exception e) {
      System.out.println("Failed to stop process: " + entry.getKey() + ": "+ e);
      ret=false;
    }
  }
  return ret;
}
