{
synchronized (sync) {
    long[] sums=new long[metricNames.size()];
    int[] targetDimensions=new int[dimensionNames.size()];
    for (int i=0; i < dimensionNames.size(); i++) {
      String dimensionName=dimensionNames.get(i);
      String dimensionValue=query.getDimensionValues().get(dimensionName);
      int valueId=forwardIndex.get(dimensionName).get(dimensionValue);
      targetDimensions[i]=valueId;
    }
    Set<Integer> missedBuckets=new HashSet<Integer>();
    if (query.getTimeBuckets() != null) {
      for (      Long time : query.getTimeBuckets()) {
        int bucket=(int)(time % timeBuckets.size());
        int idx=search(buffer,bucket,targetDimensions);
        if (idx >= 0) {
          buffer.position(idx);
          updateSums(buffer,sums,time);
        }
 else {
          missedBuckets.add(bucket);
        }
      }
    }
 else     if (query.getTimeRange() != null) {
      for (long time=query.getTimeRange().getKey(); time <= query.getTimeRange().getValue(); time++) {
        int bucket=(int)(time % timeBuckets.size());
        int idx=search(buffer,bucket,targetDimensions);
        if (idx >= 0) {
          buffer.position(idx);
          updateSums(buffer,sums,time);
        }
 else {
          missedBuckets.add(bucket);
        }
      }
    }
 else {
      for (      int bucket : timeBuckets) {
        int idx=search(buffer,bucket,targetDimensions);
        if (idx >= 0) {
          buffer.position(idx);
          updateSums(buffer,sums,-1);
        }
 else {
          missedBuckets.add(bucket);
        }
      }
    }
    if (!missedBuckets.isEmpty()) {
      filterAggregate(buffer,sums,targetDimensions,missedBuckets);
    }
    return sums;
  }
}
