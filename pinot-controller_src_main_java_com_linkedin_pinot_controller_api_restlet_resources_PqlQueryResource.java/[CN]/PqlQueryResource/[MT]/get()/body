{
  final String pqlString=getQuery().getValues("pql");
  LOGGER.info("*** found pql : " + pqlString);
  JSONObject compiledJSON;
  try {
    compiledJSON=compiler.compile(pqlString);
  }
 catch (  final RecognitionException e) {
    LOGGER.error("Caught exception while processing get request",e);
    ProcessingException parsingException=QueryException.PQL_PARSING_ERROR.deepCopy();
    parsingException.setMessage(e.toString());
    return new StringRepresentation(parsingException.toString());
  }
  if (!compiledJSON.has("collection")) {
    return new StringRepresentation("your request does not contain the collection information");
  }
  final String resource;
  try {
    resource=compiledJSON.getString("collection");
  }
 catch (  final JSONException e) {
    LOGGER.error("Caught exception while processing get request",e);
    return new StringRepresentation(QueryException.BROKER_RESOURCE_MISSING_ERROR.toString());
  }
  final String instanceId;
  final InstanceConfig config;
  try {
    final List<String> instanceIds=manager.getBrokerInstancesFor(resource);
    if (instanceIds.isEmpty()) {
      return new StringRepresentation(QueryException.BROKER_INSTANCE_MISSING_ERROR.toString());
    }
 else {
      Collections.shuffle(instanceIds);
      instanceId=instanceIds.get(0);
      config=manager.getHelixInstanceConfig(instanceId);
    }
  }
 catch (  final Exception e) {
    LOGGER.error("Caught exception while processing get request",e);
    return new StringRepresentation(QueryException.BROKER_INSTANCE_MISSING_ERROR.toString());
  }
  final String resp=sendPQLRaw("http://" + config.getHostName().split("_")[1] + ":"+ config.getPort()+ "/query",pqlString);
  return new StringRepresentation(resp);
}
