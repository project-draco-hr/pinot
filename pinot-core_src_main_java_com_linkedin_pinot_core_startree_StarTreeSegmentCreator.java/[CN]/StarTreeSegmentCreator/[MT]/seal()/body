{
  LOG.info("Writing aggregate segment...");
  long startMillis=System.currentTimeMillis();
  int currentAggregateDocumentId=starTreeBuilder.getTotalRawDocumentCount();
  Iterator<StarTreeTableRow> itr=starTreeBuilder.getTable().getAllCombinations();
  while (itr.hasNext()) {
    StarTreeTableRow next=itr.next();
    if (next.getDimensions().contains(StarTreeIndexNode.all())) {
      for (      final String column : dictionaryCreatorMap.keySet()) {
        int dictionaryIndex=-1;
        int[] dictionaryIndices=null;
        if (starTreeDimensionDictionary.containsKey(column)) {
          Integer dimensionId=starTreeDimensionDictionary.get(column);
          Integer dimensionValue=next.getDimensions().get(dimensionId);
          if (dimensionValue == StarTreeIndexNode.all()) {
            Object allValue=StarTreeIndexNode.getAllValue(schema.getFieldSpecFor(column));
            if (schema.getFieldSpecFor(column).isSingleValueField()) {
              dictionaryIndex=dictionaryCreatorMap.get(column).indexOfSV(allValue);
            }
 else {
              dictionaryIndices=dictionaryCreatorMap.get(column).indexOfMV(allValue);
            }
          }
 else {
            dictionaryIndex=dimensionValue;
          }
        }
 else         if (starTreeMetricDictionary.containsKey(column)) {
          Integer metricId=starTreeMetricDictionary.get(column);
          Object columnValueToIndex=next.getMetrics().get(metricId);
          if (schema.getFieldSpecFor(column).isSingleValueField()) {
            dictionaryIndex=dictionaryCreatorMap.get(column).indexOfSV(columnValueToIndex);
          }
 else {
            dictionaryIndices=dictionaryCreatorMap.get(column).indexOfMV(columnValueToIndex);
          }
        }
 else {
          Object columnValueToIndex=StarTreeIndexNode.getAllValue(schema.getFieldSpecFor(column));
          if (schema.getFieldSpecFor(column).isSingleValueField()) {
            dictionaryIndex=dictionaryCreatorMap.get(column).indexOfSV(columnValueToIndex);
          }
 else {
            dictionaryIndices=dictionaryCreatorMap.get(column).indexOfMV(columnValueToIndex);
          }
        }
        if (schema.getFieldSpecFor(column).isSingleValueField()) {
          ((SingleValueForwardIndexCreator)forwardIndexCreatorMap.get(column)).index(currentAggregateDocumentId,dictionaryIndex);
        }
 else {
          ((MultiValueForwardIndexCreator)forwardIndexCreatorMap.get(column)).index(currentAggregateDocumentId,dictionaryIndices);
        }
        if (config.isCreateInvertedIndexEnabled()) {
          if (schema.getFieldSpecFor(column).isSingleValueField()) {
            invertedIndexCreatorMap.get(column).add(currentAggregateDocumentId,dictionaryIndex);
          }
 else {
            invertedIndexCreatorMap.get(column).add(currentAggregateDocumentId,dictionaryIndices);
          }
        }
      }
      currentAggregateDocumentId++;
    }
  }
  long endMillis=System.currentTimeMillis();
  LOG.info("Done writing aggregate segment (took {} ms)",endMillis - startMillis);
  for (  final String column : forwardIndexCreatorMap.keySet()) {
    forwardIndexCreatorMap.get(column).close();
    if (config.isCreateInvertedIndexEnabled()) {
      invertedIndexCreatorMap.get(column).seal();
    }
    dictionaryCreatorMap.get(column).close();
  }
  writeMetadata(outDir,starTreeBuilder.getTotalRawDocumentCount() + starTreeBuilder.getTotalAggregateDocumentCount(),starTreeBuilder.getTotalAggregateDocumentCount(),true);
  LOG.info("Writing " + V1Constants.STARTREE_FILE);
  startMillis=System.currentTimeMillis();
  File starTreeFile=new File(outDir,V1Constants.STARTREE_FILE);
  OutputStream starTreeOutputStream=new FileOutputStream(starTreeFile);
  starTreeBuilder.getTree().writeTree(starTreeOutputStream);
  starTreeOutputStream.close();
  endMillis=System.currentTimeMillis();
  LOG.info("Wrote StarTree file (took {} ms)",endMillis - startMillis);
  LOG.info("Deleting StarTree table file {}",starTreeTableFile);
  FileUtils.forceDelete(starTreeTableFile);
}
