{
  TimeOnTimeComparisonRequest comparisonRequest=generateTimeOnTimeComparisonRequest(request);
  TimeOnTimeComparisonHandler handler=new TimeOnTimeComparisonHandler(queryCache);
  try {
    collectionConfig=CACHE_REGISTRY_INSTANCE.getCollectionConfigCache().get(comparisonRequest.getCollectionName());
  }
 catch (  InvalidCacheLoadException e) {
    LOGGER.debug("No collection configs for collection {}",comparisonRequest.getCollectionName());
  }
  TimeOnTimeComparisonResponse response=handler.handle(comparisonRequest);
  Set<String> dimensions=response.getDimensions();
  List<String> expressionNames=new ArrayList<>();
  Map<String,String> metricExpressions=new HashMap<>();
  for (  MetricExpression expression : request.getMetricExpressions()) {
    expressionNames.add(expression.getExpressionName());
    metricExpressions.put(expression.getExpressionName(),expression.getExpression());
  }
  Map<String,String> cellSizeExpressions=new HashMap<>();
  int numRows=response.getNumRows();
  Map<String,HeatMap.Builder> data=new HashMap<>();
  Map<String,Double> baselineTotalPerDimension=new HashMap<>();
  Map<String,Double> currentTotalPerDimension=new HashMap<>();
  for (  String dimension : dimensions) {
    baselineTotalPerDimension.put(dimension,0d);
    currentTotalPerDimension.put(dimension,0d);
  }
  for (int i=0; i < numRows; i++) {
    Row row=response.getRow(i);
    String dimension=row.getDimensionName();
    String dimensionValue=row.getDimensionValue();
    Map<String,Metric> metricMap=new HashMap<>();
    for (    Metric metric : row.getMetrics()) {
      metricMap.put(metric.getMetricName(),metric);
    }
    for (    Metric metric : row.getMetrics()) {
      String metricName=metric.getMetricName();
      if (!expressionNames.contains(metricName)) {
        continue;
      }
      String dataKey=metricName + "." + dimension;
      HeatMap.Builder heatMapBuilder=data.get(dataKey);
      if (heatMapBuilder == null) {
        heatMapBuilder=new HeatMap.Builder(dimension);
        data.put(dataKey,heatMapBuilder);
      }
      if (collectionConfig != null && collectionConfig.getCellSizeExpression() != null && collectionConfig.getCellSizeExpression().get(metricName) != null) {
        String metricExpression=metricExpressions.get(metricName);
        String[] tokens=metricExpression.split(RATIO_SEPARATOR);
        String numerator=tokens[0];
        String denominator=tokens[1];
        Metric numeratorMetric=metricMap.get(numerator);
        Metric denominatorMetric=metricMap.get(denominator);
        Double numeratorBaseline=numeratorMetric == null ? 0 : numeratorMetric.getBaselineValue();
        Double numeratorCurrent=numeratorMetric == null ? 0 : numeratorMetric.getCurrentValue();
        Double denominatorBaseline=denominatorMetric == null ? 0 : denominatorMetric.getBaselineValue();
        Double denominatorCurrent=denominatorMetric == null ? 0 : denominatorMetric.getCurrentValue();
        Map<String,Double> context=new HashMap<>();
        context.put(numerator,numeratorCurrent);
        context.put(denominator,denominatorCurrent);
        String cellSizeExpression=collectionConfig.getCellSizeExpression().get(metricName).getExpression();
        cellSizeExpressions.put(metricName,cellSizeExpression);
        Double cellSize=MetricExpression.evaluateExpression(cellSizeExpression,context);
        heatMapBuilder.addCell(dimensionValue,metric.getBaselineValue(),metric.getCurrentValue(),cellSize,cellSizeExpression,numeratorBaseline,denominatorBaseline,numeratorCurrent,denominatorCurrent);
      }
 else {
        heatMapBuilder.addCell(dimensionValue,metric.getBaselineValue(),metric.getCurrentValue());
      }
      baselineTotalPerDimension.put(dimension,baselineTotalPerDimension.get(dimension) + metric.getBaselineValue());
      currentTotalPerDimension.put(dimension,currentTotalPerDimension.get(dimension) + metric.getCurrentValue());
    }
  }
  ResponseSchema schema=new ResponseSchema();
  String[] columns=HeatMapCell.columns();
  for (int i=0; i < columns.length; i++) {
    String column=columns[i];
    schema.add(column,i);
  }
  Map<String,GenericResponse> heatMapViewResponseData=new HashMap<>();
  Info summary=new Info();
  summary.addSimpleField("baselineStart",comparisonRequest.getBaselineStart().toString());
  summary.addSimpleField("baselineEnd",comparisonRequest.getBaselineEnd().toString());
  summary.addSimpleField("currentStart",comparisonRequest.getCurrentStart().toString());
  summary.addSimpleField("currentEnd",comparisonRequest.getCurrentEnd().toString());
  Double baselineTotal=baselineTotalPerDimension.values().iterator().next();
  Double currentTotal=currentTotalPerDimension.values().iterator().next();
  summary.addSimpleField("baselineTotal",HeatMapCell.format(baselineTotal));
  summary.addSimpleField("currentTotal",HeatMapCell.format(currentTotal));
  summary.addSimpleField("deltaChange",HeatMapCell.format(currentTotal - baselineTotal));
  summary.addSimpleField("deltaPercentage",HeatMapCell.format((currentTotal - baselineTotal) * 100.0 / baselineTotal));
  for (  Entry<String,HeatMap.Builder> entry : data.entrySet()) {
    String dataKey=entry.getKey();
    GenericResponse heatMapResponse=new GenericResponse();
    List<String[]> heatMapResponseData=new ArrayList<>();
    HeatMap.Builder builder=entry.getValue();
    HeatMap heatMap=builder.build();
    for (    HeatMapCell cell : heatMap.heatMapCells) {
      String[] newRowData=cell.toArray();
      heatMapResponseData.add(newRowData);
    }
    heatMapResponse.setSchema(schema);
    heatMapResponse.setResponseData(heatMapResponseData);
    heatMapViewResponseData.put(dataKey,heatMapResponse);
  }
  HeatMapViewResponse heatMapViewResponse=new HeatMapViewResponse();
  heatMapViewResponse.setMetrics(expressionNames);
  heatMapViewResponse.setDimensions(new ArrayList<String>(dimensions));
  heatMapViewResponse.setSummary(summary);
  heatMapViewResponse.setData(heatMapViewResponseData);
  heatMapViewResponse.setCellSizeExpression(cellSizeExpressions);
  return heatMapViewResponse;
}
