{
  logger.debug(String.format("Untaring %s to dir %s.",inputFile.getAbsolutePath(),outputDir.getAbsolutePath()));
  TarArchiveInputStream debInputStream=null;
  InputStream is=null;
  final List<File> untaredFiles=new LinkedList<File>();
  try {
    is=new GzipCompressorInputStream(new FileInputStream(inputFile));
    debInputStream=(TarArchiveInputStream)new ArchiveStreamFactory().createArchiveInputStream("tar",is);
    TarArchiveEntry entry=null;
    while ((entry=(TarArchiveEntry)debInputStream.getNextEntry()) != null) {
      final File outputFile=new File(outputDir,entry.getName());
      if (entry.isDirectory()) {
        logger.debug(String.format("Attempting to write output directory %s.",outputFile.getAbsolutePath()));
        if (!outputFile.exists()) {
          logger.debug(String.format("Attempting to create output directory %s.",outputFile.getAbsolutePath()));
          if (!outputFile.mkdirs()) {
            throw new IllegalStateException(String.format("Couldn't create directory %s.",outputFile.getAbsolutePath()));
          }
        }
 else {
          logger.error("The directory already there. Deleting - " + outputFile.getAbsolutePath());
          FileUtils.deleteDirectory(outputFile);
        }
      }
 else {
        logger.debug(String.format("Creating output file %s.",outputFile.getAbsolutePath()));
        File directory=outputFile.getParentFile();
        if (!directory.exists()) {
          directory.mkdirs();
        }
        OutputStream outputFileStream=null;
        try {
          outputFileStream=new FileOutputStream(outputFile);
          IOUtils.copy(debInputStream,outputFileStream);
        }
  finally {
          IOUtils.closeQuietly(outputFileStream);
        }
      }
      untaredFiles.add(outputFile);
    }
  }
  finally {
    IOUtils.closeQuietly(debInputStream);
    IOUtils.closeQuietly(is);
  }
  return untaredFiles;
}
