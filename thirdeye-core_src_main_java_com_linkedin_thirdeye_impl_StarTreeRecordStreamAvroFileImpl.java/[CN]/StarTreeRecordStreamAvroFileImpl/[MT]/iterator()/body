{
  final Iterator<GenericRecord> itr=fileReader.iterator();
  return new Iterator<StarTreeRecord>(){
    @Override public boolean hasNext(){
      return itr.hasNext();
    }
    @Override public StarTreeRecord next(){
      StarTreeRecordImpl.Builder builder=new StarTreeRecordImpl.Builder();
      GenericRecord genericRecord=itr.next();
      for (      String dimensionName : dimensionNames) {
        Object o=genericRecord.get(dimensionName);
        if (o == null) {
          throw new IllegalArgumentException("Found null dimension value in " + genericRecord);
        }
        builder.setDimensionValue(dimensionName,o.toString());
      }
      for (      String metricName : metricNames) {
        Object o=genericRecord.get(metricName);
        if (o == null) {
          builder.setMetricValue(metricName,0L);
        }
 else         if (o instanceof Integer) {
          builder.setMetricValue(metricName,((Integer)o).longValue());
        }
 else         if (o instanceof Long) {
          builder.setMetricValue(metricName,(Long)o);
        }
 else {
          throw new IllegalArgumentException("Invalid metric field: " + o);
        }
      }
      Object o=genericRecord.get(timeColumnName);
      if (o == null) {
        throw new IllegalArgumentException("Found null metric value in " + genericRecord);
      }
 else       if (o instanceof Integer) {
        builder.setTime(((Integer)o).longValue());
      }
 else       if (o instanceof Long) {
        builder.setTime((Long)o);
      }
 else {
        throw new IllegalArgumentException("Invalid time field: " + o);
      }
      return builder.build();
    }
    @Override public void remove(){
      itr.remove();
    }
  }
;
}
