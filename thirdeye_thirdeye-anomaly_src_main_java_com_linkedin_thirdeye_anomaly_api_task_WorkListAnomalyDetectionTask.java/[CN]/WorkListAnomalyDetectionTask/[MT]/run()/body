{
  LOGGER.info("begin executing AnomalyDetectionTask : {}",getTaskInfo());
  List<Future<?>> futures=new LinkedList<>();
  for (  final DimensionKeySeries dimensionKeySeries : dimensionKeySeries) {
    futures.add(SHARED_EXECUTORS.submit(new Runnable(){
      @Override public void run(){
        try {
          LOGGER.info("analyzing {}",dimensionKeySeries);
          runFunctionForSeries(dimensionKeySeries.getDimensionKey(),dimensionKeySeries.getContributionEstimate());
        }
 catch (        Exception e) {
          LOGGER.error("problem failed to complete {} for {}",getTaskInfo(),dimensionKeySeries,e);
        }
      }
    }
));
  }
  try {
    for (    Future<?> f : futures) {
      f.get();
    }
  }
 catch (  InterruptedException|ExecutionException e) {
    for (    Future<?> f : futures) {
      f.cancel(false);
    }
  }
  LOGGER.info("done executing AnomalyDetectionTask : {}",getTaskInfo());
}
