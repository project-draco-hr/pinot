{
  buffer.rewind();
  long targetBucket=targetTime % timeBuckets.size();
  int[] currentDimensions=new int[dimensionNames.size()];
  while (buffer.position() < buffer.limit()) {
    int idx=((buffer.limit() + buffer.position()) / entrySize / 2) * entrySize;
    buffer.mark();
    buffer.position(idx);
    long currentBucket=buffer.getLong();
    for (int i=0; i < currentDimensions.length; i++) {
      currentDimensions[i]=buffer.getInt();
    }
    long currentTime=buffer.getLong();
    buffer.reset();
    int compareResult=targetBucket != currentBucket ? (int)(targetBucket - currentBucket) : DIMENSION_COMBINATION_COMPARATOR.compare(targetDimensions,currentDimensions);
    if (compareResult == 0) {
      return currentTime == targetTime ? idx : -1;
    }
 else     if (compareResult < 0) {
      buffer.limit(idx);
    }
 else {
      buffer.position(idx + entrySize);
    }
  }
  return -1;
}
