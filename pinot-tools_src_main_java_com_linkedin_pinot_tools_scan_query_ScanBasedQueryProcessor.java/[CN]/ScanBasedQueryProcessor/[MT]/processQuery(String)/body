{
  long startTimeInMillis=System.currentTimeMillis();
  Pql2Compiler pql2Compiler=new Pql2Compiler();
  BrokerRequest brokerRequest=pql2Compiler.compileToBrokerRequest(query);
  ResultTable results=null;
  File file=new File(_segmentsDir);
  Aggregation aggregation=null;
  List<String> groupByColumns;
  List<AggregationInfo> aggregationsInfo=brokerRequest.getAggregationsInfo();
  if (aggregationsInfo != null) {
    GroupBy groupBy=brokerRequest.getGroupBy();
    groupByColumns=(brokerRequest.isSetGroupBy()) ? groupBy.getColumns() : null;
    long topN=(groupByColumns != null) ? groupBy.getTopN() : 10;
    aggregation=new Aggregation(brokerRequest.getAggregationsInfo(),groupByColumns,topN);
  }
  int numDocsScanned=0;
  int totalDocs=0;
  int numSegments=0;
  LOGGER.info("Processing Query: {}",query);
  List<ResultTable> resultTables=processSegments(query,brokerRequest,file);
  for (  ResultTable segmentResults : resultTables) {
    numDocsScanned+=segmentResults.getNumDocsScanned();
    totalDocs+=segmentResults.getTotalDocs();
    ++numSegments;
    results=(results == null) ? segmentResults : results.append(segmentResults);
  }
  if (aggregation != null && numSegments > 1 && numDocsScanned > 0) {
    results=aggregation.aggregate(results);
  }
  results.setNumDocsScanned(numDocsScanned);
  results.setTotalDocs(totalDocs);
  long totalUsedMs=System.currentTimeMillis() - startTimeInMillis;
  results.setProcessingTime(totalUsedMs);
  results.convertSumToAvgIfNeeded();
  QueryResponse queryResponse=new QueryResponse(results);
  return queryResponse;
}
