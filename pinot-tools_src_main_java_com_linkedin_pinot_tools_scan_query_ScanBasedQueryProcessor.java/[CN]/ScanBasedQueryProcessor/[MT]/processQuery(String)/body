{
  long startTimeInMillis=System.currentTimeMillis();
  PQLCompiler compiler=new PQLCompiler(new HashMap<String,String[]>());
  JSONObject jsonObject=compiler.compile(query);
  BrokerRequest brokerRequest=RequestConverter.fromJSON(jsonObject);
  ResultTable results=null;
  File file=new File(_segmentsDir);
  Aggregation aggregation=null;
  List<String> groupByColumns=null;
  List<AggregationInfo> aggregationsInfo=brokerRequest.getAggregationsInfo();
  if (aggregationsInfo != null) {
    groupByColumns=(brokerRequest.isSetGroupBy()) ? brokerRequest.getGroupBy().getColumns() : null;
    aggregation=new Aggregation(brokerRequest.getAggregationsInfo(),groupByColumns);
  }
  int numDocsScanned=0;
  int totalDocs=0;
  LOGGER.info("Processing Query: {}",query);
  for (  File segmentDir : file.listFiles()) {
    LOGGER.info("Processing segment: " + segmentDir.getName());
    SegmentQueryProcessor processor=new SegmentQueryProcessor(brokerRequest,segmentDir);
    ResultTable segmentResults=processor.process(query);
    numDocsScanned+=segmentResults.getNumDocsScanned();
    totalDocs+=segmentResults.getTotalDocs();
    results=(results == null) ? segmentResults : results.append(segmentResults);
  }
  if (aggregation != null) {
    results=aggregation.aggregate(results);
  }
  results.setNumDocsScanned(numDocsScanned);
  results.setTotalDocs(totalDocs);
  long totalUsedMs=System.currentTimeMillis() - startTimeInMillis;
  results.setProcessingTime(totalUsedMs);
  printResult(results);
  return results;
}
