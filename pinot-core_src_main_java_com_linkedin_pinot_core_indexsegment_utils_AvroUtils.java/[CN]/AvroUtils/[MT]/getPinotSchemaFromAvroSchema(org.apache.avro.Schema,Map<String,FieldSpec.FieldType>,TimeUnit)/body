{
  Schema pinotSchema=new Schema();
  for (  final Field field : avroSchema.getFields()) {
    String fieldName=field.name();
    FieldSpec.DataType dataType;
    try {
      dataType=AvroRecordReader.getColumnType(field);
    }
 catch (    UnsupportedOperationException e) {
      LOGGER.warn("Unsupported field type for field {} schema {}, using String instead.",fieldName,field.schema());
      dataType=FieldSpec.DataType.STRING;
    }
    FieldSpec.FieldType fieldType=fieldTypes.get(fieldName);
    boolean isSingleValueField=AvroRecordReader.isSingleValueField(field);
switch (fieldType) {
case DIMENSION:
      pinotSchema.addField(new DimensionFieldSpec(fieldName,dataType,isSingleValueField));
    break;
case METRIC:
  Preconditions.checkState(isSingleValueField,"Unsupported multi-value for metric field.");
pinotSchema.addField(new MetricFieldSpec(fieldName,dataType));
break;
case TIME:
Preconditions.checkState(isSingleValueField,"Unsupported multi-value for time field.");
pinotSchema.addField(new TimeFieldSpec(field.name(),dataType,timeUnit));
break;
default :
throw new UnsupportedOperationException("Unsupported field type: " + fieldType + " for field: "+ fieldName);
}
}
return pinotSchema;
}
