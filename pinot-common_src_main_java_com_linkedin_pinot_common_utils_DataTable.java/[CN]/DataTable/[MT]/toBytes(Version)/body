{
  final byte[] dictionaryBytes=serializeDictionary();
  final byte[] metadataBytes=serializeMetadata();
  byte[] schemaBytes=new byte[0];
  if (schema != null) {
    schemaBytes=schema.toBytes();
  }
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final DataOutputStream out=new DataOutputStream(baos);
  out.writeInt(version.getValue());
  out.writeInt(numRows);
  out.writeInt(numCols);
  int baseOffset=52;
  out.writeInt(baseOffset);
  out.writeInt(dictionaryBytes.length);
  baseOffset+=dictionaryBytes.length;
  out.writeInt(baseOffset);
  out.writeInt(metadataBytes.length);
  baseOffset+=metadataBytes.length;
  out.writeInt(baseOffset);
  out.writeInt(schemaBytes.length);
  baseOffset+=schemaBytes.length;
  out.writeInt(baseOffset);
  if (fixedSizeDataBytes == null) {
    out.writeInt(0);
  }
 else {
    out.writeInt(fixedSizeDataBytes.length);
    baseOffset+=fixedSizeDataBytes.length;
  }
  out.writeInt(baseOffset);
  if (variableSizeDataBytes == null) {
    out.writeInt(0);
  }
 else {
    out.writeInt(variableSizeDataBytes.length);
  }
  out.write(dictionaryBytes);
  out.write(metadataBytes);
  out.write(schemaBytes);
  if (fixedSizeDataBytes != null) {
    out.write(fixedSizeDataBytes);
  }
  if (variableSizeDataBytes != null) {
    out.write(variableSizeDataBytes);
  }
  byte[] byteArray=baos.toByteArray();
  long end=System.currentTimeMillis();
  return byteArray;
}
