{
  this.indexDataBuffer=indexDataBuffer;
  this.numDocs=numDocs;
  this.totalNumValues=totalNumValues;
  float averageValuesPerDoc=totalNumValues / numDocs;
  this.docsPerChunk=(int)(Math.ceil(PREFERRED_NUM_VALUES_PER_CHUNK / averageValuesPerDoc));
  LOGGER.debug(" Loading index data buffer of size:{} totalDocs:{} totalNumOfEntries:{} docsPerChunk:{}",indexDataBuffer.size(),numDocs,totalNumValues,docsPerChunk);
  this.numChunks=(numDocs + docsPerChunk - 1) / docsPerChunk;
  chunkOffsetHeaderSize=numChunks * SIZE_OF_INT * NUM_COLS_IN_HEADER;
  bitsetSize=(totalNumValues + 7) / 8;
  rawDataSize=SizeUtil.computeBytesRequired(totalNumValues,columnSizeInBits,SizeUtil.BIT_UNPACK_BATCH_SIZE);
  totalSize=chunkOffsetHeaderSize + bitsetSize + rawDataSize;
  Preconditions.checkState(totalSize > 0 && totalSize < Integer.MAX_VALUE,"Total size can not exceed 2GB");
  chunkOffsetsBuffer=indexDataBuffer.view(0,chunkOffsetHeaderSize);
  int bitsetEndPos=chunkOffsetHeaderSize + bitsetSize;
  bitsetBuffer=indexDataBuffer.view(chunkOffsetHeaderSize,bitsetEndPos);
  rawDataBuffer=indexDataBuffer.view(bitsetEndPos,bitsetEndPos + rawDataSize);
  chunkOffsetsReader=new FixedByteSingleValueMultiColReader(chunkOffsetsBuffer,numChunks,NUM_COLS_IN_HEADER,new int[]{SIZE_OF_INT});
  customBitSet=PinotDataCustomBitSet.withDataBuffer(bitsetSize,bitsetBuffer);
  rawDataReader=new FixedBitSingleValueReader(rawDataBuffer,totalNumValues,columnSizeInBits,signed);
}
