{
  final Map<String,Map<Object,Integer>> cardinalityCountsMap=new HashMap<String,Map<Object,Integer>>();
  final Map<String,Map<Object,Map<String,Double>>> sumMap=new HashMap<String,Map<Object,Map<String,Double>>>();
  final Map<String,Map<Object,Double>> sumGroupBy=new HashMap<String,Map<Object,Double>>();
  aggregationQueries=new ArrayList<AvroQueryGenerator.TestSimpleAggreationQuery>();
  groupByQueries=new ArrayList<AvroQueryGenerator.TestGroupByAggreationQuery>();
  for (  final Field f : schema.getFields()) {
    final String fieldName=f.name();
    if (dimensions.contains(fieldName) || metrics.contains(fieldName) || time.equals(fieldName)) {
      isSingleValueMap.put(fieldName,isSingleValueField(f));
      dataTypeMap.put(fieldName,getColumnType(f));
      if (!metrics.contains(fieldName)) {
        cardinalityCountsMap.put(fieldName,new HashMap<Object,Integer>());
      }
    }
  }
  for (  final String column : cardinalityCountsMap.keySet()) {
    sumMap.put(column,new HashMap<Object,Map<String,Double>>());
  }
  while (dataStream.hasNext()) {
    final GenericRecord record=dataStream.next();
    for (    final String column : cardinalityCountsMap.keySet()) {
      Object value=record.get(column);
      if (value == null) {
switch (schema.getField(column).schema().getType()) {
case INT:
          value=0;
        break;
case FLOAT:
      value=0F;
    break;
case LONG:
  value=0L;
break;
case DOUBLE:
value=0D;
break;
case STRING:
case BOOLEAN:
value="null";
break;
}
}
if (value instanceof Utf8) {
value=((Utf8)value).toString();
}
if (value instanceof Array) {
continue;
}
for (final String metricName : metrics) {
final String groupbyKeyBase=column + ":" + record.get(column)+ ":"+ metricName;
int dimCounter=1;
for (final String dim : cardinalityCountsMap.keySet()) {
if (!dim.equals(column)) {
dimCounter++;
final String groupbyKey=groupbyKeyBase + ":" + dim;
if (sumGroupBy.containsKey(groupbyKey)) {
if (sumGroupBy.get(groupbyKey).containsKey(record.get(dim))) {
sumGroupBy.get(groupbyKey).put(record.get(dim),getAppropriateNumberType(metricName,record.get(metricName),sumGroupBy.get(groupbyKey).get(record.get(dim))));
}
 else {
sumGroupBy.get(groupbyKey).put(record.get(dim),Double.parseDouble(record.get(metricName).toString()));
}
}
 else {
sumGroupBy.put(groupbyKey,new HashMap<Object,Double>());
sumGroupBy.get(groupbyKey).put(record.get(dim),Double.parseDouble(record.get(metricName).toString()));
}
}
if (dimCounter == 4) {
break;
}
}
}
if (cardinalityCountsMap.get(column).containsKey(value)) {
cardinalityCountsMap.get(column).put(value,cardinalityCountsMap.get(column).get(value) + 1);
}
 else {
cardinalityCountsMap.get(column).put(value,1);
}
if (!sumMap.get(column).containsKey(value)) {
sumMap.get(column).put(value,new HashMap<String,Double>());
}
for (final String metric : metrics) {
if (!sumMap.get(column).get(value).containsKey(metric)) {
sumMap.get(column).get(value).put(metric,getAppropriateNumberType(metric,record.get(metric),0D));
}
 else {
sumMap.get(column).get(value).put(metric,getAppropriateNumberType(metric,record.get(metric),sumMap.get(column).get(value).get(metric)));
}
}
}
}
dataStream.close();
if (!isRealtimeSegment) {
for (final String column : cardinalityCountsMap.keySet()) {
for (final Object entry : cardinalityCountsMap.get(column).keySet()) {
final StringBuilder bld=new StringBuilder();
bld.append("select count(*) from ");
bld.append(resourceName);
bld.append(" where ");
bld.append(column);
bld.append("=");
bld.append("'");
bld.append(entry);
bld.append("'");
bld.append(" ");
bld.append("limit 0");
String queryString=bld.toString();
if (!queryString.contains("null")) {
aggregationQueries.add(new TestSimpleAggreationQuery(queryString,new Double(cardinalityCountsMap.get(column).get(entry))));
}
}
}
}
for (final String column : sumMap.keySet()) {
for (final Object value : sumMap.get(column).keySet()) {
for (final String metric : sumMap.get(column).get(value).keySet()) {
final StringBuilder bld=new StringBuilder();
bld.append("select sum('" + metric + "') from ");
bld.append(resourceName);
bld.append(" where ");
bld.append(column);
bld.append("=");
bld.append("'");
bld.append(value);
bld.append("'");
bld.append(" ");
bld.append("limit 0");
String queryString=bld.toString();
if (!queryString.contains("null")) {
aggregationQueries.add(new TestSimpleAggreationQuery(bld.toString(),sumMap.get(column).get(value).get(metric)));
}
}
}
}
for (final String groupKey : sumGroupBy.keySet()) {
final String columnName=groupKey.split(":")[0];
final String columnValue=groupKey.split(":")[1];
final String metricColumn=groupKey.split(":")[2];
final String groupByColumnName=groupKey.split(":")[3];
final StringBuilder bld=new StringBuilder();
bld.append("select sum('" + metricColumn + "') from ");
bld.append(resourceName);
bld.append(" where ");
bld.append(columnName);
bld.append("=");
bld.append("'");
bld.append(columnValue);
bld.append("'");
bld.append(" ");
bld.append(" group by ");
bld.append(groupByColumnName);
bld.append(" top 10 ");
bld.append("limit 0");
String queryString=bld.toString();
if (!queryString.contains("null")) {
groupByQueries.add(new TestGroupByAggreationQuery(bld.toString(),sumGroupBy.get(groupKey)));
}
}
}
