{
  this.nodeId=nodeId;
  this.config=config;
  this.dimensionSpecs=config.getDimensions();
  this.metricSpecs=config.getMetrics();
  this.bufferSize=bufferSize;
  this.useDirect=useDirect;
  this.targetLoadFactor=targetLoadFactor;
  this.nextValueId=new AtomicInteger(StarTreeConstants.FIRST_VALUE);
  this.sync=new Object();
  this.recordCount=new AtomicInteger(0);
  this.metricSchema=MetricSchema.fromMetricSpecs(config.getMetrics());
  int metricSize=0;
  for (  MetricSpec spec : metricSpecs) {
    metricSize+=spec.getType().byteSize();
  }
  this.metricSize=metricSize;
  this.forwardIndex=new HashMap<String,Map<String,Integer>>();
  this.reverseIndex=new HashMap<String,Map<Integer,String>>();
  for (  DimensionSpec dimensionSpec : dimensionSpecs) {
    Map<String,Integer> forward=new HashMap<String,Integer>();
    forward.put(StarTreeConstants.STAR,StarTreeConstants.STAR_VALUE);
    forward.put(StarTreeConstants.OTHER,StarTreeConstants.OTHER_VALUE);
    getForwardIndex().put(dimensionSpec.getName(),forward);
    Map<Integer,String> reverse=new HashMap<Integer,String>();
    reverse.put(StarTreeConstants.STAR_VALUE,StarTreeConstants.STAR);
    reverse.put(StarTreeConstants.OTHER_VALUE,StarTreeConstants.OTHER);
    reverseIndex.put(dimensionSpec.getName(),reverse);
  }
  this.minTime=new AtomicLong(-1);
  this.maxTime=new AtomicLong(-1);
}
