{
  final AnomalyFunctionSpecDAO anomalyFunctionSpecDAO=new AnomalyFunctionSpecDAO(hibernate.getSessionFactory());
  final AnomalyResultDAO anomalyResultDAO=new AnomalyResultDAO(hibernate.getSessionFactory());
  final ContextualEventDAO contextualEventDAO=new ContextualEventDAO(hibernate.getSessionFactory());
  final EmailConfigurationDAO emailConfigurationDAO=new EmailConfigurationDAO(hibernate.getSessionFactory());
  final AnomalyFunctionRelationDAO anomalyFunctionRelationDAO=new AnomalyFunctionRelationDAO(hibernate.getSessionFactory());
  final ThirdEyeClient thirdEyeClient=new DefaultThirdEyeClientFactory().getClient(config.getThirdEyeHost(),config.getThirdEyePort());
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
    }
    @Override public void stop() throws Exception {
      thirdEyeClient.close();
    }
  }
);
  SchedulerFactory schedulerFactory=new StdSchedulerFactory();
  final Scheduler quartzScheduler=schedulerFactory.getScheduler();
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      LOG.info("Starting Quartz scheduler");
      quartzScheduler.start();
    }
    @Override public void stop() throws Exception {
      LOG.info("Stopping Quartz scheduler");
      quartzScheduler.shutdown();
    }
  }
);
  final AnomalyFunctionFactory anomalyFunctionFactory=new AnomalyFunctionFactory(config.getFunctionConfigPath());
  final AnomalyDetectionJobManager jobManager=new AnomalyDetectionJobManager(quartzScheduler,thirdEyeClient,anomalyFunctionSpecDAO,anomalyFunctionRelationDAO,anomalyResultDAO,hibernate.getSessionFactory(),environment.metrics(),anomalyFunctionFactory);
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      new HibernateSessionWrapper<Void>(hibernate.getSessionFactory()).execute(new Callable<Void>(){
        @Override public Void call() throws Exception {
          List<AnomalyFunctionSpec> functions;
          functions=anomalyFunctionSpecDAO.findAll();
          LinkedList<AnomalyFunctionSpec> failedToStart=new LinkedList<AnomalyFunctionSpec>();
          for (          AnomalyFunctionSpec function : functions) {
            if (function.getIsActive()) {
              try {
                LOG.info("Starting {}",function);
                jobManager.start(function.getId());
              }
 catch (              Exception e) {
                LOG.error("Failed to schedule function " + function.getId(),e);
                failedToStart.add(function);
              }
            }
          }
          if (!failedToStart.isEmpty()) {
            LOG.warn("{} functions failed to start!: {}",failedToStart.size(),failedToStart);
          }
          return null;
        }
      }
);
    }
    @Override public void stop() throws Exception {
    }
  }
);
  final AtomicInteger applicationPort=new AtomicInteger(-1);
  int dropwizardConfigPort=getApplicationPortNumber(config);
  LOG.info("Dropwizard config port: {}",dropwizardConfigPort);
  if (dropwizardConfigPort > 0) {
    applicationPort.set(dropwizardConfigPort);
  }
  final EmailReportJobManager emailReportJobManager=new EmailReportJobManager(quartzScheduler,emailConfigurationDAO,anomalyResultDAO,hibernate.getSessionFactory(),applicationPort);
  environment.lifecycle().addServerLifecycleListener(new ServerLifecycleListener(){
    @Override public void serverStarted(    Server server){
      LOG.info("{} server connectors found",server.getConnectors().length);
      for (      Connector connector : server.getConnectors()) {
        LOG.info("Connector: {}",connector.getName());
        if (connector instanceof ServerConnector) {
          ServerConnector serverConnector=(ServerConnector)connector;
          int localPort=serverConnector.getLocalPort();
          applicationPort.set(localPort);
          LOG.info("application port set to {} from server connector",localPort);
          break;
        }
 else         if (connector instanceof AbstractNetworkConnector) {
          AbstractNetworkConnector networkConnector=(AbstractNetworkConnector)connector;
          int localPort=networkConnector.getLocalPort();
          applicationPort.set(localPort);
          LOG.info("application port set to {} from network connector",localPort);
          break;
        }
      }
      LOG.info("Port from jetty server: {}",applicationPort.get());
      if (applicationPort.get() == -1) {
        throw new IllegalStateException("Could not determine application port");
      }
      try {
        new HibernateSessionWrapper<Void>(hibernate.getSessionFactory()).execute(new Callable<Void>(){
          @Override public Void call() throws Exception {
            LOG.info("Starting email report job manager");
            emailReportJobManager.start();
            return null;
          }
        }
);
      }
 catch (      Exception e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  environment.jersey().register(new AnomalyFunctionSpecResource(anomalyFunctionSpecDAO));
  environment.jersey().register(new AnomalyFunctionRelationResource(anomalyFunctionRelationDAO));
  environment.jersey().register(new AnomalyResultResource(anomalyResultDAO));
  environment.jersey().register(new ContextualEventResource(contextualEventDAO));
  environment.jersey().register(new MetricsGraphicsTimeSeriesResource(thirdEyeClient,anomalyResultDAO));
  environment.jersey().register(new AnomalyDetectionJobResource(jobManager,anomalyFunctionSpecDAO));
  environment.jersey().register(new EmailReportResource(emailConfigurationDAO,emailReportJobManager));
  environment.admin().addTask(new EmailReportJobManagerTask(emailReportJobManager,hibernate.getSessionFactory()));
}
