{
  Path inputPath=new Path(args[0]);
  Path configPath=new Path(args[1]);
  String outputDir=args[2];
  Path outputPath=new Path(outputDir);
  SequenceFile.Reader reader=new SequenceFile.Reader(new Configuration(),Reader.file(inputPath));
  System.out.println(reader.getKeyClass());
  System.out.println(reader.getValueClassName());
  WritableComparable<?> key=(WritableComparable<?>)reader.getKeyClass().newInstance();
  Writable val=(Writable)reader.getValueClass().newInstance();
  FileSystem fs=FileSystem.get(new Configuration());
  StarTreeGenerationConfig config=new ObjectMapper().readValue(fs.open(configPath),StarTreeGenerationConfig.class);
  String collectionName=config.getCollectionName();
  String timeColumnName=config.getTimeColumnName();
  List<String> splitOrder=config.getSplitOrder();
  int maxRecordStoreEntries=config.getSplitThreshold();
  List<String> dimensionNames=config.getDimensionNames();
  List<String> metricNames=config.getMetricNames();
  String recordStoreFactoryClass="com.linkedin.thirdeye.impl.StarTreeRecordStoreFactoryCircularBufferImpl";
  Properties recordStoreFactoryConfig=new Properties();
  recordStoreFactoryConfig.setProperty("numTimeBuckets","672");
  System.out.println(outputPath.toUri().toString());
  recordStoreFactoryConfig.setProperty("rootDir","");
  StarTreeConfig starTreeConfig=new StarTreeConfig.Builder().setCollection(collectionName).setDimensionNames(dimensionNames).setMetricNames(metricNames).setTimeColumnName(timeColumnName).setMaxRecordStoreEntries(maxRecordStoreEntries).build();
  System.out.println(starTreeConfig.toJson());
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  StarTreeManager starTreeManager=new StarTreeManagerImpl(executorService);
  starTreeManager.registerConfig(collectionName,starTreeConfig);
  starTreeManager.create(collectionName);
  starTreeManager.open(collectionName);
  int rowCount=0;
  StarTree starTree=starTreeManager.getStarTree(collectionName);
  while (reader.next(key,val)) {
    BytesWritable writable=(BytesWritable)key;
    DimensionKey dimensionKey=DimensionKey.fromBytes(writable.getBytes());
    System.out.println(dimensionKey);
    Map<String,String> dimensionValuesMap=new HashMap<String,String>();
    for (int i=0; i < dimensionNames.size(); i++) {
      dimensionValuesMap.put(dimensionNames.get(i),dimensionKey.getDimensionsValues()[i]);
    }
    Map<String,Integer> metricValuesMap=new HashMap<String,Integer>();
    for (int i=0; i < metricNames.size(); i++) {
      metricValuesMap.put(metricNames.get(i),0);
    }
    Long time=0l;
    StarTreeRecord record=new StarTreeRecordImpl(dimensionValuesMap,metricValuesMap,time);
    starTree.add(record);
    rowCount=rowCount + 1;
  }
  System.out.println("Number of records added:" + rowCount);
  PrintWriter printWriter=new PrintWriter(System.out);
  StarTreeNode root=starTree.getRoot();
  StarTreeDumperTool tool=new StarTreeDumperTool(root,printWriter);
  tool.print();
  StarTreePersistanceUtil.saveTree(starTree,outputDir);
  StarTreePersistanceUtil.saveLeafDimensionData(starTree,outputDir);
}
