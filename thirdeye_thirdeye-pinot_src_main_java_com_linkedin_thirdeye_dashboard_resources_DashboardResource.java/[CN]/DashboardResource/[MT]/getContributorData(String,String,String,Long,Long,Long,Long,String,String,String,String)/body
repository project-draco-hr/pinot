{
  ContributorViewRequest request=new ContributorViewRequest();
  request.setCollection(collection);
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(metricsJson,collection);
  request.setMetricExpressions(metricExpressions);
  long maxDataTime=queryCache.getClient().getMaxDataTime(collection);
  if (currentEnd > maxDataTime) {
    long delta=currentEnd - maxDataTime;
    currentEnd=currentEnd - delta;
    baselineEnd=baselineEnd - delta;
  }
  request.setBaselineStart(new DateTime(baselineStart,DateTimeZone.forID(timeZone)));
  request.setBaselineEnd(new DateTime(baselineEnd,DateTimeZone.forID(timeZone)));
  request.setCurrentStart(new DateTime(currentStart,DateTimeZone.forID(timeZone)));
  request.setCurrentEnd(new DateTime(currentEnd,DateTimeZone.forID(timeZone)));
  if (filterJson != null && !filterJson.isEmpty()) {
    filterJson=URLDecoder.decode(filterJson,"UTF-8");
    request.setFilters(Utils.convertToMultiMap(filterJson));
  }
  request.setTimeGranularity(Utils.getAggregationTimeGranularity(aggTimeGranularity));
  if (groupByDimensions != null && !groupByDimensions.isEmpty()) {
    request.setGroupByDimensions(Arrays.asList(groupByDimensions.trim().split(",")));
  }
  ContributorViewHandler handler=new ContributorViewHandler(queryCache);
  String jsonResponse=null;
  try {
    ContributorViewResponse response=handler.process(request);
    jsonResponse=OBJECT_MAPPER.enable(SerializationFeature.INDENT_OUTPUT).writeValueAsString(response);
    LOG.debug("Contributor response {}",jsonResponse);
  }
 catch (  Exception e) {
    LOG.error("Exception while processing /data/tabular call",e);
  }
  return jsonResponse;
}
