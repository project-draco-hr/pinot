{
  HeatMapViewRequest request=new HeatMapViewRequest();
  request.setCollection(collection);
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(metricsJson,collection);
  request.setMetricExpressions(metricExpressions);
  long maxDataTime=CACHE_REGISTRY_INSTANCE.getCollectionMaxDataTimeCache().get(collection);
  if (currentEnd > maxDataTime) {
    long delta=currentEnd - maxDataTime;
    currentEnd=currentEnd - delta;
    baselineEnd=baselineEnd - delta;
  }
  request.setBaselineStart(new DateTime(baselineStart,DateTimeZone.forID(timeZone)));
  request.setBaselineEnd(new DateTime(baselineEnd,DateTimeZone.forID(timeZone)));
  request.setCurrentStart(new DateTime(currentStart,DateTimeZone.forID(timeZone)));
  request.setCurrentEnd(new DateTime(currentEnd,DateTimeZone.forID(timeZone)));
  if (filterJson != null && !filterJson.isEmpty()) {
    filterJson=URLDecoder.decode(filterJson,"UTF-8");
    request.setFilters(ThirdEyeUtils.convertToMultiMap(filterJson));
  }
  HeatMapViewHandler handler=new HeatMapViewHandler(queryCache);
  HeatMapViewResponse response;
  String jsonResponse=null;
  try {
    response=handler.process(request);
    jsonResponse=OBJECT_MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(response);
    LOG.debug("Heatmap response {}",jsonResponse);
  }
 catch (  Exception e) {
    LOG.error("Error generating heatmap response",e);
  }
  return jsonResponse;
}
