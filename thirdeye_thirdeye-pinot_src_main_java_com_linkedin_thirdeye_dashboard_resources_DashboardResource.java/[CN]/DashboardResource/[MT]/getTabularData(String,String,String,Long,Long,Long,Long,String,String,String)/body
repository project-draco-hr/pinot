{
  TabularViewRequest request=new TabularViewRequest();
  request.setCollection(collection);
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(metricsJson);
  request.setMetricExpressions(metricExpressions);
  long maxDataTime=queryCache.getClient().getMaxDataTime(collection);
  if (currentEnd > maxDataTime) {
    long delta=currentEnd - maxDataTime;
    currentEnd=currentEnd - delta;
    baselineEnd=baselineEnd - delta;
  }
  request.setBaselineStart(new DateTime(baselineStart,DateTimeZone.forID(timeZone)));
  request.setBaselineEnd(new DateTime(baselineEnd,DateTimeZone.forID(timeZone)));
  request.setCurrentStart(new DateTime(currentStart,DateTimeZone.forID(timeZone)));
  request.setCurrentEnd(new DateTime(currentEnd,DateTimeZone.forID(timeZone)));
  if (filterJson != null && !filterJson.isEmpty()) {
    filterJson=URLDecoder.decode(filterJson,"UTF-8");
    request.setFilters(Utils.convertToMultiMap(filterJson));
  }
  request.setTimeGranularity(Utils.getAggregationTimeGranularity(aggTimeGranularity));
  TabularViewHandler handler=new TabularViewHandler(queryCache);
  String jsonResponse=null;
  try {
    TabularViewResponse response=handler.process(request);
    jsonResponse=OBJECT_MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(response);
    LOG.debug("Tabular response {}",jsonResponse);
  }
 catch (  Exception e) {
    LOG.error("Exception while processing /data/tabular call",e);
  }
  return jsonResponse;
}
