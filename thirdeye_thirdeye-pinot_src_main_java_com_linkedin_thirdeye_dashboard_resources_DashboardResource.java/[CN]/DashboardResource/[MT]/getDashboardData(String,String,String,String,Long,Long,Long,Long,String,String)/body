{
  try {
    TabularViewRequest request=new TabularViewRequest();
    request.setCollection(collection);
    DashboardConfig dashboardConfig;
    List<MetricExpression> metricExpressions;
    if (dashboardName == null || DEFAULT_DASHBOARD.equals(dashboardName)) {
      CollectionConfig collectionConfig=null;
      try {
        collectionConfig=CACHE_REGISTRY_INSTANCE.getCollectionConfigCache().get(collection);
      }
 catch (      InvalidCacheLoadException e) {
        LOG.debug("No collection configs for collection {}",collection);
      }
      CollectionSchema collectionSchema=CACHE_REGISTRY_INSTANCE.getCollectionSchemaCache().get(collection);
      metricExpressions=new ArrayList<>();
      List<String> metricNames=collectionSchema.getMetricNames();
      for (      String metric : metricNames) {
        if (metric.equals(COUNT_METRIC) && (collectionConfig == null || !collectionConfig.isEnableCount())) {
          continue;
        }
        metricExpressions.add(new MetricExpression(metric));
      }
    }
 else {
      dashboardConfig=dashboardConfigDAO.findById(collection + "_" + dashboardName);
      metricExpressions=dashboardConfig.getMetricExpressions();
    }
    request.setMetricExpressions(metricExpressions);
    long maxDataTime=CACHE_REGISTRY_INSTANCE.getCollectionMaxDataTimeCache().get(collection);
    if (currentEnd > maxDataTime) {
      long delta=currentEnd - maxDataTime;
      currentEnd=currentEnd - delta;
      baselineEnd=baselineEnd - delta;
    }
    request.setBaselineStart(new DateTime(baselineStart,DateTimeZone.forID(timeZone)));
    request.setBaselineEnd(new DateTime(baselineEnd,DateTimeZone.forID(timeZone)));
    request.setCurrentStart(new DateTime(currentStart,DateTimeZone.forID(timeZone)));
    request.setCurrentEnd(new DateTime(currentEnd,DateTimeZone.forID(timeZone)));
    if (filterJson != null && !filterJson.isEmpty()) {
      filterJson=URLDecoder.decode(filterJson,"UTF-8");
      request.setFilters(ThirdEyeUtils.convertToMultiMap(filterJson));
    }
    request.setTimeGranularity(Utils.getAggregationTimeGranularity(aggTimeGranularity));
    TabularViewHandler handler=new TabularViewHandler(queryCache);
    String jsonResponse=null;
    TabularViewResponse response=handler.process(request);
    jsonResponse=OBJECT_MAPPER.enable(SerializationFeature.INDENT_OUTPUT).writeValueAsString(response);
    LOG.debug("customDashboard response {}",jsonResponse);
    return jsonResponse;
  }
 catch (  Exception e) {
    LOG.error("Exception while processing /data/tabular call",e);
    return "{\"ERROR\": + " + e.getMessage() + "}";
  }
}
