{
  List<HeatMapCell> cells=new ArrayList<HeatMapCell>();
  DescriptiveStatistics positiveStats=new DescriptiveStatistics();
  DescriptiveStatistics negativeStats=new DescriptiveStatistics();
  for (  Map.Entry<String,Number> entry : current.entrySet()) {
    Number currentValue=entry.getValue();
    Number baselineValue=baseline.get(entry.getKey());
    if (baselineValue == null || NumberUtils.isZero(baselineValue,metricType)) {
      continue;
    }
    double ratio=(currentValue.doubleValue() - baselineValue.doubleValue()) / baselineValue.doubleValue();
    RGBColor color;
    if (ratio > 0) {
      positiveStats.addValue(ratio);
      color=UP_COLOR;
    }
 else {
      negativeStats.addValue(ratio);
      color=DOWN_COLOR;
    }
    HeatMapCell cell=new HeatMapCell();
    cell.setDimensionValue(entry.getKey());
    cell.setCurrent(currentValue);
    cell.setBaseline(baselineValue);
    cell.setRatio(ratio);
    cell.setColor(color);
    cells.add(cell);
  }
  NormalDistribution positiveDist=positiveStats.getStandardDeviation() > 0 ? new NormalDistribution(positiveStats.getMean(),positiveStats.getStandardDeviation()) : null;
  NormalDistribution negativeDist=negativeStats.getStandardDeviation() > 0 ? new NormalDistribution(negativeStats.getMean(),negativeStats.getStandardDeviation()) : null;
  for (  HeatMapCell cell : cells) {
    if (cell.getRatio() > 0) {
      cell.setAlpha(positiveDist == null ? 0.5 : positiveDist.cumulativeProbability(cell.getRatio()));
    }
 else {
      cell.setAlpha(negativeDist == null ? 0.5 : 1 - negativeDist.cumulativeProbability(cell.getRatio()));
    }
  }
  Collections.sort(cells,new Comparator<HeatMapCell>(){
    @Override public int compare(    HeatMapCell o1,    HeatMapCell o2){
      return (int)((o2.getRatio() - o1.getRatio()) * 100000);
    }
  }
);
  return cells;
}
