{
synchronized (sync) {
    Map<Long,Number[]> allSums=new HashMap<Long,Number[]>();
    Set<Long> timeBuckets=getTimeBuckets(query);
    if (timeBuckets == null) {
      throw new IllegalArgumentException("Must specify time range in query " + query);
    }
    int[] targetDimensions=translateDimensions(query.getDimensionKey());
    int idx=binarySearch(targetDimensions);
    if (idx >= 0) {
      buffer.clear();
      buffer.position(idx + dimensionSize);
      updateAllSums(allSums,timeBuckets);
    }
 else {
      buffer.clear();
      int[] currentDimensions=new int[dimensionSpecs.size()];
      while (buffer.position() < buffer.limit()) {
        buffer.mark();
        getDimensions(currentDimensions);
        if (matches(targetDimensions,currentDimensions)) {
          updateAllSums(allSums,timeBuckets);
        }
        buffer.reset();
        buffer.position(buffer.position() + entrySize);
      }
    }
    MetricTimeSeries timeSeries=new MetricTimeSeries(metricSchema);
    for (    Map.Entry<Long,Number[]> entry : allSums.entrySet()) {
      for (int i=0; i < config.getMetrics().size(); i++) {
        timeSeries.increment(entry.getKey(),config.getMetrics().get(i).getName(),entry.getValue()[i]);
      }
    }
    return timeSeries;
  }
}
