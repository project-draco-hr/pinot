{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.queryType != null) {
    if (struct.isSetQueryType()) {
      oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
      struct.queryType.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.querySource != null) {
    if (struct.isSetQuerySource()) {
      oprot.writeFieldBegin(QUERY_SOURCE_FIELD_DESC);
      struct.querySource.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.timeInterval != null) {
    if (struct.isSetTimeInterval()) {
      oprot.writeFieldBegin(TIME_INTERVAL_FIELD_DESC);
      oprot.writeString(struct.timeInterval);
      oprot.writeFieldEnd();
    }
  }
  if (struct.duration != null) {
    if (struct.isSetDuration()) {
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeString(struct.duration);
      oprot.writeFieldEnd();
    }
  }
  if (struct.filterQuery != null) {
    if (struct.isSetFilterQuery()) {
      oprot.writeFieldBegin(FILTER_QUERY_FIELD_DESC);
      struct.filterQuery.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.aggregationsInfo != null) {
    if (struct.isSetAggregationsInfo()) {
      oprot.writeFieldBegin(AGGREGATIONS_INFO_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.aggregationsInfo.size()));
        for (        AggregationInfo _iter63 : struct.aggregationsInfo) {
          _iter63.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.groupBy != null) {
    if (struct.isSetGroupBy()) {
      oprot.writeFieldBegin(GROUP_BY_FIELD_DESC);
      struct.groupBy.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.selections != null) {
    if (struct.isSetSelections()) {
      oprot.writeFieldBegin(SELECTIONS_FIELD_DESC);
      struct.selections.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.filterSubQueryMap != null) {
    if (struct.isSetFilterSubQueryMap()) {
      oprot.writeFieldBegin(FILTER_SUB_QUERY_MAP_FIELD_DESC);
      struct.filterSubQueryMap.write(oprot);
      oprot.writeFieldEnd();
    }
  }
  if (struct.bucketHashKey != null) {
    if (struct.isSetBucketHashKey()) {
      oprot.writeFieldBegin(BUCKET_HASH_KEY_FIELD_DESC);
      oprot.writeString(struct.bucketHashKey);
      oprot.writeFieldEnd();
    }
  }
  if (struct.isSetEnableTrace()) {
    oprot.writeFieldBegin(ENABLE_TRACE_FIELD_DESC);
    oprot.writeBool(struct.enableTrace);
    oprot.writeFieldEnd();
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
