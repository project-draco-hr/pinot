{
  long start=System.nanoTime();
  if (targetDocId < startDocId) {
    targetDocId=startDocId;
  }
 else   if (targetDocId > endDocId) {
    counter=Constants.EOF;
  }
  if (counter == Constants.EOF) {
    return counter;
  }
  Iterator<IntPair> iterator=queue.iterator();
  while (iterator.hasNext()) {
    IntPair pair=iterator.next();
    if (pair.getA() < targetDocId) {
      iterator.remove();
      exists[pair.getB()]=false;
    }
  }
  for (int i=0; i < iterators.length; i++) {
    if (!exists[i]) {
      int next;
      while (iterators[i].hasNext()) {
        next=iterators[i].next();
        if (next > endDocId) {
          break;
        }
        if (next >= targetDocId) {
          queue.add(new IntPair(next,i));
          break;
        }
      }
      exists[i]=true;
    }
  }
  if (queue.size() > 0) {
    counter=queue.peek().getA();
  }
 else {
    counter=Constants.EOF;
  }
  long end=System.nanoTime();
  timeMeasure.addAndGet(end - start);
  return counter;
}
