{
  System.out.println("Client starting !!");
  try {
    List<ServerInstance> s1=new ArrayList<ServerInstance>();
    ServerInstance s=new ServerInstance("localhost",9099);
    s1.add(s);
    SimpleScatterGatherRequest req=null;
    TimerContext tc=null;
    for (int i=0; i < _numRequests; i++) {
      LOGGER.debug("Sending request number {}",i);
      do {
        req=getRequest();
      }
 while ((null == req));
      if (i == _numRequestsToSkipForMeasurement) {
        tc=MetricsHelper.startTimer();
        _beginFirstRequestTime=System.currentTimeMillis();
      }
      if (i >= _numRequestsToSkipForMeasurement) {
        _numRequestsMeasured++;
      }
      final ScatterGatherStats scatterGatherStats=new ScatterGatherStats();
      if (!_asyncRequestSubmit) {
        sendRequestAndGetResponse(req,scatterGatherStats);
        _endLastResponseTime=System.currentTimeMillis();
      }
 else {
        CompositeFuture<ServerInstance,ByteBuf> future=asyncSendRequestAndGetResponse(req,scatterGatherStats);
        _queue.offer(new QueueEntry(false,i >= _numRequestsToSkipForMeasurement,System.currentTimeMillis(),future));
      }
      req=null;
    }
    if (_asyncRequestSubmit) {
      int numTerminalEntries=_readerThreads.size();
      for (int i=0; i < numTerminalEntries; i++) {
        _queue.offer(new QueueEntry(true,false,System.currentTimeMillis(),null));
      }
      for (      AsyncReader r : _readerThreads) {
        r.join();
      }
    }
    if (null != tc) {
      tc.stop();
      _timerContext=tc;
      System.out.println("Num Requests :" + _numRequestsMeasured);
      System.out.println("Total time :" + tc.getLatencyMs());
      System.out.println("Throughput (Requests/Second) :" + ((_numRequestsMeasured * 1.0 * 1000) / tc.getLatencyMs()));
      System.out.println("Latency :" + new LatencyMetric<Histogram>(_latencyHistogram));
      System.out.println("Scatter-Gather Latency :" + new LatencyMetric<Histogram>(_scatterGather.getLatency()));
    }
  }
 catch (  Exception ex) {
    System.err.println("Client stopped abnormally ");
    ex.printStackTrace();
  }
  shutdown();
  System.out.println("Client done !!");
}
