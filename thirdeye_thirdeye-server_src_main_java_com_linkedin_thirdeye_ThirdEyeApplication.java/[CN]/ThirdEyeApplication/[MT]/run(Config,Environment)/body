{
  final File rootDir=new File(config.getRootDir());
  if (!rootDir.exists()) {
    FileUtils.forceMkdir(rootDir);
  }
  ExecutorService parallelQueryExecutor=environment.lifecycle().executorService("parallel_query_executor").minThreads(Runtime.getRuntime().availableProcessors() / 2).maxThreads(Runtime.getRuntime().availableProcessors() / 2).build();
  ScheduledExecutorService anomalyDetectionTaskScheduler=environment.lifecycle().scheduledExecutorService("anomaly_detection_task_scheduler").build();
  final StarTreeManager starTreeManager=new StarTreeManagerImpl();
  final DataUpdateManager dataUpdateManager=new DataUpdateManager(rootDir);
  final KafkaConsumerManager kafkaConsumerManager=new KafkaConsumerManager(rootDir,starTreeManager,dataUpdateManager,environment.metrics());
  final AnomalyDetectionTaskManager anomalyDetectionTaskManager=new AnomalyDetectionTaskManager(starTreeManager,anomalyDetectionTaskScheduler,config.getAnomalyDetectionInterval(),rootDir);
  environment.lifecycle().manage(anomalyDetectionTaskManager);
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      if (config.isAutoRestore()) {
        String[] collections=rootDir.list();
        if (collections != null) {
          for (          String collection : collections) {
            starTreeManager.restore(rootDir,collection);
          }
        }
        if (config.isAutoConsume()) {
          kafkaConsumerManager.start();
          LOGGER.info("Started kafka consumer manager");
        }
      }
    }
    @Override public void stop() throws Exception {
      try {
        kafkaConsumerManager.stop();
        LOGGER.info("Stopped kafka consumer manager");
      }
 catch (      Exception e) {
        LOGGER.error("{}",e);
      }
      try {
        Set<String> collections=new HashSet<String>(starTreeManager.getCollections());
        for (        String collection : collections) {
          starTreeManager.close(collection);
        }
        LOGGER.info("Closed star tree manager");
      }
 catch (      Exception e) {
        LOGGER.error("{}",e);
      }
    }
  }
);
  environment.healthChecks().register(KafkaDataLagHealthCheck.NAME,new KafkaDataLagHealthCheck(kafkaConsumerManager));
  environment.healthChecks().register(KafkaConsumerLagHealthCheck.NAME,new KafkaConsumerLagHealthCheck(kafkaConsumerManager));
  environment.jersey().register(new CollectionsResource(starTreeManager,environment.metrics(),dataUpdateManager,rootDir));
  environment.jersey().register(new AdminResource());
  environment.jersey().register(new QueryResource(new ThirdEyeQueryExecutor(parallelQueryExecutor,starTreeManager)));
  environment.admin().addTask(new RestoreTask(starTreeManager,rootDir));
  environment.admin().addTask(new KafkaTask(kafkaConsumerManager));
  environment.admin().addTask(new MergeTask(starTreeManager,dataUpdateManager));
}
