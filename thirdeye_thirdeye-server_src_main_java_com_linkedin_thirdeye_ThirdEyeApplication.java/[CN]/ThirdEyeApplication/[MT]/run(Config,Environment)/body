{
  final File rootDir=new File(config.getRootDir());
  if (!rootDir.exists()) {
    FileUtils.forceMkdir(rootDir);
  }
  ExecutorService parallelQueryExecutor=environment.lifecycle().executorService("parallel_query_executor").minThreads(Runtime.getRuntime().availableProcessors()).maxThreads(Runtime.getRuntime().availableProcessors()).build();
  ScheduledExecutorService anomalyDetectionTaskScheduler=environment.lifecycle().scheduledExecutorService("anomaly_detection_task_scheduler").build();
  ExecutorService kafkaConsumerExecutor=environment.lifecycle().executorService("kafka_consumer_executor").minThreads(Runtime.getRuntime().availableProcessors()).maxThreads(Runtime.getRuntime().availableProcessors()).build();
  ScheduledExecutorService kafkaPersistScheduler=environment.lifecycle().scheduledExecutorService("kafka_persist_scheduler").build();
  final StarTreeManager starTreeManager=new StarTreeManagerImpl();
  final KafkaConsumerManager kafkaConsumerManager=new KafkaConsumerManager(starTreeManager,rootDir,kafkaConsumerExecutor,kafkaPersistScheduler,environment.metrics());
  final AnomalyDetectionTaskManager anomalyDetectionTaskManager=new AnomalyDetectionTaskManager(starTreeManager,anomalyDetectionTaskScheduler,config.getAnomalyDetectionInterval());
  environment.lifecycle().manage(anomalyDetectionTaskManager);
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      if (config.isAutoRestore()) {
        String[] collections=rootDir.list();
        if (collections != null) {
          for (          String collection : collections) {
            starTreeManager.restore(rootDir,collection);
            starTreeManager.open(collection);
          }
        }
        if (config.isAutoConsume()) {
          kafkaConsumerManager.start();
          LOG.info("Started kafka consumer manager");
        }
      }
    }
    @Override public void stop() throws Exception {
      try {
        kafkaConsumerManager.stop();
        LOG.info("Stopped kafka consumer manager");
        Set<String> collections=new HashSet<String>(starTreeManager.getCollections());
        for (        String collection : collections) {
          starTreeManager.close(collection);
        }
        LOG.info("Closed star tree manager");
      }
 catch (      IOException e) {
        LOG.error("Caught exception while closing StarTree manager {}",e);
      }
    }
  }
);
  environment.healthChecks().register(CollectionConsistencyHealthCheck.NAME,new CollectionConsistencyHealthCheck(rootDir,starTreeManager));
  environment.healthChecks().register(TimeRangeHealthCheck.NAME,new TimeRangeHealthCheck(rootDir,starTreeManager));
  environment.healthChecks().register(StarTreeHealthCheck.NAME,new StarTreeHealthCheck(rootDir,starTreeManager));
  environment.healthChecks().register(TimeRangeContiguityHealthCheck.NAME,new TimeRangeContiguityHealthCheck(rootDir,starTreeManager));
  environment.healthChecks().register(KafkaDataLagHealthCheck.NAME,new KafkaDataLagHealthCheck(kafkaConsumerManager));
  environment.healthChecks().register(KafkaConsumerLagHealthCheck.NAME,new KafkaConsumerLagHealthCheck(kafkaConsumerManager));
  TimeSeriesResource timeSeriesResource=new TimeSeriesResource(starTreeManager);
  FunnelResource funnelResource=new FunnelResource(starTreeManager);
  HeatMapResource heatMapResource=new HeatMapResource(starTreeManager,parallelQueryExecutor);
  environment.jersey().register(new CollectionsResource(starTreeManager,environment.metrics(),rootDir));
  environment.jersey().register(new AdminResource());
  environment.jersey().register(new AggregateResource(starTreeManager));
  environment.jersey().register(new PingResource());
  environment.jersey().register(timeSeriesResource);
  environment.jersey().register(funnelResource);
  environment.jersey().register(heatMapResource);
  environment.jersey().register(new DashboardResource(starTreeManager,timeSeriesResource,funnelResource,heatMapResource,config.getFeedbackAddress()));
  environment.admin().addTask(new RestoreTask(starTreeManager,rootDir));
  environment.admin().addTask(new ExpireTask(starTreeManager,rootDir));
  environment.admin().addTask(new ViewTreeTask(starTreeManager));
  environment.admin().addTask(new ViewDimensionIndexTask(rootDir));
  environment.admin().addTask(new ViewMetricIndexTask(rootDir));
  environment.admin().addTask(new KafkaStartTask(kafkaConsumerManager));
  environment.admin().addTask(new KafkaStopTask(kafkaConsumerManager));
}
