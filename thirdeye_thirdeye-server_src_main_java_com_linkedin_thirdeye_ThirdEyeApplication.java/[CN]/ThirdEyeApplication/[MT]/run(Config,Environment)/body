{
  final File rootDir=new File(config.getRootDir());
  if (!rootDir.exists()) {
    FileUtils.forceMkdir(rootDir);
  }
  ExecutorService parallelQueryExecutor=environment.lifecycle().executorService("parallel_query_executor").minThreads(Runtime.getRuntime().availableProcessors()).maxThreads(Runtime.getRuntime().availableProcessors()).build();
  ScheduledExecutorService anomalyDetectionTaskScheduler=environment.lifecycle().scheduledExecutorService("anomaly_detection_task_scheduler").build();
  final StarTreeManager starTreeManager=new StarTreeManagerImpl();
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      if (config.isAutoRestore()) {
        String[] collections=rootDir.list();
        if (collections != null) {
          for (          String collection : collections) {
            starTreeManager.restore(rootDir,collection);
            starTreeManager.open(collection);
          }
        }
      }
    }
    @Override public void stop() throws Exception {
      try {
        for (        String collection : starTreeManager.getCollections()) {
          starTreeManager.close(collection);
        }
        LOG.info("Closed star tree manager");
      }
 catch (      IOException e) {
        LOG.error("Caught exception while closing StarTree manager {}",e);
      }
    }
  }
);
  final AnomalyDetectionTaskManager anomalyDetectionTaskManager=new AnomalyDetectionTaskManager(starTreeManager,anomalyDetectionTaskScheduler,config.getAnomalyDetectionInterval());
  environment.lifecycle().manage(anomalyDetectionTaskManager);
  final KafkaConsumerManager kafkaConsumerManager=new KafkaConsumerManager(starTreeManager,rootDir,config.getKafkaZooKeeperAddress(),config.getKafkaGroupIdSuffix());
  environment.lifecycle().manage(kafkaConsumerManager);
  environment.healthChecks().register(CollectionConsistencyHealthCheck.NAME,new CollectionConsistencyHealthCheck(rootDir,starTreeManager));
  environment.jersey().register(new MetricsResource(starTreeManager));
  environment.jersey().register(new DimensionsResource(starTreeManager));
  environment.jersey().register(new CollectionsResource(starTreeManager,environment.metrics(),rootDir));
  environment.jersey().register(new TimeSeriesResource(starTreeManager));
  environment.jersey().register(new HeatMapResource(starTreeManager,parallelQueryExecutor));
  environment.jersey().register(new PingResource());
  environment.jersey().register(new DashboardResource(starTreeManager));
  environment.jersey().register(new ComponentsResource(starTreeManager,parallelQueryExecutor));
  environment.admin().addTask(new RestoreTask(starTreeManager,rootDir));
  environment.admin().addTask(new ResetTask(anomalyDetectionTaskManager,kafkaConsumerManager));
  environment.admin().addTask(new ExpireTask(starTreeManager,rootDir));
  environment.admin().addTask(new ViewTreeTask(starTreeManager));
  environment.admin().addTask(new ViewDimensionIndexTask(rootDir));
  environment.admin().addTask(new ViewMetricIndexTask(rootDir));
}
