{
  final int numSegments=20;
  setupSegmentList(numSegments);
  final PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  final BrokerRequest brokerRequest=getSelectionNoFilterBrokerRequest1();
  final ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  final Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(_indexSegmentList,brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  final DataTable instanceResponse=globalPlan.getInstanceResponse();
  System.out.println("instanceResponse : " + instanceResponse);
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
  final BrokerReduceService reduceService=new BrokerReduceService();
  final BrokerResponseNative brokerResponse=reduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  SelectionResults selectionResults=brokerResponse.getSelectionResults();
  List<String> columns=selectionResults.getColumns();
  Assert.assertEquals(columns.get(0),"column12");
  Assert.assertEquals(columns.get(1),"met_impressionCount");
  Assert.assertEquals(columns.get(2),"column11");
  List<Serializable[]> rows=selectionResults.getRows();
  for (int i=0; i < rows.size(); ++i) {
    Serializable[] row=rows.get(i);
    Assert.assertEquals(row.length,3);
    Assert.assertEquals(row[2],"i");
  }
  final BrokerReduceService brokerReduceService=new BrokerReduceService();
  final BrokerResponseNative brokerResponseNative=brokerReduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  System.out.println("Selection Result : " + brokerResponseNative.getSelectionResults().toString());
  System.out.println("Time used : " + brokerResponseNative.getTimeUsedMs());
  selectionResults=brokerResponseNative.getSelectionResults();
  List<String> columnArray=selectionResults.getColumns();
  Assert.assertEquals(columnArray.size(),3);
  Assert.assertEquals(columnArray.get(0),"column12");
  Assert.assertEquals(columnArray.get(1),"met_impressionCount");
  Assert.assertEquals(columnArray.get(2),"column11");
  List<Serializable[]> resultRows=selectionResults.getRows();
  Assert.assertEquals(resultRows.size(),10);
  for (int i=0; i < resultRows.size(); ++i) {
    Serializable[] resultRow=resultRows.get(i);
    Assert.assertEquals(resultRow.length,3);
    Serializable[] expectedValues=rows.get(i);
    Assert.assertEquals(resultRow[0],expectedValues[0]);
    Assert.assertEquals(resultRow[1],expectedValues[1]);
    Assert.assertEquals(resultRow[2],expectedValues[2]);
  }
}
