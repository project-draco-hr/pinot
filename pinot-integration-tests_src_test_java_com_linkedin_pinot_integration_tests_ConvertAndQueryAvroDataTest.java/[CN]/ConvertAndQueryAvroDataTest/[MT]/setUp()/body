{
  startZk();
  startController();
  startBroker();
  startOfflineServer();
  createResource("myresource");
  addTableToResource("myresource","mytable");
  TarGzCompressionUtils.unTar(new File(TestUtils.getFileFromResourceUrl(ConvertAndQueryAvroDataTest.class.getClassLoader().getResource("On_Time_On_Time_Performance_2014_100k_subset.tar.gz"))),new File("/tmp/ConvertAndQueryAvroDataTest"));
  _tmpDir.mkdirs();
  System.out.println("Building " + SEGMENT_COUNT + " segments in parallel");
  ExecutorService executor=Executors.newCachedThreadPool();
  for (int i=1; i <= SEGMENT_COUNT; ++i) {
    final int segmentNumber=i;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          System.out.println("Starting to build segment " + segmentNumber);
          File outputDir=new File(_tmpDir,"segment-" + segmentNumber);
          final SegmentGeneratorConfig genConfig=SegmentTestUtils.getSegmentGenSpecWithSchemAndProjectedColumns(new File("/tmp/ConvertAndQueryAvroDataTest/On_Time_On_Time_Performance_2014_" + segmentNumber + ".avro"),outputDir,"daysSinceEpoch",TimeUnit.DAYS,"myresource","mytable");
          genConfig.setSegmentNamePostfix(Integer.toString(segmentNumber));
          final SegmentIndexCreationDriver driver=SegmentCreationDriverFactory.get(null);
          driver.init(genConfig);
          driver.build();
          TarGzCompressionUtils.createTarGzOfDirectory(outputDir.getAbsolutePath() + "/myresource_mytable_" + segmentNumber,new File(outputDir.getParent(),"myresource_mytable_" + segmentNumber).getAbsolutePath());
          System.out.println("Completed segment " + segmentNumber);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  executor.shutdown();
  executor.awaitTermination(10,TimeUnit.MINUTES);
  final CountDownLatch latch=new CountDownLatch(1);
  HelixManager manager=HelixManagerFactory.getZKHelixManager(getHelixClusterName(),"test_instance",InstanceType.SPECTATOR,ZkTestUtils.DEFAULT_ZK_STR);
  manager.connect();
  manager.addExternalViewChangeListener(new ExternalViewChangeListener(){
    @Override public void onExternalViewChange(    List<ExternalView> externalViewList,    NotificationContext changeContext){
      for (      ExternalView externalView : externalViewList) {
        if (externalView.getId().contains("myresource")) {
          Set<String> partitionSet=externalView.getPartitionSet();
          if (partitionSet.size() == SEGMENT_COUNT) {
            int onlinePartitionCount=0;
            for (            String partitionId : partitionSet) {
              Map<String,String> partitionStateMap=externalView.getStateMap(partitionId);
              if (partitionStateMap.containsValue("ONLINE")) {
                onlinePartitionCount++;
              }
            }
            if (onlinePartitionCount == SEGMENT_COUNT) {
              System.out.println("Got " + SEGMENT_COUNT + " online resources, unlatching the main thread");
              latch.countDown();
            }
          }
        }
      }
    }
  }
);
  for (int i=1; i <= SEGMENT_COUNT; ++i) {
    System.out.println("Uploading segment " + i);
    File file=new File(_tmpDir,"myresource_mytable_" + i);
    FileUploadUtils.sendFile("localhost","8998","myresource_mytable_" + i,new FileInputStream(file),file.length());
  }
  latch.await();
}
