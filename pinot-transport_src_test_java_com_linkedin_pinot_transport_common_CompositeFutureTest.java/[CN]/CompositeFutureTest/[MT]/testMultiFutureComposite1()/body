{
  List<String> keys=new ArrayList<String>();
  int numFutures=100;
  Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
  Map<String,String> expectedMessages=new HashMap<String,String>();
  for (int i=0; i < numFutures; i++) {
    String key="key_" + i;
    keys.add(key);
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key,"");
    futureMap.put(key,future);
  }
  CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("test",GatherModeOnError.AND);
  compositeFuture.start(futureMap.values());
  ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
  ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
  compositeFuture.addListener(listener,null);
  ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
  executor.execute(runner);
  runner.waitForAboutToGet();
  Thread.sleep(100);
  for (int i=0; i < numFutures; i++) {
    String message="dummy Message_" + i;
    String k="key_" + i;
    AsyncResponseFuture<String,String> future=(AsyncResponseFuture<String,String>)futureMap.get(k);
    future.onSuccess(message);
    expectedMessages.put(k,message);
  }
  runner.waitForDone();
  Assert.assertFalse(runner.isCancelled(),"Composite Cancelled ?");
  Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
  Assert.assertTrue(runner.getError().isEmpty(),"Composite No Error :");
  Map<String,String> runnerResponse=runner.getMessage();
  Map<String,String> listenerResponse=listener.getMessage();
  for (int i=0; i < numFutures; i++) {
    String k="key_" + i;
    AsyncResponseFuture<String,String> future=(AsyncResponseFuture<String,String>)futureMap.get(k);
    Assert.assertFalse(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    Assert.assertEquals(future.getOne(),expectedMessages.get(k),"Reponse :");
    Assert.assertNull(future.getError(),"No Error :");
    Assert.assertEquals(runnerResponse.get(k),expectedMessages.get(k),"Message_" + i);
    Assert.assertEquals(listenerResponse.get(k),expectedMessages.get(k),"Message_" + i);
  }
  Assert.assertFalse(listener.isCancelled(),"listener Cancelled ?");
  Assert.assertTrue(listener.isDone(),"listener Is Done ? ");
  Assert.assertTrue(listener.getError().isEmpty(),"listener No Error :");
  executor.shutdown();
}
