{
  StringRepresentation presentation;
  if (type == null) {
    presentation=new StringRepresentation("Not specify the type for the tenant name. Please try to append:" + "/?type=SERVER or /?type=BROKER ");
  }
 else {
    TenantRole tenantRole=TenantRole.valueOf(type.toUpperCase());
    PinotResourceManagerResponse res=null;
switch (tenantRole) {
case BROKER:
      if (_pinotHelixResourceManager.isBrokerTenantDeletable(tenantName)) {
        res=_pinotHelixResourceManager.deleteBrokerTenantFor(tenantName);
      }
 else {
        res=new PinotResourceManagerResponse();
        res.status=ResponseStatus.failure;
        res.message="Broker Tenant is not null, cannot delete it.";
      }
    break;
case SERVER:
  if (_pinotHelixResourceManager.isServerTenantDeletable(tenantName)) {
    res=_pinotHelixResourceManager.deleteOfflineServerTenantFor(tenantName);
    if (res.isSuccessful()) {
      res=_pinotHelixResourceManager.deleteRealtimeServerTenantFor(tenantName);
    }
  }
 else {
    res=new PinotResourceManagerResponse();
    res.status=ResponseStatus.failure;
    res.message="Server Tenant is not null, cannot delete it.";
  }
break;
default :
break;
}
presentation=new StringRepresentation(res.toString());
}
return presentation;
}
