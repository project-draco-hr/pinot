{
  this.config=config;
  this.createStarTree=config.isEnableStarTreeIndex();
  recordReader=reader;
  recordReader.init();
  dataSchema=recordReader.getSchema();
  enableHllIndex=config.getHllConfig().isEnableHllIndex();
  if (enableHllIndex && !createStarTree) {
    LOGGER.warn("Hll configuration works only with star tree. " + "Star Tree generation is not specified. " + "This will not add derived hll fields.");
    config.getHllConfig().setEnableHllIndex(false);
    enableHllIndex=false;
  }
  addDerivedFieldsInSchema();
  extractor=(PlainFieldExtractor)FieldExtractorFactory.getPlainFieldExtractor(dataSchema);
  statsCollector=new SegmentPreIndexStatsCollectorImpl(recordReader.getSchema());
  statsCollector.init();
  segmentIndexCreationInfo=new SegmentIndexCreationInfo();
  indexCreationInfoMap=new HashMap<String,ColumnIndexCreationInfo>();
  indexCreator=new SegmentColumnarIndexCreator();
  final File indexDir=new File(config.getOutDir());
  if (!indexDir.exists()) {
    indexDir.mkdirs();
  }
  tempIndexDir=new File(indexDir,com.linkedin.pinot.common.utils.FileUtils.getRandomFileName());
  starTreeTempDir=new File(indexDir,com.linkedin.pinot.common.utils.FileUtils.getRandomFileName());
  LOGGER.debug("tempIndexDir:{}",tempIndexDir);
  LOGGER.debug("starTreeTempDir:{}",starTreeTempDir);
}
