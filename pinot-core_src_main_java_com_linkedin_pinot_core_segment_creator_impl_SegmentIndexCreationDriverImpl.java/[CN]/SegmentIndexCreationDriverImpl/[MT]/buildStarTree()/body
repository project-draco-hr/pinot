{
  long start=System.currentTimeMillis();
  StarTreeIndexSpec starTreeIndexSpec=config.getStarTreeIndexSpec();
  if (starTreeIndexSpec == null) {
    starTreeIndexSpec=new StarTreeIndexSpec();
    starTreeIndexSpec.setMaxLeafRecords(StarTreeIndexSpec.DEFAULT_MAX_LEAF_RECORDS);
    config.setStarTreeIndexSpec(starTreeIndexSpec);
  }
  List<String> dimensionsSplitOrder=starTreeIndexSpec.getDimensionsSplitOrder();
  if (dimensionsSplitOrder != null && !dimensionsSplitOrder.isEmpty()) {
    String timeColumnName=config.getTimeColumnName();
    if (timeColumnName != null) {
      dimensionsSplitOrder.remove(timeColumnName);
    }
  }
  StarTreeBuilderConfig starTreeBuilderConfig=new StarTreeBuilderConfig();
  starTreeBuilderConfig.setSchema(dataSchema);
  starTreeBuilderConfig.setDimensionsSplitOrder(dimensionsSplitOrder);
  starTreeBuilderConfig.setMaxLeafRecords(starTreeIndexSpec.getMaxLeafRecords());
  starTreeBuilderConfig.setSkipStarNodeCreationForDimensions(starTreeIndexSpec.getSkipStarNodeCreationForDimensions());
  starTreeBuilderConfig.setOutDir(starTreeTempDir);
  StarTreeBuilder starTreeBuilder=new OffHeapStarTreeBuilder();
  starTreeBuilder.init(starTreeBuilderConfig);
  recordReader.rewind();
  LOGGER.info("Start building star tree!");
  totalDocs=0;
  while (recordReader.hasNext()) {
    GenericRow row=readNextRowSanitized();
    starTreeBuilder.append(row);
    statsCollector.collectRow(row);
    totalRawDocs++;
    totalDocs++;
  }
  recordReader.close();
  LOGGER.info("Start building star tree!");
  starTreeBuilder.build();
  LOGGER.info("Finished building star tree!");
  long starTreeBuildFinishTime=System.currentTimeMillis();
  LOGGER.info("Start building StatsCollector!");
  Iterator<GenericRow> aggregatedRowsIterator=starTreeBuilder.iterator(starTreeBuilder.getTotalRawDocumentCount(),starTreeBuilder.getTotalRawDocumentCount() + starTreeBuilder.getTotalAggregateDocumentCount());
  while (aggregatedRowsIterator.hasNext()) {
    GenericRow genericRow=aggregatedRowsIterator.next();
    statsCollector.collectRow(genericRow);
    totalAggDocs++;
    totalDocs++;
  }
  buildIndexCreationInfo();
  LOGGER.info("Collected stats for {} documents",totalDocs);
  long statCollectionFinishTime=System.currentTimeMillis();
  indexCreator.init(config,segementIndexCreationInfo,indexCreationInfoMap,dataSchema,tempIndexDir);
  Iterator<GenericRow> allRowsIterator=starTreeBuilder.iterator(0,starTreeBuilder.getTotalRawDocumentCount() + starTreeBuilder.getTotalAggregateDocumentCount());
  while (allRowsIterator.hasNext()) {
    GenericRow genericRow=allRowsIterator.next();
    indexCreator.indexRow(genericRow);
  }
  if (dimensionsSplitOrder == null || dimensionsSplitOrder.isEmpty()) {
    starTreeIndexSpec.setDimensionsSplitOrder(starTreeBuilder.getDimensionsSplitOrder());
  }
  serializeTree(starTreeBuilder);
  handlePostCreation();
  starTreeBuilder.cleanup();
  long end=System.currentTimeMillis();
  LOGGER.info("Total time:{} \n star tree build time:{} \n stat collection time:{} \n column index build time:{}",(end - start),(starTreeBuildFinishTime - start),statCollectionFinishTime - starTreeBuildFinishTime,end - statCollectionFinishTime);
}
