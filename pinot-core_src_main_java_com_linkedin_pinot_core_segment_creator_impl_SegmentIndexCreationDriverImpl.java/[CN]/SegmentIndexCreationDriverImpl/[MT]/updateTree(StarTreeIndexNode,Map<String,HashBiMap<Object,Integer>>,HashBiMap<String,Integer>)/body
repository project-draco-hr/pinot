{
  if (node.getDimensionName() != StarTreeIndexNodeInterf.ALL) {
    String dimName=dimensionNameToIndexMap.inverse().get(node.getDimensionName());
    int dimensionValue=node.getDimensionValue();
    if (dimensionValue != StarTreeIndexNodeInterf.ALL) {
      Object sortedValuesForDim=indexCreationInfoMap.get(dimName).getSortedUniqueElementsArray();
      int indexForDimValue=searchValueInArray(sortedValuesForDim,dictionaryMap.get(dimName).inverse().get(dimensionValue));
      node.setDimensionValue(indexForDimValue);
    }
  }
  Iterator<StarTreeIndexNode> childrenIterator=node.getChildrenIterator();
  if (childrenIterator.hasNext()) {
    Map<Integer,StarTreeIndexNode> newChildren=new HashMap<>();
    String childDimName=dimensionNameToIndexMap.inverse().get(node.getChildDimensionName());
    Object sortedValuesForDim=indexCreationInfoMap.get(childDimName).getSortedUniqueElementsArray();
    while (childrenIterator.hasNext()) {
      StarTreeIndexNode child=childrenIterator.next();
      int childDimValue=child.getDimensionValue();
      int childMappedDimValue=StarTreeIndexNodeInterf.ALL;
      if (childDimValue != StarTreeIndexNodeInterf.ALL) {
        childMappedDimValue=searchValueInArray(sortedValuesForDim,dictionaryMap.get(childDimName).inverse().get(childDimValue));
      }
      newChildren.put(childMappedDimValue,child);
      updateTree(child,dictionaryMap,dimensionNameToIndexMap);
    }
    node.setChildren(newChildren);
  }
}
