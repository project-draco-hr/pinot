{
  LOGGER.debug("Start building StatsCollector!");
  totalDocs=0;
  while (recordReader.hasNext()) {
    totalDocs++;
    totalRawDocs++;
    long start=System.currentTimeMillis();
    GenericRow row=readNextRowSanitized();
    long stop=System.currentTimeMillis();
    statsCollector.collectRow(row);
    long stop1=System.currentTimeMillis();
    totalRecordReadTime+=(stop - start);
    totalStatsCollectorTime+=(stop1 - stop);
  }
  buildIndexCreationInfo();
  LOGGER.info("Finished building StatsCollector!");
  LOGGER.info("Collected stats for {} documents",totalDocs);
  indexCreator.init(config,segmentIndexCreationInfo,indexCreationInfoMap,dataSchema,tempIndexDir);
  recordReader.rewind();
  LOGGER.info("Start building IndexCreator!");
  while (recordReader.hasNext()) {
    long start=System.currentTimeMillis();
    GenericRow row=readNextRowSanitized();
    long stop=System.currentTimeMillis();
    indexCreator.indexRow(row);
    long stop1=System.currentTimeMillis();
    totalRecordReadTime+=(stop - start);
    totalIndexTime+=(stop1 - stop);
  }
  recordReader.close();
  LOGGER.info("Finished records indexing in IndexCreator!");
  int numErrors, numConversions, numNulls, numNullCols;
  if ((numErrors=extractor.getTotalErrors()) > 0) {
    LOGGER.warn("Index creator for schema {} had {} rows with errors",dataSchema.getSchemaName(),numErrors);
  }
  Map<String,Integer> errorCount=extractor.getError_count();
  for (  String column : errorCount.keySet()) {
    if ((numErrors=errorCount.get(column)) > 0) {
      LOGGER.info("Column {} had {} rows with errors",column,numErrors);
    }
  }
  if ((numConversions=extractor.getTotalConversions()) > 0) {
    LOGGER.info("Index creator for schema {} had {} rows with type conversions",dataSchema.getSchemaName(),numConversions);
  }
  if ((numNulls=extractor.getTotalNulls()) > 0) {
    LOGGER.info("Index creator for schema {} had {} rows with null columns",dataSchema.getSchemaName(),numNulls);
  }
  if ((numNullCols=extractor.getTotalNullCols()) > 0) {
    LOGGER.info("Index creator for schema {} had {}  null columns",dataSchema.getSchemaName(),numNullCols);
  }
  handlePostCreation();
}
