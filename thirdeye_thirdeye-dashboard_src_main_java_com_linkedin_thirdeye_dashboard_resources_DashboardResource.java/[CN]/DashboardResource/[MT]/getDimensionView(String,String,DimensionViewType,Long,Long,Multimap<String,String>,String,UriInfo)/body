{
  CollectionSchema schema=dataCache.getCollectionSchema(collection);
  DateTime baseline=new DateTime(baselineMillis);
  DateTime current=new DateTime(currentMillis);
  LOGGER.info("Request uri: {}",uriInfo.getRequestUri());
  Map<String,Multimap<String,String>> reverseDimensionGroups=null;
  DimensionGroupSpec dimensionGroupSpec=configCache.getDimensionGroupSpec(collection);
  if (dimensionGroupSpec != null) {
    reverseDimensionGroups=dimensionGroupSpec.getReverseMapping();
  }
switch (dimensionViewType) {
case CONTRIBUTOR:
case MULTI_TIME_SERIES:
    List<String> viewDimensions=dashboardConfigResource.getDimensions(collection,uriInfo);
  return contributorResource.generateDimensionContributorView(collection,metricFunction,selectedDimensions,viewDimensions,baseline,current,reverseDimensionGroups);
case HEAT_MAP:
Map<String,List<Future<QueryResult>>> resultActualFutures=new HashMap<>();
Multimap<String,String> expandedDimensionValues=ThirdEyeRequestUtils.expandDimensionGroups(selectedDimensions,reverseDimensionGroups);
for (String dimension : schema.getDimensions()) {
if (!selectedDimensions.containsKey(dimension)) {
ThirdEyeMetricFunction thirdEyeMetricFunction=ThirdEyeMetricFunction.fromStr(metricFunction);
long bucketSize=thirdEyeMetricFunction.getTimeGranularity().toMillis();
ThirdEyeRequest baseLineReq=new ThirdEyeRequestBuilder().setCollection(collection).setMetricFunction(thirdEyeMetricFunction).setDimensionValues(expandedDimensionValues).setGroupBy(dimension).setStartTime(baseline.minus(bucketSize)).setEndTime(baseline.plus(bucketSize)).setTopCount(HEATMAP_GROUP_COUNT).build();
ThirdEyeRequest currentReq=new ThirdEyeRequestBuilder().setCollection(collection).setMetricFunction(thirdEyeMetricFunction).setDimensionValues(expandedDimensionValues).setGroupBy(dimension).setTopCount(HEATMAP_GROUP_COUNT).setStartTime(current.minus(bucketSize)).setEndTime(current.plus(bucketSize)).build();
ArrayList<Future<QueryResult>> futures=new ArrayList<>();
futures.add(queryCache.getQueryResultAsync(baseLineReq));
futures.add(queryCache.getQueryResultAsync(currentReq));
LOGGER.info("Generated request for heat map: {}",baseLineReq);
LOGGER.info("Generated request for heat map: {}",currentReq);
resultActualFutures.put(dimension,futures);
}
}
Map<String,Map<String,String>> dimensionGroups=null;
Map<String,Map<Pattern,String>> dimensionRegex=null;
DimensionGroupSpec groupSpec=configCache.getDimensionGroupSpec(collection);
if (groupSpec != null) {
dimensionGroups=groupSpec.getMapping();
dimensionRegex=groupSpec.getRegexMapping();
}
Map<String,QueryResult> actualResults=QueryUtils.waitForAndMergeMultipleResults(resultActualFutures);
return new DimensionViewHeatMap(schema,objectMapper,actualResults,dimensionGroups,dimensionRegex,baseline,current);
case TABULAR:
List<FunnelTable> funnelTables=funnelResource.computeFunnelViews(collection,metricFunction,funnels,baselineMillis,currentMillis,selectedDimensions);
return new DimensionViewFunnel(funnelTables);
default :
throw new NotFoundException("No dimension view implementation for " + dimensionViewType);
}
}
