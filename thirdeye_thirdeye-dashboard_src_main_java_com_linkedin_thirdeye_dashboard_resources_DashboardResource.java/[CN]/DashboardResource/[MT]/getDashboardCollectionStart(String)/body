{
  CollectionSchema schema=dataCache.getCollectionSchema(collection);
  List<SegmentDescriptor> segments=dataCache.getSegmentDescriptors(collection);
  if (segments.isEmpty()) {
    throw new NotFoundException("No data loaded in server for " + collection);
  }
  DateTime earliestDataTime=null;
  DateTime latestDataTime=null;
  for (  SegmentDescriptor segment : segments) {
    if (segment.getStartDataTime() != null && (earliestDataTime == null || segment.getStartDataTime().compareTo(earliestDataTime) < 0)) {
      earliestDataTime=segment.getStartDataTime();
    }
    if (segment.getEndDataTime() != null && (latestDataTime == null || segment.getEndDataTime().compareTo(latestDataTime) > 0)) {
      latestDataTime=segment.getEndDataTime();
    }
  }
  if (earliestDataTime == null || latestDataTime == null) {
    throw new NotFoundException("No data loaded in server for " + collection);
  }
  List<String> funnelNames=Collections.emptyList();
  if (funnelResource != null) {
    funnelNames=funnelResource.getFunnelNamesFor(collection);
  }
  long currentTimeMillis=latestDataTime.getMillis() - TimeUnit.MILLISECONDS.convert(1,TimeUnit.HOURS);
  long baselineTimeMillis=currentTimeMillis - TimeUnit.MILLISECONDS.convert(7,TimeUnit.DAYS);
  String firstMetric=schema.getMetrics().get(0);
  String metricFunction=String.format("AGGREGATE_1_HOURS('%s')",firstMetric);
  String baseUrl=PATH_JOINER.join("/dashboard",collection,metricFunction,MetricViewType.INTRA_DAY,DimensionViewType.TABULAR,baselineTimeMillis,currentTimeMillis);
  String funnelsParam=Joiner.on(",").join(funnelNames);
  URI uri=new URIBuilder(baseUrl).addParameter("funnels",funnelsParam).build();
  return Response.seeOther(uri).build();
}
