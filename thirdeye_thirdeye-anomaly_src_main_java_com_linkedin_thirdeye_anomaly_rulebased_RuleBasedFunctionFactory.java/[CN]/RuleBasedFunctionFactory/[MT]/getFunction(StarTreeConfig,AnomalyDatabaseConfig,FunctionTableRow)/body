{
  RuleBasedFunctionTableRow ruleBasedFunctionTableRow=(RuleBasedFunctionTableRow)functionTableRow;
  TimeGranularity aggregateGranularity=new TimeGranularity(ruleBasedFunctionTableRow.getAggregateSize(),ruleBasedFunctionTableRow.getAggregateUnit());
  if (aggregateGranularity.getSize() <= 0) {
    throw new IllegalFunctionException("aggregate size must be positive");
  }
  TimeGranularity baselineGranularity=new TimeGranularity(ruleBasedFunctionTableRow.getBaselineSize(),ruleBasedFunctionTableRow.getBaselineUnit());
  if (baselineGranularity.getSize() <= 0) {
    throw new IllegalFunctionException("baseline size must be positive");
  }
  DimensionKeyMatchTable<Double> deltaTable=null;
  if (ruleBasedFunctionTableRow.getDeltaTableName() != null && ruleBasedFunctionTableRow.getDeltaTableName().length() > 0) {
    deltaTable=DeltaTable.load(dbconfig,starTreeConfig,ruleBasedFunctionTableRow.getDeltaTableName());
  }
  AnomalyDetectionFunction func;
switch (RuleTypes.valueOf(ruleBasedFunctionTableRow.getFunctionName().toUpperCase())) {
case PERCENTCHANGE:
{
      func=new AnomalyDetectionFunctionPercentChange(baselineGranularity,aggregateGranularity,ruleBasedFunctionTableRow.getMetricName(),ruleBasedFunctionTableRow.getDelta()).setDeltaTable(deltaTable);
      break;
    }
case ABSOLUTECHANGE:
{
    func=new AnomalyDetectionFunctionAbsoluteChange(baselineGranularity,aggregateGranularity,ruleBasedFunctionTableRow.getMetricName(),ruleBasedFunctionTableRow.getDelta()).setDeltaTable(deltaTable);
    break;
  }
default :
{
  throw new IllegalFunctionException("no rule of type " + ruleBasedFunctionTableRow.getFunctionName());
}
}
int consecutiveBuckets=ruleBasedFunctionTableRow.getConsecutiveBuckets();
if (consecutiveBuckets > 1) {
func=new AnomalyDetectionFunctionConsecutive(func,consecutiveBuckets);
}
String cronDefinition=ruleBasedFunctionTableRow.getCronDefinition();
if (cronDefinition != null && cronDefinition.length() > 0) {
func=new AnomalyDetectionFunctionCronDefinition(func,cronDefinition);
}
func.init(starTreeConfig,new FunctionProperties());
LOGGER.info("Loaded rule: {}",func);
return func;
}
