{
synchronized (trees) {
    if (!trees.containsKey(collection)) {
      LOGGER.info("Creating new startree for {}",collection);
      trees.put(collection,new ConcurrentHashMap<File,StarTree>());
      File collectionDir=new File(rootDir,collection);
      File[] dataDirs=collectionDir.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return name.startsWith(StorageUtils.getDataDirPrefix());
        }
      }
);
      if (dataDirs == null) {
        throw new IllegalArgumentException("No data dirs for collection " + collection);
      }
      File configFile=new File(collectionDir,StarTreeConstants.CONFIG_FILE_NAME);
      StarTreeConfig config=StarTreeConfig.decode(new FileInputStream(configFile));
      configs.put(collection,config);
      for (      File dataDir : dataDirs) {
        File treeFile=new File(dataDir,StarTreeConstants.TREE_FILE_NAME);
        ObjectInputStream inputStream=new ObjectInputStream(new FileInputStream(treeFile));
        StarTreeNode root=(StarTreeNode)inputStream.readObject();
        StarTree starTree=new StarTreeImpl(config,dataDir,root);
        trees.get(collection).put(dataDir,starTree);
        starTree.open();
        LOGGER.info("Opened tree {} for collection {}",starTree.getRoot(),collection);
        InputStream indexMetadataFile=new FileInputStream(new File(dataDir,StarTreeConstants.METADATA_FILE_NAME));
        Properties indexMetadataProps=new Properties();
        indexMetadataProps.load(indexMetadataFile);
        indexMetadataFile.close();
        IndexMetadata indexMetadata=IndexMetadata.fromProperties(indexMetadataProps);
        allIndexMetadata.put(root.getId(),indexMetadata);
      }
      openCollections.add(collection);
      LOGGER.info("Opened {} trees for collection {}",dataDirs.length,collection);
      DataRefreshWatcher refreshWatcher=new DataRefreshWatcher(config);
      refreshWatcher.register(Paths.get(collectionDir.getAbsolutePath()));
      Thread watcherThread=new Thread(refreshWatcher);
      watcherThread.setDaemon(true);
      watcherThread.start();
      LOGGER.info("Started watcher on {}",collectionDir.getAbsolutePath());
    }
  }
}
