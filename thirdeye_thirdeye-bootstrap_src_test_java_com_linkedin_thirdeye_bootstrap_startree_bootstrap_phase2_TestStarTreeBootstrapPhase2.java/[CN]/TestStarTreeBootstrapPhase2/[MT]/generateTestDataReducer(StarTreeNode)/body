{
  List<Pair<BytesWritable,List<BytesWritable>>> inputRecords=new ArrayList<Pair<BytesWritable,List<BytesWritable>>>();
  List<BytesWritable> list=new ArrayList<BytesWritable>();
  UUID uuid=null;
  LinkedList<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
  StarTreeUtils.traverseAndGetLeafNodes(leafNodes,root);
  for (  StarTreeNode node : leafNodes) {
    if (node.getDimensionValue().equals("C1")) {
      uuid=node.getId();
      break;
    }
  }
  String[] combination1={"A1","B1","C1"};
  DimensionKey dimKey=new DimensionKey(combination1);
  BootstrapPhaseMapOutputValue outputValue1=new BootstrapPhaseMapOutputValue(dimKey,TestStarTreeBootstrapPhase2.TestHelper.generateMetricTimeSeries(starTreeBootstrapConfig,10));
  list.add(new BytesWritable(outputValue1.toBytes()));
  BootstrapPhaseMapOutputValue outputValue2=new BootstrapPhaseMapOutputValue(dimKey,TestStarTreeBootstrapPhase2.TestHelper.generateMetricTimeSeries(starTreeBootstrapConfig,10));
  list.add(new BytesWritable(outputValue2.toBytes()));
  inputRecords.add(new Pair<BytesWritable,List<BytesWritable>>(new BytesWritable(uuid.toString().getBytes()),list));
  return inputRecords;
}
