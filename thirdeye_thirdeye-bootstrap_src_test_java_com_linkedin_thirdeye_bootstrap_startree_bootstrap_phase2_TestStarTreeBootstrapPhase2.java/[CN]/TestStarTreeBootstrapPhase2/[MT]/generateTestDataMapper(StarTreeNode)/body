{
  List<Pair<BytesWritable,BytesWritable>> inputRecords=new ArrayList<Pair<BytesWritable,BytesWritable>>();
  UUID uuid=null;
  LinkedList<StarTreeNode> leafNodes=new LinkedList<StarTreeNode>();
  StarTreeUtils.traverseAndGetLeafNodes(leafNodes,root);
  for (  StarTreeNode node : leafNodes) {
    if (node.getDimensionValue().equals("C1")) {
      uuid=node.getId();
      break;
    }
  }
  String[] combination={"A1","B1","C1"};
  DimensionKey key=new DimensionKey(combination);
  BootstrapPhaseMapOutputKey outputKey1=new BootstrapPhaseMapOutputKey(uuid,key.toMD5());
  BootstrapPhaseMapOutputValue outputValue1=new BootstrapPhaseMapOutputValue(key,TestStarTreeBootstrapPhase2.TestHelper.generateMetricTimeSeries(starTreeBootstrapConfig,10));
  inputRecords.add(new Pair<BytesWritable,BytesWritable>(new BytesWritable(outputKey1.toBytes()),new BytesWritable(outputValue1.toBytes())));
  String[] combination2={"A2","B2","C1"};
  key=new DimensionKey(combination2);
  BootstrapPhaseMapOutputKey outputKey2=new BootstrapPhaseMapOutputKey(uuid,key.toMD5());
  BootstrapPhaseMapOutputValue outputValue2=new BootstrapPhaseMapOutputValue(key,TestStarTreeBootstrapPhase2.TestHelper.generateMetricTimeSeries(starTreeBootstrapConfig,10));
  inputRecords.add(new Pair<BytesWritable,BytesWritable>(new BytesWritable(outputKey2.toBytes()),new BytesWritable(outputValue2.toBytes())));
  return inputRecords;
}
