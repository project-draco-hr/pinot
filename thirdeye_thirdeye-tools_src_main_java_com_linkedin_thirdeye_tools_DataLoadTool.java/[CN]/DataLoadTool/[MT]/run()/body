{
  try {
    String uri;
    HttpRequest hdfsReq;
    HttpResponse hdfsRes;
    LoginContext loginContext=login();
    ThirdEyeLoader thirdEyeLoader;
    if ("http".equals(thirdEyeUri.getScheme())) {
      thirdEyeLoader=new ThirdEyeHttpLoader(new HttpHost(thirdEyeUri.getHost(),thirdEyeUri.getPort()),collection);
    }
 else {
      throw new IllegalArgumentException("Unsupported URI type " + thirdEyeUri);
    }
    LOG.info("Loading into {}",thirdEyeUri);
    uri=createListTimeRequest();
    LOG.info("GET {}",uri);
    hdfsReq=new HttpGet(uri);
    hdfsRes=executePrivileged(loginContext,hdfsReq);
    if (hdfsRes.getStatusLine().getStatusCode() != 200) {
      throw new IllegalStateException("Request failed " + hdfsReq);
    }
    JsonNode fileStatuses=OBJECT_MAPPER.readTree(hdfsRes.getEntity().getContent());
    EntityUtils.consume(hdfsRes.getEntity());
    Set<TimeRange> timeRanges=new HashSet<TimeRange>();
    for (    JsonNode fileStatus : fileStatuses.get("FileStatuses").get("FileStatus")) {
      String pathSuffix=fileStatus.get("pathSuffix").asText();
      if (pathSuffix.startsWith("data_")) {
        String[] pathTokens=pathSuffix.split("_");
        DateTime minTime=StarTreeConstants.DATE_TIME_FORMATTER.parseDateTime(pathTokens[1]);
        DateTime maxTime=StarTreeConstants.DATE_TIME_FORMATTER.parseDateTime(pathTokens[2]);
        TimeRange timeRange=new TimeRange(minTime.getMillis(),maxTime.getMillis());
        if (globalTimeRange.contains(timeRange)) {
          timeRanges.add(timeRange);
        }
 else         if (!globalTimeRange.isDisjoint(timeRange)) {
          throw new IllegalArgumentException("Global time range " + globalTimeRange + " does not contain time range "+ timeRange+ " and/or is not disjoint");
        }
      }
    }
    uri=createConfigRequest();
    LOG.info("GET {}",uri);
    hdfsReq=new HttpGet(uri);
    hdfsRes=executePrivileged(loginContext,hdfsReq);
    thirdEyeLoader.handleConfig(hdfsRes.getEntity().getContent());
    EntityUtils.consume(hdfsRes.getEntity());
    for (    TimeRange timeRange : timeRanges) {
      DateTime minTime=new DateTime(timeRange.getStart());
      DateTime maxTime=new DateTime(timeRange.getEnd());
      uri=createListDataRequest(timeRange);
      LOG.info("GET {}",uri);
      hdfsReq=new HttpGet(uri);
      hdfsRes=executePrivileged(loginContext,hdfsReq);
      fileStatuses=OBJECT_MAPPER.readTree(hdfsRes.getEntity().getContent());
      EntityUtils.consume(hdfsRes.getEntity());
      for (      JsonNode fileStatus : fileStatuses.get("FileStatuses").get("FileStatus")) {
        String pathSuffix=fileStatus.get("pathSuffix").asText();
        if (pathSuffix.startsWith("task_")) {
          uri=createGetDataRequest(timeRange,pathSuffix);
          LOG.info("GET {}",uri);
          hdfsReq=new HttpGet(uri);
          hdfsRes=executePrivileged(loginContext,hdfsReq);
          thirdEyeLoader.handleData(pathSuffix,hdfsRes.getEntity().getContent(),minTime,maxTime,Mode.BOOTSTRAP.equals(mode));
          EntityUtils.consume(hdfsRes.getEntity());
        }
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
