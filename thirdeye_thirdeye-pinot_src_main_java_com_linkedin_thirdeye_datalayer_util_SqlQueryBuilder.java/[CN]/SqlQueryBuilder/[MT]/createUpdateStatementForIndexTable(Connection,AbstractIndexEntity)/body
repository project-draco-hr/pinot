{
  String tableName=entityMappingHolder.tableToEntityNameMap.inverse().get(entity.getClass().getSimpleName());
  LinkedHashMap<String,ColumnInfo> columnInfoMap=entityMappingHolder.columnInfoPerTable.get(tableName);
  StringBuilder sqlBuilder=new StringBuilder("UPDATE " + tableName + " SET ");
  String delim="";
  LinkedHashMap<String,Object> parameterMap=new LinkedHashMap<>();
  for (  ColumnInfo columnInfo : columnInfoMap.values()) {
    String columnNameInDB=columnInfo.columnNameInDB;
    if (!columnNameInDB.equalsIgnoreCase(BASE_ID) && !AUTO_UPDATE_COLUMN_SET.contains(columnNameInDB)) {
      Object val=columnInfo.field.get(entity);
      if (val != null) {
        if (Enum.class.isAssignableFrom(val.getClass())) {
          val=val.toString();
        }
        sqlBuilder.append(delim);
        sqlBuilder.append(columnNameInDB);
        sqlBuilder.append("=");
        sqlBuilder.append("?");
        delim=",";
        parameterMap.put(columnNameInDB,val);
      }
    }
  }
  sqlBuilder.append(" WHERE base_id=?");
  parameterMap.put(BASE_ID,entity.getBaseId());
  System.out.println("Update statement:" + sqlBuilder.toString());
  int parameterIndex=1;
  PreparedStatement prepareStatement=connection.prepareStatement(sqlBuilder.toString());
  for (  Entry<String,Object> paramEntry : parameterMap.entrySet()) {
    String dbFieldName=paramEntry.getKey();
    ColumnInfo info=columnInfoMap.get(dbFieldName);
    System.out.println("Setting value:" + paramEntry.getValue() + " for "+ dbFieldName);
    prepareStatement.setObject(parameterIndex++,paramEntry.getValue(),info.sqlType);
  }
  return prepareStatement;
}
