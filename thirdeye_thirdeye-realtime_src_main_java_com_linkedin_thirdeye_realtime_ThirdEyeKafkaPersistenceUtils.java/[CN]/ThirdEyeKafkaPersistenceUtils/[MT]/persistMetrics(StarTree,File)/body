{
  if (THIRDEYE_TMP_DIR.exists()) {
    FileUtils.forceDelete(THIRDEYE_TMP_DIR);
  }
  FileUtils.forceMkdir(THIRDEYE_TMP_DIR);
  final File leafBufferDirectory=new File(THIRDEYE_TMP_DIR,LEAF_BUFFER_DIRECTORY_NAME);
  LOG.info("Persisting leaf buffers for {}",starTree.getConfig().getCollection());
  starTree.eachLeaf(new StarTreeCallback(){
    @Override public void call(    StarTreeNode node){
      if (node.getRecordStore() == null) {
        throw new IllegalArgumentException("Cannot persist node with null record store " + node.getId());
      }
      Map<DimensionKey,MetricTimeSeries> data=new HashMap<DimensionKey,MetricTimeSeries>();
      boolean hasData=false;
      for (      StarTreeRecord record : node.getRecordStore()) {
        if (!record.getMetricTimeSeries().getTimeWindowSet().isEmpty()) {
          hasData=true;
        }
        data.put(record.getDimensionKey(),record.getMetricTimeSeries());
      }
      if (!hasData) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("No data for node {} will not write buffer",node.getId());
        }
        return;
      }
      DimensionDictionary dimensionDictionary=new DimensionDictionary(node.getRecordStore().getForwardIndex());
      try {
        FixedBufferUtil.createLeafBufferFiles(leafBufferDirectory,node.getId().toString(),starTree.getConfig(),data,dimensionDictionary);
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  LOG.info("Wrote leaf buffers to {}",leafBufferDirectory);
  final File combinedBufferDirectory=new File(THIRDEYE_TMP_DIR,COMBINED_BUFFER_DIRECTORY_NAME);
  FixedBufferUtil.combineDataFiles(leafBufferDirectory,combinedBufferDirectory);
  LOG.info("Wrote combined leaf buffers for {}",starTree.getConfig().getCollection());
  File tmpMetricBufferDirectory=new File(combinedBufferDirectory,StarTreeConstants.METRIC_STORE);
  File[] metricBuffers=tmpMetricBufferDirectory.listFiles();
  if (metricBuffers == null || metricBuffers.length == 0) {
    LOG.warn("There were no metric buffers in {}",tmpMetricBufferDirectory);
  }
 else {
    for (    File metricBuffer : metricBuffers) {
      FileUtils.copyFileToDirectory(metricBuffer,metricStoreDirectory);
      LOG.info("Copied {} to {}",metricBuffer,metricStoreDirectory);
    }
    LOG.info("Successfully persisted metrics for {}",starTree.getConfig().getCollection());
  }
}
