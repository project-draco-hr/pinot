{
  final EmailConfiguration config=(EmailConfiguration)context.getJobDetail().getJobDataMap().get(CONFIG);
  SessionFactory sessionFactory=(SessionFactory)context.getJobDetail().getJobDataMap().get(SESSION_FACTORY);
  long deltaMillis=TimeUnit.MILLISECONDS.convert(config.getWindowSize(),config.getWindowUnit());
  final DateTime now=DateTime.now().toDateTime(DateTimeZone.UTC);
  final DateTime then=now.minus(deltaMillis);
  final List<AnomalyResult> results;
  try {
    results=new HibernateSessionWrapper<List<AnomalyResult>>(sessionFactory).execute(new Callable<List<AnomalyResult>>(){
      @Override public List<AnomalyResult> call() throws Exception {
        AnomalyResultDAO resultDAO=(AnomalyResultDAO)context.getJobDetail().getJobDataMap().get(RESULT_DAO);
        return resultDAO.findAllByCollectionAndTime(config.getCollection(),then,now);
      }
    }
);
  }
 catch (  Exception e) {
    throw new JobExecutionException(e);
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try (Writer out=new OutputStreamWriter(baos,CHARSET)){
    Configuration freemarkerConfig=new Configuration(Configuration.VERSION_2_3_21);
    freemarkerConfig.setClassForTemplateLoading(getClass(),"/email/");
    freemarkerConfig.setDefaultEncoding(CHARSET);
    freemarkerConfig.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
    Map<String,Object> templateData=ImmutableMap.of("anomalyResults",(Object)results,"startTime",then,"endTime",now);
    Template template=freemarkerConfig.getTemplate("simple-anomaly-report.ftl");
    template.process(templateData,out);
  }
 catch (  Exception e) {
    throw new JobExecutionException(e);
  }
  HtmlEmail email;
  try {
    email=new HtmlEmail();
    email.setHostName(config.getSmtpHost());
    email.setSmtpPort(config.getSmtpPort());
    if (config.getSmtpUser() != null && config.getSmtpPassword() != null) {
      email.setAuthenticator(new DefaultAuthenticator(config.getSmtpUser(),config.getSmtpPassword()));
      email.setSSLOnConnect(true);
    }
    email.setFrom(config.getFromAddress());
    email.addTo(config.getToAddress());
    email.setSubject(String.format("[ThirdEye] (%s) %d anomalies (%s to %s)",config.getCollection(),results.size(),then,now));
    email.setHtmlMsg(new String(baos.toByteArray(),CHARSET));
    email.send();
  }
 catch (  Exception e) {
    throw new JobExecutionException(e);
  }
  LOG.info("Sent email! {}",config);
}
