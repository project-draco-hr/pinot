{
  int docId=0;
  _rowDocIdComparator=getDocValBasedComparator(_sortSequence,_dataSchema,blocks);
  if (_doOrdering) {
    _rowDocIdSet=new PriorityQueue<Integer>(_maxRowSize,_rowDocIdComparator);
  }
 else {
    _rowDocIdSet=new ArrayList<Integer>(_maxRowSize);
  }
  while ((docId=blockDocIdIterator.next()) != Constants.EOF) {
    _numDocsScanned++;
    if (_rowDocIdSet.size() < _maxRowSize) {
      _rowDocIdSet.add(docId);
    }
 else {
      if (!_doOrdering) {
        break;
      }
      PriorityQueue<Integer> queue=(PriorityQueue<Integer>)_rowDocIdSet;
      if (_doOrdering && (_rowDocIdComparator.compare(docId,queue.peek()) > 0)) {
        queue.add(docId);
        queue.poll();
      }
    }
  }
  mergeToRowEventsSet(blocks);
}
