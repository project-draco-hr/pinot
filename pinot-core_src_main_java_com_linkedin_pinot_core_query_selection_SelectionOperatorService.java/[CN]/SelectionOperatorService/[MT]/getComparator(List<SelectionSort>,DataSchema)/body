{
  return new Comparator<Serializable[]>(){
    @Override public int compare(    Serializable[] o1,    Serializable[] o2){
      for (int i=0; i < sortSequence.size(); ++i) {
switch (dataSchema.getColumnType(i)) {
case INT:
          if (!sortSequence.get(i).isIsAsc()) {
            return ((Integer)o1[i]).compareTo((Integer)o2[i]);
          }
 else {
            return ((Integer)o2[i]).compareTo((Integer)o1[i]);
          }
case SHORT:
        if (!sortSequence.get(i).isIsAsc()) {
          return ((Short)o1[i]).compareTo((Short)o2[i]);
        }
 else {
          return ((Short)o2[i]).compareTo((Short)o1[i]);
        }
case LONG:
      if (!sortSequence.get(i).isIsAsc()) {
        return ((Long)o1[i]).compareTo((Long)o2[i]);
      }
 else {
        return ((Long)o2[i]).compareTo((Long)o1[i]);
      }
case FLOAT:
    if (!sortSequence.get(i).isIsAsc()) {
      return ((Float)o1[i]).compareTo((Float)o2[i]);
    }
 else {
      return ((Float)o2[i]).compareTo((Float)o1[i]);
    }
case DOUBLE:
  if (!sortSequence.get(i).isIsAsc()) {
    return ((Double)o1[i]).compareTo((Double)o2[i]);
  }
 else {
    return ((Double)o2[i]).compareTo((Double)o1[i]);
  }
case STRING:
if (!sortSequence.get(i).isIsAsc()) {
  return ((String)o1[i]).compareTo((String)o2[i]);
}
 else {
  return ((String)o2[i]).compareTo((String)o1[i]);
}
default :
break;
}
}
return 0;
}
}
;
}
