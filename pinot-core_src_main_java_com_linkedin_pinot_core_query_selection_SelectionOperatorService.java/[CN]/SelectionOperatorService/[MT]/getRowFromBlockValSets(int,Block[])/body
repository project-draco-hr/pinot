{
  final Serializable[] row=new Serializable[_dataSchema.size()];
  int j=0;
  for (int i=0; i < _dataSchema.size(); ++i) {
    if (_dataSchema.getColumnName(i).equals("_segmentId")) {
      row[i]=_indexSegment.getSegmentName().hashCode();
      continue;
    }
    if (_dataSchema.getColumnName(i).equals("_docId")) {
      row[i]=docId;
      continue;
    }
    if (blocks[j].getMetadata().isSingleValue()) {
      DictionaryReader dictionaryReader=blocks[j].getMetadata().getDictionary();
      BlockSingleValIterator bvIter=(BlockSingleValIterator)blocks[j].getBlockValueSet().iterator();
      bvIter.skipTo(docId);
switch (_dataSchema.getColumnType(i)) {
case INT:
        row[i]=((IntDictionary)dictionaryReader).get(bvIter.nextIntVal());
      break;
case FLOAT:
    row[i]=((FloatDictionary)dictionaryReader).get(bvIter.nextIntVal());
  break;
case LONG:
row[i]=((LongDictionary)dictionaryReader).get(bvIter.nextIntVal());
break;
case DOUBLE:
row[i]=((DoubleDictionary)dictionaryReader).get(bvIter.nextIntVal());
break;
case STRING:
row[i]=((StringDictionary)dictionaryReader).get(bvIter.nextIntVal());
break;
default :
break;
}
}
 else {
DictionaryReader dictionaryReader=blocks[j].getMetadata().getDictionary();
BlockMultiValIterator bvIter=(BlockMultiValIterator)blocks[j].getBlockValueSet().iterator();
bvIter.skipTo(docId);
int[] dictIds=new int[blocks[j].getMetadata().maxNumberOfMultiValues()];
int dictSize;
switch (_dataSchema.getColumnType(i)) {
case INT_ARRAY:
dictSize=bvIter.nextIntVal(dictIds);
int[] rawIntRow=new int[dictSize];
for (int dictIdx=0; dictIdx < dictSize; ++dictIdx) {
rawIntRow[dictIdx]=((IntDictionary)dictionaryReader).get(dictIds[dictIdx]);
}
row[i]=rawIntRow;
break;
case FLOAT_ARRAY:
dictSize=bvIter.nextIntVal(dictIds);
Float[] rawFloatRow=new Float[dictSize];
for (int dictIdx=0; dictIdx < dictSize; ++dictIdx) {
rawFloatRow[dictIdx]=((FloatDictionary)dictionaryReader).get(dictIds[dictIdx]);
}
row[i]=rawFloatRow;
break;
case LONG_ARRAY:
dictSize=bvIter.nextIntVal(dictIds);
Long[] rawLongRow=new Long[dictSize];
for (int dictIdx=0; dictIdx < dictSize; ++dictIdx) {
rawLongRow[dictIdx]=((LongDictionary)dictionaryReader).get(dictIds[dictIdx]);
}
row[i]=rawLongRow;
break;
case DOUBLE_ARRAY:
dictSize=bvIter.nextIntVal(dictIds);
Double[] rawDoubleRow=new Double[dictSize];
for (int dictIdx=0; dictIdx < dictSize; ++dictIdx) {
rawDoubleRow[dictIdx]=((DoubleDictionary)dictionaryReader).get(dictIds[dictIdx]);
}
row[i]=rawDoubleRow;
break;
case STRING_ARRAY:
dictSize=bvIter.nextIntVal(dictIds);
String[] rawStringRow=new String[dictSize];
for (int dictIdx=0; dictIdx < dictSize; ++dictIdx) {
rawStringRow[dictIdx]=(((StringDictionary)dictionaryReader).get(dictIds[dictIdx]));
}
row[i]=rawStringRow;
break;
default :
break;
}
}
j++;
}
return row;
}
