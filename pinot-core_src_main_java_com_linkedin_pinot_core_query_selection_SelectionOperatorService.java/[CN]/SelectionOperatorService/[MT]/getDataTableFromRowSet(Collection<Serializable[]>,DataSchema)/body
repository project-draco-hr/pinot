{
  final DataTableBuilder dataTableBuilder=new DataTableBuilder(dataSchema);
  dataTableBuilder.open();
  final Iterator<Serializable[]> iterator=rowEventsSet1.iterator();
  while (iterator.hasNext()) {
    final Serializable[] row=iterator.next();
    dataTableBuilder.startRow();
    for (int i=0; i < dataSchema.size(); ++i) {
      if (dataSchema.getColumnType(i).isSingleValue()) {
switch (dataSchema.getColumnType(i)) {
case INT:
          dataTableBuilder.setColumn(i,((Integer)row[i]).intValue());
        break;
case LONG:
      dataTableBuilder.setColumn(i,((Long)row[i]).longValue());
    break;
case DOUBLE:
  dataTableBuilder.setColumn(i,((Double)row[i]).doubleValue());
break;
case FLOAT:
dataTableBuilder.setColumn(i,((Float)row[i]).floatValue());
break;
case STRING:
dataTableBuilder.setColumn(i,((String)row[i]));
break;
default :
dataTableBuilder.setColumn(i,row[i]);
break;
}
}
 else {
switch (dataSchema.getColumnType(i)) {
case INT_ARRAY:
dataTableBuilder.setColumn(i,(int[])row[i]);
break;
case LONG_ARRAY:
dataTableBuilder.setColumn(i,(long[])row[i]);
break;
case DOUBLE_ARRAY:
dataTableBuilder.setColumn(i,(double[])row[i]);
break;
case FLOAT_ARRAY:
dataTableBuilder.setColumn(i,(float[])row[i]);
break;
case STRING_ARRAY:
dataTableBuilder.setColumn(i,(String[])row[i]);
break;
default :
dataTableBuilder.setColumn(i,row[i]);
break;
}
}
}
dataTableBuilder.finishRow();
}
dataTableBuilder.seal();
return dataTableBuilder.build();
}
