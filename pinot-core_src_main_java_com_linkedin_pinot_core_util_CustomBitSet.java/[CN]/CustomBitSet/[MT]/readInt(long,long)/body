{
  int bitLength=(int)(endBitIndex - startBitIndex);
  if (bitLength < 16 && endBitIndex + 32 < nrBytes * 8L) {
    int bytePosition=(int)(startBitIndex / 8);
    int bitOffset=(int)(startBitIndex % 8);
    int shiftOffset=32 - (bitOffset + bitLength);
    int intValue=buf.getInt(bytePosition);
    int bitMask=(1 << bitLength) - 1;
    return (intValue >> shiftOffset) & bitMask;
  }
 else {
    int bytePosition=(int)(startBitIndex >>> 3);
    int startBitOffset=(int)(startBitIndex & 7);
    int sum=startBitOffset + bitLength;
    int endBitOffset=(8 - (sum & 7)) & 7;
    int numberOfBytesUsed=(sum + 7) >>> 3;
    int i=-1;
    long number=0;
    while (true) {
      number|=(buf.get(bytePosition)) & 0xFF;
      i++;
      bytePosition++;
      if (i == numberOfBytesUsed - 1) {
        break;
      }
      number<<=8;
    }
    number>>=endBitOffset;
    number&=(0xFFFFFFFF >>> (32 - bitLength));
    return (int)number;
  }
}
