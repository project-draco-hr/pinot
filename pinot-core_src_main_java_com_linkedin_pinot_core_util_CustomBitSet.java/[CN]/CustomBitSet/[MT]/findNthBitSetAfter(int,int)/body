{
  startBitIndex=startBitIndex + 1;
  int bytePosition=startBitIndex / 8;
  int bitPosition=startBitIndex % 8;
  if (bytePosition > nrBytes) {
    return -1;
  }
  int currentByte=(buf.get(bytePosition) << bitPosition) & 0xFF;
  int index=startBitIndex;
  if (bitCountArray[currentByte] < n) {
    int count=bitCountArray[currentByte];
    do {
      bytePosition=bytePosition + 1;
      if (bytePosition >= nrBytes) {
        return -1;
      }
      currentByte=buf.get(bytePosition) & 0xFF;
      if (bitCountArray[currentByte] + count >= n) {
        break;
      }
      count=count + bitCountArray[currentByte];
    }
 while (true);
    index=bytePosition * 8 - 1;
    for (int i=0; i < n - count; i++) {
      index=nextSetBit(index);
    }
  }
 else {
    return Integer.numberOfLeadingZeros(currentByte) - IGNORED_ZEROS_COUNT + index;
  }
  return index;
}
