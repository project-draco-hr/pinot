{
  List<String> dimensions=Arrays.asList("dim1","dim2","dim3");
  List<String> dimensionValueSuffixes=Arrays.asList("_a","_b","_c");
  List<MetricFunction> metricFunctions=createSumFunctions("m1","m2","m3");
  ConversionDataGenerator dataGenerator=new ConversionDataGenerator(dimensions,metricFunctions);
  for (long hoursSinceEpoch=0; hoursSinceEpoch < 50; hoursSinceEpoch++) {
    DateTime start=new DateTime(hoursSinceEpoch);
    DateTime end=start.plusHours(1);
    for (    String dimension : (groupByDimension ? dimensions : Collections.<String>singleton(null))) {
      for (      String dimensionValueSuffix : (groupByDimension ? dimensionValueSuffixes : Collections.<String>singleton(null))) {
        String dimensionValue;
        if (groupByDimension) {
          dimensionValue=dimension + dimensionValueSuffix;
        }
 else {
          dimensionValue=null;
        }
        List<TimeSeriesMetric> timeSeriesMetrics=new ArrayList<>();
        for (        MetricFunction metricFunction : metricFunctions) {
          Double value=(double)(Objects.hash(start,end,dimension,dimensionValue,metricFunction.toString()) % 1000);
          TimeSeriesMetric timeSeriesMetric=new TimeSeriesMetric(metricFunction.getMetricName(),value);
          timeSeriesMetrics.add(timeSeriesMetric);
        }
        if (groupTimeSeriesMetricsIntoRow) {
          dataGenerator.addEntry(dimension,dimensionValue,start,end,timeSeriesMetrics.toArray(new TimeSeriesMetric[timeSeriesMetrics.size()]));
        }
 else {
          for (          TimeSeriesMetric timeSeriesMetric : timeSeriesMetrics) {
            dataGenerator.addEntry(dimension,dimensionValue,start,end,timeSeriesMetric);
          }
        }
      }
    }
  }
  Object[] dimensionGroupByArgs=new Object[]{testName,dataGenerator.getResponse(),dimensions,dataGenerator.getMap()};
  return dimensionGroupByArgs;
}
