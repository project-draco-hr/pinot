{
  for (int i=0; i < numberOfObservations; i++) {
    int subseriesLength=series.length / numberOfObservations;
    subseriesLength+=(i < series.length % numberOfObservations) ? 1 : 0;
    double[] subseriesValues=new double[subseriesLength];
    double[] subseriesTimes=new double[subseriesLength];
    double[] subseriesRobustnessWeights=null;
    if (robustness != null) {
      subseriesRobustnessWeights=new double[subseriesLength];
    }
    for (int cycleIdx=0; cycleIdx < subseriesLength; cycleIdx++) {
      subseriesValues[cycleIdx]=detrend[cycleIdx * numberOfObservations + i];
      subseriesTimes[cycleIdx]=times[cycleIdx * numberOfObservations + i];
      if (subseriesRobustnessWeights != null) {
        subseriesRobustnessWeights[cycleIdx]=robustness[cycleIdx * numberOfObservations + i];
        if (subseriesRobustnessWeights[cycleIdx] < 0.001) {
          subseriesRobustnessWeights[cycleIdx]=0.01;
        }
      }
    }
    cycleSubSeries.add(subseriesValues);
    cycleTimes.add(subseriesTimes);
    cycleRobustnessWeights.add(subseriesRobustnessWeights);
  }
}
