{
  anomalyFunction=(AnomalyFunction)context.getJobDetail().getJobDataMap().get(FUNCTION);
  thirdEyeClient=(ThirdEyeClient)context.getJobDetail().getJobDataMap().get(CLIENT);
  resultDAO=(AnomalyResultDAO)context.getJobDetail().getJobDataMap().get(RESULT_DAO);
  relationDAO=(AnomalyFunctionRelationDAO)context.getJobDetail().getJobDataMap().get(RELATION_DAO);
  sessionFactory=(SessionFactory)context.getJobDetail().getJobDataMap().get(SESSION_FACTORY);
  metricRegistry=(MetricRegistry)context.getJobDetail().getJobDataMap().get(METRIC_REGISTRY);
  String windowEndProp=context.getJobDetail().getJobDataMap().getString(WINDOW_END);
  String windowStartProp=context.getJobDetail().getJobDataMap().getString(WINDOW_START);
  String histogramName=context.getJobDetail().getKey().getName();
  histogram=metricRegistry.getHistograms().get(histogramName);
  if (histogram == null) {
    histogram=metricRegistry.histogram(histogramName);
  }
  if (windowEndProp == null) {
    long delayMillis=0;
    if (anomalyFunction.getSpec().getWindowDelay() != null) {
      delayMillis=TimeUnit.MILLISECONDS.convert(anomalyFunction.getSpec().getWindowDelay(),anomalyFunction.getSpec().getWindowUnit());
    }
    windowEnd=DateTime.now().minus(delayMillis);
  }
 else {
    windowEnd=ISODateTimeFormat.dateTimeParser().parseDateTime(windowEndProp);
  }
  if (windowStartProp == null) {
    long windowMillis=TimeUnit.MILLISECONDS.convert(anomalyFunction.getSpec().getWindowSize(),anomalyFunction.getSpec().getWindowUnit());
    windowStart=windowEnd.minus(windowMillis);
  }
 else {
    windowStart=ISODateTimeFormat.dateTimeParser().parseDateTime(windowStartProp);
  }
  metricFunction=String.format("AGGREGATE_%d_%s(%s)",anomalyFunction.getSpec().getBucketSize(),anomalyFunction.getSpec().getBucketUnit(),anomalyFunction.getSpec().getMetric());
  collection=anomalyFunction.getSpec().getCollection();
  knownAnomalies=getExistingAnomalies();
  Queue<ThirdEyeRequest> queue=new LinkedList<>();
  ThirdEyeRequest req=new ThirdEyeRequest().setCollection(anomalyFunction.getSpec().getCollection()).setMetricFunction(metricFunction).setStartTime(windowStart).setEndTime(windowEnd);
  queue.add(req);
  String exploreDimensionsString=anomalyFunction.getSpec().getExploreDimensions();
  if (exploreDimensionsString != null) {
    String[] exploreDimensions=exploreDimensionsString.split(",");
    for (    String exploreDimension : exploreDimensions) {
      ThirdEyeRequest groupByReq=new ThirdEyeRequest(req);
      groupByReq.setGroupBy(exploreDimension);
      queue.add(groupByReq);
    }
  }
  while (!queue.isEmpty()) {
    try {
      List<ThirdEyeRequest> nextRequests=exploreCombination(queue.remove());
    }
 catch (    Exception e) {
      throw new JobExecutionException(e);
    }
  }
}
