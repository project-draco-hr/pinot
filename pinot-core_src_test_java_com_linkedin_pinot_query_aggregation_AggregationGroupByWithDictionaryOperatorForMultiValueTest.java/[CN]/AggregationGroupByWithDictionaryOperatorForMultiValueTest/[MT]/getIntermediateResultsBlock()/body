{
  final List<AggregationFunctionGroupByOperator> aggregationFunctionGroupByOperatorList=new ArrayList<AggregationFunctionGroupByOperator>();
  Operator filterOperator=new MatchEntireSegmentOperator(_indexSegment.getSegmentMetadata().getTotalDocs());
  final BReusableFilteredDocIdSetOperator docIdSetOperator=new BReusableFilteredDocIdSetOperator(filterOperator,_indexSegment.getSegmentMetadata().getTotalDocs(),5000);
  final Map<String,DataSource> dataSourceMap=getDataSourceMap();
  final MProjectionOperator projectionOperator=new MProjectionOperator(dataSourceMap,docIdSetOperator);
  for (int i=0; i < _numAggregations; ++i) {
    final MAggregationFunctionGroupByWithDictionaryOperator aggregationFunctionGroupByOperator=new MAggregationFunctionGroupByWithDictionaryOperator(_aggregationInfos.get(i),_groupBy,new UReplicatedProjectionOperator(projectionOperator),true);
    aggregationFunctionGroupByOperatorList.add(aggregationFunctionGroupByOperator);
  }
  final MAggregationGroupByOperator aggregationGroupByOperator=new MAggregationGroupByOperator(_indexSegment,_aggregationInfos,_groupBy,projectionOperator,aggregationFunctionGroupByOperatorList);
  LOGGER.debug("running query: ");
  final IntermediateResultsBlock block=(IntermediateResultsBlock)aggregationGroupByOperator.nextBlock();
  LOGGER.debug("Result 1: ");
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.debug("Aggregation GroupBy Result {} : {}",i,block.getAggregationGroupByOperatorResult().get(i));
  }
  return block;
}
