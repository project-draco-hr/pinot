{
  final IntermediateResultsBlock block=getIntermediateResultsBlock();
  final List<AggregationFunctionGroupByOperator> aggregationFunctionGroupByOperatorList1=new ArrayList<AggregationFunctionGroupByOperator>();
  Operator filterOperator1=new MatchEntireSegmentOperator(_indexSegment.getSegmentMetadata().getTotalRawDocs());
  final BReusableFilteredDocIdSetOperator docIdSetOperator1=new BReusableFilteredDocIdSetOperator(filterOperator1,_indexSegment.getSegmentMetadata().getTotalRawDocs(),5000);
  final Map<String,DataSource> dataSourceMap1=getDataSourceMap();
  final MProjectionOperator projectionOperator1=new MProjectionOperator(dataSourceMap1,docIdSetOperator1);
  for (int i=0; i < _numAggregations; ++i) {
    final MAggregationFunctionGroupByWithDictionaryOperator aggregationFunctionGroupByOperator1=new MAggregationFunctionGroupByWithDictionaryOperator(_aggregationInfos.get(i),_groupBy,new UReplicatedProjectionOperator(projectionOperator1),true);
    aggregationFunctionGroupByOperatorList1.add(aggregationFunctionGroupByOperator1);
  }
  final MAggregationGroupByOperator aggregationGroupByOperator1=new MAggregationGroupByOperator(_indexSegment,_aggregationInfos,_groupBy,projectionOperator1,aggregationFunctionGroupByOperatorList1);
  final IntermediateResultsBlock block1=(IntermediateResultsBlock)aggregationGroupByOperator1.nextBlock();
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.debug("Result {} : {}",i,block1.getAggregationGroupByOperatorResult().get(i));
  }
  CombineService.mergeTwoBlocks(getAggregationGroupByNoFilterBrokerRequest(),block,block1);
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.debug("Combined Result {} : {}",i,block.getAggregationGroupByOperatorResult().get(i));
  }
}
