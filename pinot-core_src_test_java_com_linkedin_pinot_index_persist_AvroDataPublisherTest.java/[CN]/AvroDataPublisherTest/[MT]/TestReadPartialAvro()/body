{
  final String filePath=TestUtils.getFileFromResourceUrl(getClass().getClassLoader().getResource(AVRO_DATA));
  final String jsonPath=TestUtils.getFileFromResourceUrl(getClass().getClassLoader().getResource(JSON_DATA));
  final List<String> projectedColumns=new ArrayList<String>();
  projectedColumns.add("column3");
  projectedColumns.add("column2");
  Schema schema=new Schema.SchemaBuilder().addSingleValueDimension("column3",DataType.STRING).addSingleValueDimension("column2",DataType.STRING).build();
  final SegmentGeneratorConfig config=new SegmentGeneratorConfig(schema);
  config.setFormat(FileFormat.AVRO);
  config.setInputFilePath(filePath);
  config.setSegmentVersion(SegmentVersion.v1);
  final AvroRecordReader avroDataPublisher=new AvroRecordReader(FieldExtractorFactory.getPlainFieldExtractor(config),config.getInputFilePath());
  avroDataPublisher.next();
  int cnt=0;
  for (  final String line : FileUtils.readLines(new File(jsonPath))) {
    final JSONObject obj=new JSONObject(line);
    if (avroDataPublisher.hasNext()) {
      final GenericRow recordRow=avroDataPublisher.next();
      Assert.assertEquals(recordRow.getFieldNames().length,2);
      for (      final String column : recordRow.getFieldNames()) {
        final String valueFromJson=obj.get(column).toString();
        final String valueFromAvro=recordRow.getValue(column).toString();
        if (cnt > 1) {
          Assert.assertEquals(valueFromAvro,valueFromJson);
        }
      }
    }
    cnt++;
  }
  Assert.assertEquals(10001,cnt);
}
