{
  double[] deseasonal_series=GetData(filename);
  int numData=deseasonal_series.length;
  double up_level=1.0;
  double down_level=1.0;
  double notequal_level=1.0;
  if (target_pattern == ScanStatistics.Pattern.UP) {
    up_level=target_level;
  }
 else   if (target_pattern == ScanStatistics.Pattern.DOWN) {
    down_level=target_level;
  }
 else   if (target_pattern == ScanStatistics.Pattern.NOTEQUAL) {
    notequal_level=target_level;
  }
  if (complementary_pattern == ScanStatistics.Pattern.UP) {
    up_level=complementary_level;
  }
 else   if (complementary_pattern == ScanStatistics.Pattern.DOWN) {
    down_level=complementary_level;
  }
 else   if (complementary_pattern == ScanStatistics.Pattern.NOTEQUAL) {
    notequal_level=complementary_level;
  }
  long[] timestamps=new long[numData];
  for (int i=0; i < numData; i++) {
    timestamps[i]=i;
  }
  int monitor_start=training_size;
  int monitor_end=deseasonal_series.length - monitor_size;
  Set<Long> aggregateAnomalousTimestamps=new HashSet<Long>();
  Set<Long> targetAnomalousTimestamps=new HashSet<Long>();
  Set<Long> complementaryAnomalousTimestamps=new HashSet<Long>();
  ArrayList<String> output_list=new ArrayList<String>();
  for (int monitor_idx=monitor_start; monitor_idx <= monitor_end; monitor_idx+=monitor_size) {
    double[] train=Arrays.copyOfRange(deseasonal_series,monitor_idx - training_size,monitor_idx);
    double[] monitor=Arrays.copyOfRange(deseasonal_series,monitor_idx,monitor_idx + monitor_size);
    long[] trainingTimestamps=Arrays.copyOfRange(timestamps,monitor_idx - training_size,monitor_idx);
    ScanStatistics scanStatistics=new ScanStatistics(numSims,1,100000,0.05,target_pattern,1,false,up_level,down_level,notequal_level);
    ScanStatistics complementaryScanStatistics=new ScanStatistics(numSims,1,100000,0.05,complementary_pattern,1,false,up_level,down_level,notequal_level);
    double[] trainingDataWithOutAggregateAnomalies=ScanStatisticsAnomalyDetectionFunction.removeAnomalies(trainingTimestamps,train,aggregateAnomalousTimestamps);
    double[] trainingDataWithOutComplementaryAnomalies=ScanStatisticsAnomalyDetectionFunction.removeAnomalies(trainingTimestamps,train,complementaryAnomalousTimestamps);
    Range<Integer> target_anomaly=scanStatistics.getInterval(trainingDataWithOutAggregateAnomalies,monitor);
    Range<Integer> complementary_anomaly=complementaryScanStatistics.getInterval(trainingDataWithOutComplementaryAnomalies,monitor);
    if (target_anomaly != null) {
      for (int i=target_anomaly.lowerEndpoint(); i < target_anomaly.upperEndpoint(); i++) {
        aggregateAnomalousTimestamps.add((long)(i + monitor_idx));
        targetAnomalousTimestamps.add((long)(i + monitor_idx));
      }
      Range<Integer> anomalyOffset=Range.closedOpen(target_anomaly.lowerEndpoint() + monitor_idx,target_anomaly.upperEndpoint() + monitor_idx);
      output_list.add("Split : " + monitor_idx + ",Target Pattern Anomaly : "+ anomalyOffset);
    }
    if (complementary_anomaly != null) {
      for (int i=complementary_anomaly.lowerEndpoint(); i < complementary_anomaly.upperEndpoint(); i++) {
        aggregateAnomalousTimestamps.add((long)(i + monitor_idx));
        complementaryAnomalousTimestamps.add((long)(i + monitor_idx));
      }
    }
  }
  File file=new File(outputFilename);
  OutputStream fop=new FileOutputStream(file);
  BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(fop));
  for (  String element : output_list) {
    System.out.println(element);
    writer.write(element);
    writer.newLine();
  }
  writer.close();
}
