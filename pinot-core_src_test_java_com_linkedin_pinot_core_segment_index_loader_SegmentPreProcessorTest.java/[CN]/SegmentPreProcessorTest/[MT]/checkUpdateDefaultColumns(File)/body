{
  SegmentPreProcessor processor=new SegmentPreProcessor(segmentDirectoryFile,null,newColumnsSchema1);
  processor.process();
  SegmentMetadataImpl segmentMetadata=new SegmentMetadataImpl(segmentDirectoryFile);
  ColumnMetadata columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_INT_METRIC_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getCardinality(),1);
  Assert.assertEquals(columnMetadata.getTotalDocs(),100000);
  Assert.assertEquals(columnMetadata.getTotalRawDocs(),100000);
  Assert.assertEquals(columnMetadata.getTotalAggDocs(),0);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.INT);
  Assert.assertEquals(columnMetadata.getBitsPerElement(),1);
  Assert.assertEquals(columnMetadata.getStringColumnMaxLength(),0);
  Assert.assertEquals(columnMetadata.getFieldType(),FieldSpec.FieldType.METRIC);
  Assert.assertTrue(columnMetadata.isSorted());
  Assert.assertFalse(columnMetadata.hasNulls());
  Assert.assertTrue(columnMetadata.hasDictionary());
  Assert.assertTrue(columnMetadata.hasInvertedIndex());
  Assert.assertTrue(columnMetadata.isSingleValue());
  Assert.assertEquals(columnMetadata.getMaxNumberOfMultiValues(),0);
  Assert.assertEquals(columnMetadata.getTotalNumberOfEntries(),100000);
  Assert.assertTrue(columnMetadata.isAutoGenerated());
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"1");
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_LONG_METRIC_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.LONG);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"0");
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_FLOAT_METRIC_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.FLOAT);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"0.0");
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_DOUBLE_METRIC_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.DOUBLE);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"0.0");
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_BOOLEAN_SV_DIMENSION_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.BOOLEAN);
  Assert.assertEquals(columnMetadata.getStringColumnMaxLength(),5);
  Assert.assertEquals(columnMetadata.getFieldType(),FieldSpec.FieldType.DIMENSION);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"false");
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_INT_SV_DIMENSION_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.INT);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),String.valueOf(Integer.MIN_VALUE));
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_STRING_MV_DIMENSION_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDataType(),FieldSpec.DataType.STRING);
  Assert.assertEquals(columnMetadata.getStringColumnMaxLength(),4);
  Assert.assertFalse(columnMetadata.isSorted());
  Assert.assertFalse(columnMetadata.isSingleValue());
  Assert.assertEquals(columnMetadata.getMaxNumberOfMultiValues(),1);
  Assert.assertEquals(columnMetadata.getTotalNumberOfEntries(),100000);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"null");
  try (SegmentDirectory segmentDirectory=SegmentDirectory.createFromLocalFS(segmentDirectoryFile,segmentMetadata,ReadMode.mmap);SegmentDirectory.Reader reader=segmentDirectory.createReader()){
    Assert.assertTrue(reader.hasIndexFor(NEW_INT_METRIC_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_INT_METRIC_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
    Assert.assertTrue(reader.hasIndexFor(NEW_LONG_METRIC_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_LONG_METRIC_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
    Assert.assertTrue(reader.hasIndexFor(NEW_FLOAT_METRIC_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_FLOAT_METRIC_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
    Assert.assertTrue(reader.hasIndexFor(NEW_DOUBLE_METRIC_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_DOUBLE_METRIC_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
    Assert.assertTrue(reader.hasIndexFor(NEW_BOOLEAN_SV_DIMENSION_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_BOOLEAN_SV_DIMENSION_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
    Assert.assertTrue(reader.hasIndexFor(NEW_INT_SV_DIMENSION_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_INT_SV_DIMENSION_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
    Assert.assertTrue(reader.hasIndexFor(NEW_STRING_MV_DIMENSION_COLUMN_NAME,ColumnIndexType.DICTIONARY));
    Assert.assertTrue(reader.hasIndexFor(NEW_STRING_MV_DIMENSION_COLUMN_NAME,ColumnIndexType.FORWARD_INDEX));
  }
   processor=new SegmentPreProcessor(segmentDirectoryFile,null,newColumnsSchema2);
  processor.process();
  segmentMetadata=new SegmentMetadataImpl(segmentDirectoryFile);
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_INT_METRIC_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"2");
  columnMetadata=segmentMetadata.getColumnMetadataFor(NEW_STRING_MV_DIMENSION_COLUMN_NAME);
  Assert.assertEquals(columnMetadata.getDefaultNullValueString(),"abcd");
}
