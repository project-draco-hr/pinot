{
  if (INDEX_DIR.exists()) {
    FileUtils.deleteQuietly(INDEX_DIR);
  }
  final String filePath=TestUtils.getFileFromResourceUrl(SegmentPreProcessor.class.getClassLoader().getResource(AVRO_DATA));
  final SegmentGeneratorConfig config=SegmentTestUtils.getSegmentGenSpecWithSchemAndProjectedColumns(new File(filePath),INDEX_DIR,"daysSinceEpoch",TimeUnit.HOURS,"testTable");
  config.setSegmentNamePostfix("1");
  config.setTimeColumnName("daysSinceEpoch");
  config.getInvertedIndexCreationColumns().clear();
  config.setInvertedIndexCreationColumns(Arrays.asList(column7Name));
  final SegmentIndexCreationDriver driver=SegmentCreationDriverFactory.get(null);
  driver.init(config);
  driver.build();
  segmentDirectoryFile=new File(INDEX_DIR,driver.getSegmentName());
  Configuration indexLoadingProperties=new PropertiesConfiguration();
  indexLoadingConfigMetadata=new IndexLoadingConfigMetadata(indexLoadingProperties);
  String csvColumns=column1Name + "," + column13Name+ ","+ noSuchColumnName+ ","+ column7Name;
  indexLoadingConfigMetadata.initLoadingInvertedIndexColumnSet(csvColumns.split(","));
  Set<String> IIColumns=indexLoadingConfigMetadata.getLoadingInvertedIndexColumns();
  Assert.assertEquals(4,IIColumns.size());
  Assert.assertTrue(IIColumns.contains(column1Name));
  Assert.assertTrue(IIColumns.contains(column13Name));
  Assert.assertTrue(IIColumns.contains(column7Name));
  Assert.assertTrue(IIColumns.contains(noSuchColumnName));
}
