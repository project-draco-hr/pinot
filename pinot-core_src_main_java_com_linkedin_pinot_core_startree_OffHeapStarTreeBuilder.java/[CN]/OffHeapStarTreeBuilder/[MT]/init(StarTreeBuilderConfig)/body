{
  schema=builderConfig.schema;
  timeColumnName=schema.getTimeColumnName();
  this.dimensionsSplitOrder=builderConfig.dimensionsSplitOrder;
  skipStarNodeCreationForDimensions=builderConfig.getSkipStarNodeCreationForDimensions();
  skipMaterializationForDimensions=builderConfig.getSkipMaterializationForDimensions();
  skipMaterializationCardinalityThreshold=builderConfig.getSkipMaterializationCardinalityThreshold();
  enableOffHeapFormat=builderConfig.isEnableOffHealpFormat();
  this.maxLeafRecords=builderConfig.maxLeafRecords;
  this.outDir=builderConfig.getOutDir();
  if (outDir == null) {
    outDir=new File(System.getProperty("java.io.tmpdir"),V1Constants.STAR_TREE_INDEX_DIR + "_" + DateTime.now());
  }
  LOG.debug("Index output directory:{}",outDir);
  dimensionTypes=new ArrayList<>();
  dimensionNames=new ArrayList<>();
  dimensionNameToIndexMap=HashBiMap.create();
  dimensionNameToStarValueMap=new HashMap<>();
  dictionaryMap=new HashMap<>();
  List<DimensionFieldSpec> dimensionFieldSpecs=schema.getDimensionFieldSpecs();
  for (int index=0; index < dimensionFieldSpecs.size(); index++) {
    DimensionFieldSpec spec=dimensionFieldSpecs.get(index);
    String dimensionName=spec.getName();
    dimensionNames.add(dimensionName);
    dimensionNameToIndexMap.put(dimensionName,index);
    Object starValue;
    starValue=getAllStarValue(spec);
    dimensionNameToStarValueMap.put(dimensionName,starValue);
    dimensionTypes.add(spec.getDataType());
    HashBiMap<Object,Integer> dictionary=HashBiMap.create();
    dictionaryMap.put(dimensionName,dictionary);
  }
  if (timeColumnName != null) {
    dimensionNames.add(timeColumnName);
    TimeFieldSpec timeFieldSpec=schema.getTimeFieldSpec();
    dimensionTypes.add(timeFieldSpec.getDataType());
    int index=dimensionNameToIndexMap.size();
    dimensionNameToIndexMap.put(timeColumnName,index);
    Object starValue;
    starValue=getAllStarValue(timeFieldSpec);
    dimensionNameToStarValueMap.put(timeColumnName,starValue);
    HashBiMap<Object,Integer> dictionary=HashBiMap.create();
    dictionaryMap.put(schema.getTimeColumnName(),dictionary);
  }
  dimensionSizeBytes=dimensionNames.size() * Integer.SIZE / 8;
  this.numDimensions=dimensionNames.size();
  this.metricNames=new ArrayList<>();
  this.metricNameToIndexMap=new HashMap<>();
  this.metricSizeBytes=0;
  List<MetricFieldSpec> metricFieldSpecs=schema.getMetricFieldSpecs();
  for (int index=0; index < metricFieldSpecs.size(); index++) {
    MetricFieldSpec spec=metricFieldSpecs.get(index);
    String metricName=spec.getName();
    metricNames.add(metricName);
    metricNameToIndexMap.put(metricName,index);
    metricSizeBytes+=spec.getFieldSize();
  }
  numMetrics=metricNames.size();
  builderConfig.getOutDir().mkdirs();
  dataFile=new File(outDir,"star-tree.buf");
  LOG.debug("StarTree output data file: {}",dataFile.getAbsolutePath());
  dataBuffer=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(dataFile)));
  this.starTreeRootIndexNode=new StarTreeIndexNode();
  this.starTreeRootIndexNode.setDimensionName(StarTreeIndexNodeInterf.ALL);
  this.starTreeRootIndexNode.setDimensionValue(StarTreeIndexNodeInterf.ALL);
  this.starTreeRootIndexNode.setLevel(0);
  LOG.debug("dimensionNames:{}",dimensionNames);
  LOG.debug("metricNames:{}",metricNames);
}
