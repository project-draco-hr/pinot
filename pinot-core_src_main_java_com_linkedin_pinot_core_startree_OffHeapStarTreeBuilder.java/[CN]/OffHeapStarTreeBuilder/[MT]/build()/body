{
  if (skipMaterializationForDimensions == null || skipMaterializationForDimensions.isEmpty()) {
    skipMaterializationForDimensions=computeDefaultDimensionsToSkipMaterialization();
  }
  if (dimensionsSplitOrder == null || dimensionsSplitOrder.isEmpty()) {
    dimensionsSplitOrder=computeDefaultSplitOrder();
    dimensionsSplitOrder.removeAll(skipMaterializationForDimensions);
  }
 else {
    skipMaterializationForDimensions.removeAll(dimensionsSplitOrder);
  }
  LOG.debug("Split order: {}",dimensionsSplitOrder);
  LOG.debug("Skip Materilazitaion For Dimensions: {}",skipMaterializationForDimensions);
  long start=System.currentTimeMillis();
  dataBuffer.flush();
  sort(dataFile,0,rawRecordCount);
  constructStarTree(starTreeRootIndexNode,0,rawRecordCount,0,dataFile);
  if (timeColumnName != null && !skipMaterializationForDimensions.contains(timeColumnName) && !dimensionsSplitOrder.contains(timeColumnName)) {
    splitLeafNodesOnTimeColumn();
  }
  createAggDocForAllNodes(starTreeRootIndexNode);
  long end=System.currentTimeMillis();
  LOG.debug("Took {} ms to build star tree index. Original records:{} Materialized record:{}",(end - start),rawRecordCount,aggRecordCount);
  starTree=new StarTree(starTreeRootIndexNode,dimensionNameToIndexMap);
  File treeBinary=new File(outDir,"star-tree.bin");
  if (enableOffHeapFormat) {
    LOG.debug("Saving tree in off-heap binary format at: {} ",treeBinary);
    StarTreeSerDe.writeTreeOffHeapFormat(starTree,treeBinary);
  }
 else {
    LOG.debug("Saving tree in on-heap binary at: {} ",treeBinary);
    StarTreeSerDe.writeTreeOnHeapFormat(starTree,treeBinary);
  }
  printTree(starTreeRootIndexNode,0);
  LOG.debug("Finished build tree. out dir: {} ",outDir);
  dataBuffer.close();
}
