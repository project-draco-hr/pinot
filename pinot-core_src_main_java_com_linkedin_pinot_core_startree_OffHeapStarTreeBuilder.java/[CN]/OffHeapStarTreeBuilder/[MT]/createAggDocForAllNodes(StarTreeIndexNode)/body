{
  MetricBuffer aggMetricBuffer=null;
  if (node.isLeaf()) {
    StarTreeDataTable leafDataTable=new StarTreeDataTable(dataFile,dimensionSizeBytes,metricSizeBytes,null);
    Iterator<Pair<byte[],byte[]>> iterator=leafDataTable.iterator(node.getStartDocumentId(),node.getEndDocumentId());
    Pair<byte[],byte[]> first=iterator.next();
    aggMetricBuffer=MetricBuffer.fromBytes(first.getRight(),schema.getMetricFieldSpecs());
    while (iterator.hasNext()) {
      Pair<byte[],byte[]> next=iterator.next();
      MetricBuffer metricBuffer=MetricBuffer.fromBytes(next.getRight(),schema.getMetricFieldSpecs());
      aggMetricBuffer.aggregate(metricBuffer);
    }
  }
 else {
    Iterator<StarTreeIndexNode> childrenIterator=node.getChildrenIterator();
    while (childrenIterator.hasNext()) {
      StarTreeIndexNode child=childrenIterator.next();
      MetricBuffer childMetricBuffer=createAggDocForAllNodes(child);
      if (child.getDimensionValue() == StarTreeIndexNodeInterf.ALL) {
        continue;
      }
      if (aggMetricBuffer == null) {
        aggMetricBuffer=new MetricBuffer(childMetricBuffer);
      }
 else {
        aggMetricBuffer.aggregate(childMetricBuffer);
      }
    }
  }
  Map<Integer,Integer> pathValues=node.getPathValues();
  DimensionBuffer dimensionBuffer=new DimensionBuffer(numDimensions);
  for (int i=0; i < numDimensions; i++) {
    if (pathValues.containsKey(i)) {
      dimensionBuffer.setDimension(i,pathValues.get(i));
    }
 else {
      dimensionBuffer.setDimension(i,StarTreeIndexNodeInterf.ALL);
    }
  }
  node.setAggregatedDocumentId(rawRecordCount + aggRecordCount);
  appendToAggBuffer(dimensionBuffer,aggMetricBuffer);
  return aggMetricBuffer;
}
