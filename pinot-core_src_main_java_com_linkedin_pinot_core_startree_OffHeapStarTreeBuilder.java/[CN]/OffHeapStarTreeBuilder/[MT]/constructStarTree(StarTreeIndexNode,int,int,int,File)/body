{
  int docsAdded=0;
  if (level == dimensionsSplitOrder.size()) {
    return 0;
  }
  String splitDimensionName=dimensionsSplitOrder.get(level);
  Integer splitDimensionId=dimensionNameToIndexMap.get(splitDimensionName);
  LOG.debug("Building tree at level:{} using file:{} from startDoc:{} endDocId:{} splitting on dimension:{}",level,file.getName(),startDocId,endDocId,splitDimensionName);
  Map<Integer,IntPair> sortGroupBy=groupBy(startDocId,endDocId,splitDimensionId,file);
  LOG.debug("Group stats:{}",sortGroupBy);
  node.setChildDimensionName(splitDimensionId);
  node.setChildren(new HashMap<Integer,StarTreeIndexNode>());
  for (  int childDimensionValue : sortGroupBy.keySet()) {
    StarTreeIndexNode child=new StarTreeIndexNode();
    child.setDimensionName(splitDimensionId);
    child.setDimensionValue(childDimensionValue);
    child.setParent(node);
    child.setLevel(node.getLevel() + 1);
    node.addChild(child,childDimensionValue);
    int childDocs=0;
    IntPair range=sortGroupBy.get(childDimensionValue);
    if (range.getRight() - range.getLeft() > maxLeafRecords) {
      childDocs=constructStarTree(child,range.getLeft(),range.getRight(),level + 1,file);
      docsAdded+=childDocs;
    }
    if (childDocs == 0) {
      child.setStartDocumentId(range.getLeft());
      child.setEndDocumentId(range.getRight());
    }
  }
  if (skipStarNodeCreationForDimensions != null && skipStarNodeCreationForDimensions.contains(splitDimensionName)) {
    return docsAdded;
  }
  StarTreeIndexNode starChild=new StarTreeIndexNode();
  starChild.setDimensionName(splitDimensionId);
  starChild.setDimensionValue(StarTreeIndexNodeInterf.ALL);
  starChild.setParent(node);
  starChild.setLevel(node.getLevel() + 1);
  node.addChild(starChild,StarTreeIndexNodeInterf.ALL);
  Iterator<Pair<DimensionBuffer,MetricBuffer>> iterator=uniqueCombinations(startDocId,endDocId,file,splitDimensionId);
  int rowsAdded=0;
  int startOffset=rawRecordCount + aggRecordCount;
  while (iterator.hasNext()) {
    Pair<DimensionBuffer,MetricBuffer> next=iterator.next();
    DimensionBuffer dimension=next.getLeft();
    MetricBuffer metricsHolder=next.getRight();
    LOG.debug("Adding row:{}",dimension);
    appendToAggBuffer(dimension,metricsHolder);
    rowsAdded++;
  }
  docsAdded+=rowsAdded;
  LOG.debug("Added {} additional records at level {}",rowsAdded,level);
  dataBuffer.flush();
  int childDocs=0;
  if (rowsAdded >= maxLeafRecords) {
    sort(dataFile,startOffset,startOffset + rowsAdded);
    childDocs=constructStarTree(starChild,startOffset,startOffset + rowsAdded,level + 1,dataFile);
    docsAdded+=childDocs;
  }
  if (childDocs == 0) {
    starChild.setStartDocumentId(startOffset);
    starChild.setEndDocumentId(startOffset + rowsAdded);
  }
  return docsAdded;
}
