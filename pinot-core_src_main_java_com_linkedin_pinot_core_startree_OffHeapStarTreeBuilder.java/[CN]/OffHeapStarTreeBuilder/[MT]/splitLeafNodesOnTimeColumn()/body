{
  Queue<StarTreeIndexNode> nodes=new LinkedList<>();
  nodes.add(starTreeRootIndexNode);
  StarTreeDataTableOptimized table=new StarTreeDataTableOptimized(dataFile,dimensionSizeBytes,metricSizeBytes);
  while (!nodes.isEmpty()) {
    StarTreeIndexNode node=nodes.remove();
    if (node.isLeaf()) {
      if (timeColumnName != null) {
        int level=node.getLevel();
        int[] newSortOrder=moveColumnInSortOrder(timeColumnName,getSortOrder(),level);
        int startDocId=node.getStartDocumentId();
        int endDocId=node.getEndDocumentId();
        table.sort(startDocId,endDocId,newSortOrder);
        int timeColIndex=dimensionNameToIndexMap.get(timeColumnName);
        Map<Integer,IntPair> timeColumnRangeMap=table.groupByIntColumnCount(startDocId,endDocId,timeColIndex);
        node.setChildDimensionName(timeColIndex);
        node.setChildren(new HashMap<Integer,StarTreeIndexNode>());
        for (        int timeValue : timeColumnRangeMap.keySet()) {
          IntPair range=timeColumnRangeMap.get(timeValue);
          StarTreeIndexNode child=new StarTreeIndexNode();
          child.setDimensionName(timeColIndex);
          child.setDimensionValue(timeValue);
          child.setParent(node);
          child.setLevel(node.getLevel() + 1);
          child.setStartDocumentId(range.getLeft());
          child.setEndDocumentId(range.getRight());
          node.getChildren().put(timeValue,child);
        }
      }
    }
 else {
      nodes.addAll(node.getChildren().values());
    }
  }
  table.close();
}
