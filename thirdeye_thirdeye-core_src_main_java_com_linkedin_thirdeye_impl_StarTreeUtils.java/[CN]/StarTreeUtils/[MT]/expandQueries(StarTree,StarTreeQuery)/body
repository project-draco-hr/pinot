{
  Set<String> dimensionsToExpand=new HashSet<String>();
  List<DimensionSpec> dimensionSpecs=starTree.getConfig().getDimensions();
  for (int i=0; i < dimensionSpecs.size(); i++) {
    if (StarTreeConstants.ALL.equals(baseQuery.getDimensionKey().getDimensionValues()[i])) {
      dimensionsToExpand.add(dimensionSpecs.get(i).getName());
    }
  }
  List<StarTreeQuery> queries=new LinkedList<StarTreeQuery>();
  queries.add(baseQuery);
  for (  String dimensionName : dimensionsToExpand) {
    List<StarTreeQuery> expandedQueries=new ArrayList<StarTreeQuery>();
    for (    StarTreeQuery query : queries) {
      Map<String,Collection<String>> dimensionValues=new HashMap<String,Collection<String>>(dimensionSpecs.size());
      for (int i=0; i < dimensionSpecs.size(); i++) {
        dimensionValues.put(dimensionSpecs.get(i).getName(),Collections.singletonList(query.getDimensionKey().getDimensionValues()[i]));
      }
      Set<String> values=starTree.getDimensionValues(dimensionName,dimensionValues);
      for (      String value : values) {
        String[] newValues=new String[dimensionSpecs.size()];
        for (int i=0; i < dimensionSpecs.size(); i++) {
          newValues[i]=dimensionSpecs.get(i).getName().equals(dimensionName) ? value : query.getDimensionKey().getDimensionValues()[i];
        }
        expandedQueries.add(new StarTreeQueryImpl.Builder().setDimensionKey(new DimensionKey(newValues)).setTimeRange(query.getTimeRange()).build(starTree.getConfig()));
      }
    }
    queries=expandedQueries;
  }
  return queries;
}
