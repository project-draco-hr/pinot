{
  Utils.logVersions();
  component.getServers().add(Protocol.HTTP,Integer.parseInt(config.getControllerPort()));
  component.getClients().add(Protocol.FILE);
  component.getClients().add(Protocol.JAR);
  component.getClients().add(Protocol.WAR);
  final Context applicationContext=component.getContext().createChildContext();
  LOGGER.info("injecting conf and resource manager to the api context");
  applicationContext.getAttributes().put(ControllerConf.class.toString(),config);
  applicationContext.getAttributes().put(PinotHelixResourceManager.class.toString(),helixResourceManager);
  controllerRestApp.setContext(applicationContext);
  component.getDefaultHost().attach(controllerRestApp);
  try {
    LOGGER.info("starting pinot helix resource manager");
    helixResourceManager.start();
    LOGGER.info("starting api component");
    component.start();
    LOGGER.info("starting retention manager");
    retentionManager.start();
    LOGGER.info("starting validation manager");
    validationManager.start();
    LOGGER.info("starting realtime segments manager");
    realtimeSegmentsManager.start();
  }
 catch (  final Exception e) {
    LOGGER.error("Caught exception while starting controller",e);
    Utils.rethrowException(e);
    throw new AssertionError("Should not reach this");
  }
  MetricsHelper.initializeMetrics(config.subset("pinot.controller.metrics"));
  MetricsHelper.registerMetricsRegistry(_metricsRegistry);
  final ControllerMetrics controllerMetrics=new ControllerMetrics(_metricsRegistry);
  controllerMetrics.addCallbackGauge("helix.connected",new Callable<Long>(){
    @Override public Long call() throws Exception {
      return helixResourceManager.getHelixZkManager().isConnected() ? 1L : 0L;
    }
  }
);
  controllerMetrics.addCallbackGauge("helix.leader",new Callable<Long>(){
    @Override public Long call() throws Exception {
      return helixResourceManager.getHelixZkManager().isLeader() ? 1L : 0L;
    }
  }
);
  helixResourceManager.getHelixZkManager().addPreConnectCallback(new PreConnectCallback(){
    @Override public void onPreConnect(){
      controllerMetrics.addMeteredValue(null,ControllerMeter.HELIX_ZOOKEEPER_RECONNECTS,1L);
    }
  }
);
}
