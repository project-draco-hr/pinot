{
  LOGGER.info("Starting Pinot controller");
  Utils.logVersions();
  component.getServers().add(Protocol.HTTP,Integer.parseInt(config.getControllerPort()));
  component.getClients().add(Protocol.FILE);
  component.getClients().add(Protocol.JAR);
  final Context applicationContext=component.getContext().createChildContext();
  LOGGER.info("Injecting configuration and resource manager to the API context");
  applicationContext.getAttributes().put(ControllerConf.class.toString(),config);
  applicationContext.getAttributes().put(PinotHelixResourceManager.class.toString(),helixResourceManager);
  MultiThreadedHttpConnectionManager connectionManager=new MultiThreadedHttpConnectionManager();
  connectionManager.getParams().setConnectionTimeout(config.getServerAdminRequestTimeoutSeconds());
  applicationContext.getAttributes().put(HttpConnectionManager.class.toString(),connectionManager);
  applicationContext.getAttributes().put(Executor.class.toString(),executorService);
  controllerRestApp.setContext(applicationContext);
  component.getDefaultHost().attach(controllerRestApp);
  MetricsHelper.initializeMetrics(config.subset("pinot.controller.metrics"));
  MetricsHelper.registerMetricsRegistry(_metricsRegistry);
  final ControllerMetrics controllerMetrics=new ControllerMetrics(_metricsRegistry);
  try {
    LOGGER.info("Starting Pinot Helix resource manager and connecting to Zookeeper");
    helixResourceManager.start();
    PinotLLCRealtimeSegmentManager.create(helixResourceManager,config);
    LOGGER.info("Starting Pinot REST API component");
    component.start();
    LOGGER.info("Starting retention manager");
    retentionManager.start();
    LOGGER.info("Starting validation manager");
    validationManager.start();
    LOGGER.info("Starting realtime segment manager");
    realtimeSegmentsManager.start(controllerMetrics);
    LOGGER.info("Starting segment status manager");
    segmentStatusChecker.start(controllerMetrics);
    LOGGER.info("Pinot controller ready and listening on port {} for API requests",config.getControllerPort());
    LOGGER.info("Controller services available at http://{}:{}/",config.getControllerHost(),config.getControllerPort());
  }
 catch (  final Exception e) {
    LOGGER.error("Caught exception while starting controller",e);
    Utils.rethrowException(e);
    throw new AssertionError("Should not reach this");
  }
  controllerMetrics.addCallbackGauge("helix.connected",new Callable<Long>(){
    @Override public Long call() throws Exception {
      return helixResourceManager.getHelixZkManager().isConnected() ? 1L : 0L;
    }
  }
);
  controllerMetrics.addCallbackGauge("helix.leader",new Callable<Long>(){
    @Override public Long call() throws Exception {
      return helixResourceManager.getHelixZkManager().isLeader() ? 1L : 0L;
    }
  }
);
  helixResourceManager.getHelixZkManager().addPreConnectCallback(new PreConnectCallback(){
    @Override public void onPreConnect(){
      controllerMetrics.addMeteredGlobalValue(ControllerMeter.HELIX_ZOOKEEPER_RECONNECTS,1L);
    }
  }
);
  controllerMetrics.initializeGlobalMeters();
  ControllerRestApplication.setControllerMetrics(controllerMetrics);
}
