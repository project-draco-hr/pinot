{
  int totalDocs=1000000;
  int maxRange=10000;
  int minRange=1000;
  long randomSeed=System.currentTimeMillis();
  Random r=new Random(randomSeed);
  int numLists=3;
  List<List<IntPair>> sortedRangePairsList=new ArrayList<>();
  List<Set<Integer>> rawIdSetList=new ArrayList<>();
  for (int i=0; i < numLists; i++) {
    List<IntPair> pairs=new ArrayList<>();
    Set<Integer> rawIdSet=new HashSet<>();
    int docId=0;
    while (docId < totalDocs) {
      int start=docId + r.nextInt(maxRange);
      int end=start + Math.max(minRange,r.nextInt(maxRange));
      if (end < totalDocs) {
        pairs.add(Pairs.intPair(start,end));
        for (int id=start; id <= end; id++) {
          rawIdSet.add(id);
        }
      }
      docId=end + 1;
    }
    sortedRangePairsList.add(pairs);
    rawIdSetList.add(rawIdSet);
  }
  List<IntPair> expected=new ArrayList<>();
  int tempStart=-1;
  for (int id=0; id < totalDocs; id++) {
    boolean foundInAll=true;
    for (int i=0; i < numLists; i++) {
      if (!rawIdSetList.get(i).contains(id)) {
        foundInAll=false;
        break;
      }
    }
    if (foundInAll) {
      if (tempStart == -1) {
        tempStart=id;
      }
    }
 else {
      if (tempStart != -1) {
        expected.add(Pairs.intPair(tempStart,id - 1));
        tempStart=-1;
      }
    }
  }
  List<IntPair> actual=SortedRangeIntersection.intersectSortedRangeSets(sortedRangePairsList);
  if (!actual.equals(expected)) {
    LOGGER.error("Actual pairs not equal to expected pairs.");
    LOGGER.error("Actual pairs: {}",actual);
    LOGGER.error("Expected pairs: {}",expected);
    LOGGER.error("Random seed: {}",randomSeed);
    LOGGER.error("Sorted range pairs list: {}",sortedRangePairsList);
    Assert.fail();
  }
}
