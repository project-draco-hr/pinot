{
  Map<String,Map<Long,StarTreeRecord>> records=StarTreeJobUtils.aggregateRecords(config,avroRecords,numTimeBuckets);
  LOG.info("Writing {} aggregate records to {}",records.size(),nodeId.toString());
  List<StarTreeRecord> mergedRecords=new ArrayList<StarTreeRecord>();
  for (  Map<Long,StarTreeRecord> timeBucket : records.values()) {
    for (    Map.Entry<Long,StarTreeRecord> entry : timeBucket.entrySet()) {
      mergedRecords.add(entry.getValue());
    }
  }
  int nextValueId=StarTreeConstants.FIRST_VALUE;
  Map<String,Map<String,Integer>> forwardIndex=new HashMap<String,Map<String,Integer>>();
  for (  StarTreeRecord record : mergedRecords) {
    for (    String dimensionName : config.getDimensionNames()) {
      Map<String,Integer> forward=forwardIndex.get(dimensionName);
      if (forward == null) {
        forward=new HashMap<String,Integer>();
        forward.put(StarTreeConstants.STAR,StarTreeConstants.STAR_VALUE);
        forward.put(StarTreeConstants.OTHER,StarTreeConstants.OTHER_VALUE);
        forwardIndex.put(dimensionName,forward);
      }
      String dimensionValue=record.getDimensionValues().get(dimensionName);
      Integer valueId=forward.get(dimensionValue);
      if (valueId == null) {
        forward.put(dimensionValue,nextValueId++);
      }
    }
  }
  Path bufferPath=new Path(outputPath,nodeId + StarTreeRecordStoreFactoryCircularBufferImpl.BUFFER_SUFFIX);
  OutputStream outputStream=new BufferedOutputStream(FileSystem.get(context.getConfiguration()).create(bufferPath,true));
  StarTreeRecordStoreCircularBufferImpl.fillBuffer(outputStream,config.getDimensionNames(),config.getMetricNames(),forwardIndex,mergedRecords,numTimeBuckets,true);
  outputStream.flush();
  outputStream.close();
  Path indexPath=new Path(outputPath,nodeId.toString() + StarTreeRecordStoreFactoryCircularBufferImpl.INDEX_SUFFIX);
  outputStream=FileSystem.get(context.getConfiguration()).create(indexPath,true);
  OBJECT_MAPPER.writeValue(outputStream,forwardIndex);
  outputStream.flush();
  outputStream.close();
}
