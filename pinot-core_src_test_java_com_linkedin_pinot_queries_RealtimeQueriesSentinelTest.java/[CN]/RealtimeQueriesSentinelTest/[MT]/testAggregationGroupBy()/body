{
  final List<TestGroupByAggreationQuery> groupByCalls=AVRO_QUERY_GENERATOR.giveMeNGroupByAggregationQueries(10000);
  int counter=0;
  final Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  for (  final TestGroupByAggreationQuery groupBy : groupByCalls) {
    LOGGER.info("running " + counter + " : "+ groupBy.pql);
    final BrokerRequest brokerRequest=RequestConverter.fromJSON(REQUEST_COMPILER.compile(groupBy.pql));
    InstanceRequest instanceRequest=new InstanceRequest(counter++,brokerRequest);
    instanceRequest.setSearchSegments(new ArrayList<String>());
    instanceRequest.getSearchSegments().add("testTable_testTable");
    DataTable instanceResponse=QUERY_EXECUTOR.processQuery(instanceRequest);
    instanceResponseMap.clear();
    instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
    Map<Object,Double> expected=groupBy.groupResults;
    LOGGER.info("Result from avro is : " + expected);
    BrokerResponse brokerResponse=REDUCE_SERVICE.reduceOnDataTable(brokerRequest,instanceResponseMap);
    LOGGER.info("BrokerResponse is " + brokerResponse.getAggregationResults().get(0));
    JSONArray actual=brokerResponse.getAggregationResults().get(0).getJSONArray("groupByResult");
    try {
      assertGroupByResults(actual,expected);
    }
 catch (    AssertionError e) {
      System.out.println("***************************************");
      System.out.println("query : " + groupBy.pql);
      System.out.println("actual : " + actual.toString(1));
      System.out.println("expected : " + groupBy.groupResults);
      System.out.println("***************************************");
      throw e;
    }
  }
}
