{
  if (matchingNode == null) {
    List<String> dimensionNames=indexSegment.getSegmentMetadata().getSchema().getDimensionNames();
    List<FilterQueryTree> conjunctions=null;
    if (filterQueryTree != null) {
      if (filterQueryTree.getChildren() == null) {
        conjunctions=ImmutableList.of(filterQueryTree);
      }
 else {
        conjunctions=filterQueryTree.getChildren();
      }
    }
    Map<String,String> pathValues=new HashMap<>();
    if (conjunctions != null) {
      for (      FilterQueryTree clause : conjunctions) {
        String column=clause.getColumn();
        String value=clause.getValue().get(0);
        pathValues.put(column,value);
      }
    }
    StarTreeIndexNode current=indexSegment.getStarTreeRoot();
    while (current != null && !current.isLeaf()) {
      String nextDimension=dimensionNames.get(current.getChildDimensionName());
      String nextValue=pathValues.get(nextDimension);
      DataSource dataSource=indexSegment.getDataSource(nextDimension);
      int nextValueId;
      if (nextValue == null) {
        nextValueId=StarTreeIndexNode.all();
      }
 else {
        nextValueId=dataSource.getDictionary().indexOf(nextValue);
      }
      current=current.getChildren().get(nextValueId);
    }
    if (current == null) {
      return new StarTreeOperator(Constants.EOF,Constants.EOF,null);
    }
    matchingNode=current;
    for (    Map.Entry<Integer,Integer> entry : matchingNode.getPathValues().entrySet()) {
      String dimensionName=dimensionNames.get(entry.getKey());
      pathValues.remove(dimensionName);
    }
    List<Operator> scanOperators=new ArrayList<>();
    for (    Map.Entry<String,String> entry : pathValues.entrySet()) {
      Predicate predicate=new EqPredicate(entry.getKey(),Collections.singletonList(entry.getValue()));
      ScanBasedFilterOperator operator=new ScanBasedFilterOperator(indexSegment.getDataSource(entry.getKey()));
      operator.setPredicate(predicate);
      scanOperators.add(operator);
    }
    AndOperator andOperator=null;
    if (!scanOperators.isEmpty()) {
      andOperator=new AndOperator(scanOperators);
    }
    Integer startDocumentId=matchingNode.getStartDocumentId();
    Integer endDocumentId=startDocumentId + matchingNode.getDocumentCount() - 1;
    starTreeOperator=new StarTreeOperator(startDocumentId,endDocumentId,andOperator);
  }
  return starTreeOperator;
}
