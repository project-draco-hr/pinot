{
  LOGGER.info("Executing {}",jobDescription);
  try {
    File reportConfigFile=new File(jobDataMap.get(ReportConstants.CONFIG_FILE_KEY).toString());
    reportConfig=ReportConfig.decode(new FileInputStream(reportConfigFile));
    templatePath=jobDataMap.getString(ReportConstants.TEMPLATE_PATH_KEY).toString();
    collection=reportConfig.getCollection();
    serverUri=jobDataMap.get(ReportConstants.SERVER_URI_KEY).toString();
    dashboardUri=jobDataMap.getString(ReportConstants.DASHBOARD_URI_KEY.toString());
    createThirdeyeClient();
    starTreeConfig=thirdeyeClient.getStarTreeConfig(collection);
    ScheduleSpec scheduleSpec=reportConfig.getSchedules().get(jobDescription);
    int aggregationSize=scheduleSpec.getAggregationSize();
    TimeUnit aggregationUnit=scheduleSpec.getAggregationUnit();
    int lagSize=scheduleSpec.getLagSize();
    TimeUnit lagUnit=scheduleSpec.getLagUnit();
    List<Table> tables=new ArrayList<Table>();
    Map<String,AnomalyReportTable> anomalyReportTables=null;
    List<TimeRange> missingSegments=null;
    for (    TableSpec tableSpec : reportConfig.getTables()) {
      LOGGER.info("Collecting data for table {}",tableSpec);
      int baselineSize=tableSpec.getBaselineSize();
      TimeUnit baselineUnit=tableSpec.getBaselineUnit();
      DateTime endTime=new DateTime().minus(TimeUnit.MILLISECONDS.convert(lagSize,lagUnit));
      DateTime currentEndHour=new DateTime(DateUtils.truncate(new Date(endTime.getMillis()),Calendar.HOUR));
      DateTime baselineEndHour=currentEndHour.minus(TimeUnit.MILLISECONDS.convert(baselineSize,baselineUnit));
      DateTime currentStartHour=currentEndHour.minus(TimeUnit.MILLISECONDS.convert(scheduleSpec.getReportWindow() * scheduleSpec.getAggregationSize(),scheduleSpec.getAggregationUnit()));
      DateTime baselineStartHour=baselineEndHour.minus(TimeUnit.MILLISECONDS.convert(scheduleSpec.getReportWindow() * scheduleSpec.getAggregationSize(),scheduleSpec.getAggregationUnit()));
      reportConfig.setStartTime(currentStartHour.withZone(DateTimeZone.forID(reportConfig.getTimezone())));
      reportConfig.setStartTimeString(ReportConstants.DATE_TIME_FORMATTER.print(reportConfig.getStartTime()));
      reportConfig.setEndTime(currentEndHour.withZone(DateTimeZone.forID(reportConfig.getTimezone())));
      reportConfig.setEndTimeString(ReportConstants.DATE_TIME_FORMATTER.print(reportConfig.getEndTime()));
      missingSegments=SegmentDescriptorUtils.checkSegments(serverUri,collection,reportConfig.getTimezone(),reportConfig.getStartTime(),reportConfig.getEndTime(),baselineStartHour.withZone(DateTimeZone.forID(reportConfig.getTimezone())),baselineEndHour.withZone(DateTimeZone.forID(reportConfig.getTimezone())));
      if (missingSegments != null && missingSegments.size() != 0) {
        ReportEmailSender.sendErrorReport(missingSegments,scheduleSpec,reportConfig);
      }
      URL thirdeyeUri=ThirdeyeUrlUtils.getThirdeyeUri(reportConfig.getDashboardUri(),collection,scheduleSpec,tableSpec,baselineEndHour.minus(TimeUnit.MILLISECONDS.convert(DEFAULT_AGGREGATION_GRANULARITY,DEFAULT_AGGREGATION_UNIT)).getMillis(),currentEndHour.minus(TimeUnit.MILLISECONDS.convert(DEFAULT_AGGREGATION_GRANULARITY,DEFAULT_AGGREGATION_UNIT)).getMillis());
      LOGGER.info("Generating Thirdeye URL {}",thirdeyeUri);
      Map<String,String> dimensionValues=DimensionKeyUtils.createDimensionValues(tableSpec);
      LOGGER.info("Generated dimension values");
      Map<String,List<ReportRow>> metricTableRows=new HashMap<>();
      List<TableReportRow> tableReportRows=new ArrayList<>();
      for (int i=0; i < scheduleSpec.getReportWindow(); i++) {
        currentEndHour=currentStartHour.plus(TimeUnit.MILLISECONDS.convert(aggregationSize,aggregationUnit));
        baselineEndHour=baselineStartHour.plus(TimeUnit.MILLISECONDS.convert(aggregationSize,aggregationUnit));
        for (        String metric : tableSpec.getMetrics()) {
          LOGGER.info("Metric : " + metric);
          String currentSql=SqlUtils.getSql(metric,collection,currentStartHour,currentEndHour,dimensionValues);
          String baselineSql=SqlUtils.getSql(metric,collection,baselineStartHour,baselineEndHour,dimensionValues);
          LOGGER.info("Current sql : " + currentSql);
          LOGGER.info("Baseline sql : " + baselineSql);
          ThirdEyeRawResponse currentQueryResult=thirdeyeClient.getRawResponse(currentSql);
          ThirdEyeRawResponse baselineQueryResult=thirdeyeClient.getRawResponse(baselineSql);
          LOGGER.info("Applying filters");
          Map<DimensionKey,Number> currentReportOutput=applyFilters(currentQueryResult,tableSpec,metric,currentStartHour,currentEndHour);
          Map<DimensionKey,Number> baselineReportOutput=applyFilters(baselineQueryResult,tableSpec,metric,baselineStartHour,baselineEndHour);
          LOGGER.info("Creating report rows");
          List<ReportRow> reportRows;
          if (tableSpec.getGroupBy() != null) {
            reportRows=createRow(currentStartHour,currentEndHour,baselineStartHour,baselineEndHour,currentReportOutput,baselineReportOutput,metric,currentQueryResult.getDimensions().indexOf(tableSpec.getGroupBy()));
          }
 else {
            reportRows=createRow(currentStartHour,currentEndHour,baselineStartHour,baselineEndHour,currentReportOutput,baselineReportOutput,metric,-1);
          }
          if (metricTableRows.get(metric) == null) {
            metricTableRows.put(metric,reportRows);
          }
 else {
            metricTableRows.get(metric).addAll(reportRows);
          }
        }
        currentStartHour=currentEndHour;
        baselineStartHour=baselineEndHour;
      }
      LOGGER.info("Calculating summary row");
      calculateSummaryRow(metricTableRows);
      LOGGER.info("Calculating ratio summary row");
      calculateRatioTotal(metricTableRows);
      tableReportRows=getGroupBy(metricTableRows,tableSpec.getMetrics());
      if (scheduleSpec.isFindAnomalies() && reportConfig.getDbconfig() != null) {
        if (anomalyReportTables == null) {
          anomalyReportTables=new HashMap<String,AnomalyReportTable>();
        }
        LOGGER.info("Finding anomalies...");
        AnomalyReportGeneratorApi anomalyReportGeneratorApi=new AnomalyReportGeneratorApi();
        anomalyReportTables.putAll(anomalyReportGeneratorApi.getAnomalies(reportConfig,tableSpec,collection));
      }
      Table table=new Table(tableReportRows,tableSpec,thirdeyeUri);
      tables.add(table);
    }
    LOGGER.info("Applying aliases");
    AliasSpec.alias(reportConfig,tables,anomalyReportTables);
    LOGGER.info("Creating data model");
    ReportEmailDataModel reportObjects=new ReportEmailDataModel(reportConfig,tables,anomalyReportTables,missingSegments,scheduleSpec,new ReportEmailCssSpec());
    ReportEmailSender reportEmailSender=new ReportEmailSender(reportObjects,templatePath);
    reportEmailSender.emailReport();
  }
 catch (  IOException e) {
    LOGGER.error("Job failed",e);
  }
}
