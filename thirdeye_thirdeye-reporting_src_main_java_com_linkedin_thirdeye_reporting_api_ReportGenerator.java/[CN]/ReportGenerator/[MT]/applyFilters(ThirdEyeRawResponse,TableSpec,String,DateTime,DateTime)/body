{
  Map<DimensionKey,Number> reportOutput=new HashMap<DimensionKey,Number>();
  String[] filteredDimension=new String[queryResult.getDimensions().size()];
  for (int i=0; i < queryResult.getDimensions().size(); i++) {
    if (tableSpec.getFixedDimensions() != null && tableSpec.getFixedDimensions().containsKey(queryResult.getDimensions().get(i))) {
      filteredDimension[i]=tableSpec.getFixedDimensions().get(queryResult.getDimensions().get(i));
    }
 else {
      filteredDimension[i]="*";
    }
  }
  Set<String> includeDimensions=new HashSet<>();
  Set<String> excludeDimensions=new HashSet<String>();
  int dimensionPosition=-1;
  if (tableSpec.getGroupBy() != null) {
    dimensionPosition=queryResult.getDimensions().indexOf(tableSpec.getGroupBy());
    if (tableSpec.getFilter() != null && tableSpec.getFilter().getIncludeDimensions() != null) {
      for (      String includeDimension : tableSpec.getFilter().getIncludeDimensions()) {
        filteredDimension[dimensionPosition]=includeDimension;
        includeDimensions.add(DimensionKeyUtils.createQueryKey(filteredDimension));
      }
      for (      Entry<String,Map<String,Number[]>> entry : queryResult.getData().entrySet()) {
        if (!includeDimensions.contains(entry.getKey())) {
          excludeDimensions.add(entry.getKey());
        }
      }
      for (      String excludeDimension : excludeDimensions) {
        queryResult.getData().remove(excludeDimension);
      }
    }
  }
  int metricPosition=0;
  MetricSchema schema=MetricSchema.fromMetricSpecs(starTreeConfig.getMetrics());
  for (int i=0; i < starTreeConfig.getMetrics().size(); i++) {
    if (metric.equals(starTreeConfig.getMetrics().get(i).getName())) {
      metricPosition=i;
      break;
    }
  }
  if (metric.startsWith("RATIO")) {
    for (    Entry<String,Map<String,Number[]>> entry : queryResult.getData().entrySet()) {
      DimensionKey dimensionKey=DimensionKeyUtils.createDimensionKey(entry.getKey());
      Map<String,Number[]> data=entry.getValue();
      double ratioSum=0;
      for (      Entry<String,Number[]> dataEntry : data.entrySet()) {
        if (!String.valueOf(endTime.getMillis()).equals(dataEntry.getKey())) {
          int position=queryResult.getMetrics().indexOf(metric);
          ratioSum+=dataEntry.getValue()[position].doubleValue();
        }
      }
      reportOutput.put(dimensionKey,ratioSum);
    }
  }
 else {
    for (    Entry<String,Map<String,Number[]>> entry : queryResult.getData().entrySet()) {
      DimensionKey dimensionKey=DimensionKeyUtils.createDimensionKey(entry.getKey());
      Map<String,Number[]> data=entry.getValue();
      MetricTimeSeries series=new MetricTimeSeries(schema);
      for (      Entry<String,Number[]> dataEntry : data.entrySet()) {
        if (!String.valueOf(endTime.getMillis()).equals(dataEntry.getKey())) {
          int position=queryResult.getMetrics().indexOf(metric);
          series.set(Long.valueOf(dataEntry.getKey()),metric,dataEntry.getValue()[position]);
        }
      }
      Number[] seriesSums=series.getMetricSums();
      reportOutput.put(dimensionKey,seriesSums[metricPosition]);
    }
  }
  return reportOutput;
}
