{
  LOGGER.info("Executing {}",context.getJobDetail().getDescription());
  try {
    File reportConfigFile=new File(context.getJobDetail().getJobDataMap().get(ReportConstants.CONFIG_FILE_KEY).toString());
    reportConfig=ReportConfig.decode(new FileInputStream(reportConfigFile));
    collection=reportConfig.getCollection();
    serverUri=context.getJobDetail().getJobDataMap().get(ReportConstants.SERVER_URI_KEY).toString();
    dashboardUri=context.getJobDetail().getJobDataMap().getString(ReportConstants.DASHBOARD_URI_KEY.toString());
    starTreeConfig=getStarTreeConfig();
    ScheduleSpec scheduleSpec=reportConfig.getSchedules().get(context.getJobDetail().getDescription());
    int aggregationSize=scheduleSpec.getAggregationSize();
    TimeUnit aggregationUnit=scheduleSpec.getAggregationUnit();
    int lagSize=scheduleSpec.getLagSize();
    TimeUnit lagUnit=scheduleSpec.getLagUnit();
    List<Table> tables=new ArrayList<Table>();
    List<AnomalyReportTable> anomalyReportTables=new ArrayList<AnomalyReportTable>();
    for (    TableSpec tableSpec : reportConfig.getTables()) {
      int baselineSize=tableSpec.getBaselineSize();
      TimeUnit baselineUnit=tableSpec.getBaselineUnit();
      DateTime endTime=new DateTime().minus(TimeUnit.MILLISECONDS.convert(lagSize,lagUnit));
      DateTime currentEndHour=new DateTime(DateUtils.truncate(new Date(endTime.getMillis()),Calendar.HOUR));
      DateTime baselineEndHour=currentEndHour.minus(TimeUnit.MILLISECONDS.convert(baselineSize,baselineUnit));
      DateTime currentStartHour=currentEndHour.minus(TimeUnit.MILLISECONDS.convert(scheduleSpec.getReportWindow() * scheduleSpec.getAggregationSize(),scheduleSpec.getAggregationUnit()));
      DateTime baselineStartHour=baselineEndHour.minus(TimeUnit.MILLISECONDS.convert(scheduleSpec.getReportWindow() * scheduleSpec.getAggregationSize(),scheduleSpec.getAggregationUnit()));
      reportConfig.setStartTime(currentStartHour);
      reportConfig.setEndTime(currentEndHour);
      Map<String,String> dimensionValues=new HashMap<String,String>();
      if (tableSpec.getGroupBy() != null) {
        dimensionValues.put(tableSpec.getGroupBy(),"!");
      }
      if (tableSpec.getFixedDimensions() != null) {
        dimensionValues.putAll(tableSpec.getFixedDimensions());
      }
      Map<String,List<ReportRow>> metricTableRows=new HashMap<>();
      List<GroupBy> groupBy=null;
      for (int i=0; i < scheduleSpec.getReportWindow(); i++) {
        currentEndHour=currentStartHour.plus(TimeUnit.MILLISECONDS.convert(aggregationSize,aggregationUnit));
        baselineEndHour=baselineStartHour.plus(TimeUnit.MILLISECONDS.convert(aggregationSize,aggregationUnit));
        for (        String metric : tableSpec.getMetrics()) {
          String currentSql=SqlUtils.getSql(metric,collection,currentStartHour,currentEndHour,dimensionValues);
          String baselineSql=SqlUtils.getSql(metric,collection,baselineStartHour,baselineEndHour,dimensionValues);
          QueryResult currentQueryResult=getReport(currentSql);
          QueryResult baselineQueryResult=getReport(baselineSql);
          Map<DimensionKey,Number> currentReportOutput=applyFilters(currentQueryResult,tableSpec,metric,currentStartHour,currentEndHour);
          Map<DimensionKey,Number> baselineReportOutput=applyFilters(baselineQueryResult,tableSpec,metric,baselineStartHour,baselineEndHour);
          List<ReportRow> reportRows;
          if (tableSpec.getGroupBy() != null) {
            reportRows=createRow(currentStartHour,currentEndHour,baselineStartHour,baselineEndHour,currentReportOutput,baselineReportOutput,metric,currentQueryResult.getDimensions().indexOf(tableSpec.getGroupBy()));
          }
 else {
            reportRows=createRow(currentStartHour,currentEndHour,baselineStartHour,baselineEndHour,currentReportOutput,baselineReportOutput,metric,-1);
          }
          if (metricTableRows.get(metric) == null) {
            metricTableRows.put(metric,reportRows);
          }
 else {
            metricTableRows.get(metric).addAll(reportRows);
          }
        }
        currentStartHour=currentEndHour;
        baselineStartHour=baselineEndHour;
      }
      calculateSummaryRow(metricTableRows,tableSpec);
      groupBy=getGroupBy(metricTableRows);
      if (scheduleSpec.isFindAnomalies()) {
        anomalyReportTables.addAll(getAnomalies(tableSpec));
      }
      URL thirdeyeUri=getThirdeyeURL(tableSpec,scheduleSpec);
      Table table=new Table(metricTableRows,tableSpec,groupBy,thirdeyeUri);
      tables.add(table);
    }
    if (reportConfig.getAliases() != null) {
      alias(tables);
    }
    ReportEmailSender reportEmailSender=new ReportEmailSender(tables,scheduleSpec,reportConfig,anomalyReportTables);
    reportEmailSender.emailReport();
  }
 catch (  IOException e) {
    LOGGER.error(e.toString());
  }
}
