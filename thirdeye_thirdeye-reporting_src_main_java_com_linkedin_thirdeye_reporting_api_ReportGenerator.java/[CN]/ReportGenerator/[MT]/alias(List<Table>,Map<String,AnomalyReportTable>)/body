{
  AliasSpec aliasSpec=reportConfig.getAliases();
  Map<String,String> metricMap=aliasSpec.getMetric();
  Map<String,String> dimensionMap=aliasSpec.getDimension();
  Map<String,Map<String,String>> dimensionValuesMap=aliasSpec.getDimensionValues();
  for (  Table table : tables) {
    String groupByDimension=table.getTableSpec().getGroupBy();
    if (groupByDimension != null && dimensionValuesMap != null && dimensionValuesMap.containsKey(groupByDimension)) {
      Map<String,String> dimensionValues=dimensionValuesMap.get(groupByDimension);
      for (      TableReportRow tableReportRow : table.getTableReportRows()) {
        GroupBy groupBy=tableReportRow.getGroupByDimensions();
        if (dimensionValues.containsKey(groupBy.getDimension())) {
          groupBy.setDimension(dimensionValues.get(groupBy.getDimension()));
        }
      }
    }
    if (metricMap != null) {
      for (      TableReportRow tableReportRow : table.getTableReportRows()) {
        for (        ReportRow reportRow : tableReportRow.getRows()) {
          if (metricMap.containsKey(reportRow.getMetric())) {
            reportRow.setMetric(metricMap.get(reportRow.getMetric()));
          }
        }
      }
    }
    if (dimensionMap != null && dimensionMap.containsKey(table.getTableSpec().getGroupBy())) {
      table.getTableSpec().setGroupBy(dimensionMap.get(table.getTableSpec().getGroupBy()));
    }
  }
  if (anomalyReportTables != null && metricMap != null) {
    for (    Entry<String,String> entry : metricMap.entrySet()) {
      if (anomalyReportTables.containsKey(entry.getKey())) {
        anomalyReportTables.put(entry.getValue(),anomalyReportTables.remove(entry.getKey()));
      }
    }
  }
}
