{
  int segmentCount=avroFiles.size();
  System.out.println("Building " + segmentCount + " segments in parallel");
  for (int i=1; i <= segmentCount; ++i) {
    final int segmentIndex=i - 1;
    final int segmentNumber=i + baseSegmentIndex;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          System.out.println("Starting to build segment " + segmentNumber);
          File outputDir=new File(baseDirectory,"segment-" + segmentNumber);
          final SegmentGeneratorConfig genConfig=SegmentTestUtils.getSegmentGenSpecWithSchemAndProjectedColumns(avroFiles.get(segmentIndex),outputDir,TimeUnit.DAYS,resourceName);
          genConfig.setSegmentNamePostfix(Integer.toString(segmentNumber));
          final SegmentIndexCreationDriver driver=SegmentCreationDriverFactory.get(null);
          driver.init(genConfig);
          driver.build();
          String segmentName=outputDir.list()[0];
          TarGzCompressionUtils.createTarGzOfDirectory(outputDir.getAbsolutePath() + "/" + segmentName,new File(segmentTarDir,segmentName).getAbsolutePath());
          System.out.println("Completed segment " + segmentNumber + " : "+ segmentName);
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
}
