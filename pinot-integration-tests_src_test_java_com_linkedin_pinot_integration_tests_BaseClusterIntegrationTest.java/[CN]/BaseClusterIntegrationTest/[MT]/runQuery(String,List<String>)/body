{
  try {
    queryCount++;
    Statement statement=_connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
    JSONObject response=postQuery(pqlQuery);
    if (response.getJSONArray("exceptions").length() > 0) {
      String processingException=(String)response.getJSONArray("exceptions").get(0);
      if (processingException.contains("ProcessingException(errorCode:350,")) {
        return;
      }
      if (GATHER_FAILED_QUERIES) {
        saveFailedQuery(pqlQuery,sqlQueries,"Got exceptions in pql query " + pqlQuery + ", got "+ response);
      }
 else {
        Assert.fail("Got exceptions in pql query: " + pqlQuery);
      }
    }
    if (response.has("aggregationResults") && response.getJSONArray("aggregationResults").length() != 0) {
      JSONArray aggregationResultsArray=response.getJSONArray("aggregationResults");
      JSONObject firstAggregationResult=aggregationResultsArray.getJSONObject(0);
      if (firstAggregationResult.has("value")) {
        LOGGER.debug("Trying to execute sql query: " + sqlQueries.get(0));
        statement.execute(sqlQueries.get(0));
        ResultSet rs=statement.getResultSet();
        LOGGER.debug("Trying to get result from sql: " + rs);
        String bqlValue=firstAggregationResult.getString("value");
        rs.first();
        String sqlValue=rs.getString(1);
        if (bqlValue != null && sqlValue != null) {
          bqlValue=bqlValue.replaceAll("\\..*","");
          sqlValue=sqlValue.replaceAll("\\..*","");
        }
        LOGGER.debug("bql value: " + bqlValue);
        LOGGER.debug("sql value: " + sqlValue);
        if (GATHER_FAILED_QUERIES) {
          if (!EqualityUtils.isEqual(bqlValue,sqlValue)) {
            saveFailedQuery(pqlQuery,sqlQueries,"Values did not match for query " + pqlQuery + ", expected "+ sqlValue+ ", got "+ bqlValue);
          }
        }
 else {
          Assert.assertEquals(bqlValue,sqlValue,"Values did not match for query " + pqlQuery);
        }
      }
 else       if (firstAggregationResult.has("groupByResult")) {
        for (int aggregationGroupIndex=0; aggregationGroupIndex < aggregationResultsArray.length(); aggregationGroupIndex++) {
          JSONArray groupByResults=aggregationResultsArray.getJSONObject(aggregationGroupIndex).getJSONArray("groupByResult");
          if (groupByResults.length() != 0) {
            int groupKeyCount=groupByResults.getJSONObject(0).getJSONArray("group").length();
            Map<String,String> actualValues=new TreeMap<String,String>(new NullableStringComparator());
            for (int resultIndex=0; resultIndex < groupByResults.length(); ++resultIndex) {
              JSONArray group=groupByResults.getJSONObject(resultIndex).getJSONArray("group");
              String pinotGroupKey=group.getString(0);
              for (int groupKeyIndex=1; groupKeyIndex < groupKeyCount; groupKeyIndex++) {
                pinotGroupKey+="\t" + group.getString(groupKeyIndex);
              }
              actualValues.put(pinotGroupKey,groupByResults.getJSONObject(resultIndex).getString("value"));
            }
            Map<String,String> correctValues=new TreeMap<String,String>(new NullableStringComparator());
            LOGGER.info("Trying to execute sql query: " + sqlQueries.get(aggregationGroupIndex));
            statement.execute(sqlQueries.get(aggregationGroupIndex));
            ResultSet rs=statement.getResultSet();
            LOGGER.debug("Trying to get result from sql: " + rs);
            rs.beforeFirst();
            try {
              while (rs.next()) {
                String h2GroupKey=rs.getString(1);
                for (int groupKeyIndex=1; groupKeyIndex < groupKeyCount; groupKeyIndex++) {
                  h2GroupKey+="\t" + rs.getString(groupKeyIndex + 1);
                }
                correctValues.put(h2GroupKey,rs.getString(groupKeyCount + 1));
              }
            }
 catch (            Exception e) {
              LOGGER.error("Catch exception when constructing H2 results for group by query",e);
            }
            LOGGER.debug("Trying to get result from sql: " + correctValues.toString());
            LOGGER.debug("Trying to compare result from bql: " + actualValues);
            LOGGER.debug("Trying to compare result from sql: " + correctValues);
            if (correctValues.size() < 10000) {
              Set<String> pinotKeys=actualValues.keySet();
              for (              String pinotKey : pinotKeys) {
                if (GATHER_FAILED_QUERIES) {
                  if (!correctValues.containsKey((pinotKey))) {
                    saveFailedQuery(pqlQuery,sqlQueries,"Result group '" + pinotKey + "' returned by Pinot was not returned by H2 for query "+ pqlQuery,"Bql values: " + actualValues,"Sql values: " + correctValues);
                    break;
                  }
 else {
                    double actualValue=Double.parseDouble(actualValues.get(pinotKey));
                    double correctValue=Double.parseDouble(correctValues.get(pinotKey));
                    if (1.0 < Math.abs(actualValue - correctValue)) {
                      saveFailedQuery(pqlQuery,sqlQueries,"Results differ between Pinot and H2 for query " + pqlQuery + ", expected "+ correctValue+ ", got "+ actualValue+ " for group "+ pinotKey,"Bql values: " + actualValues,"Sql values: " + correctValues);
                      break;
                    }
                  }
                }
 else {
                  Assert.assertTrue(correctValues.containsKey(pinotKey),"Result group '" + pinotKey + "' returned by Pinot was not returned by H2 for query "+ pqlQuery);
                  Assert.assertEquals(Double.parseDouble(actualValues.get(pinotKey)),Double.parseDouble(correctValues.get(pinotKey)),1.0d,"Results differ between Pinot and H2 for query " + pqlQuery + ", expected "+ correctValues.get(pinotKey)+ ", got "+ actualValues.get(pinotKey)+ " for group "+ pinotKey+ "\nBql values: "+ actualValues+ "\nSql values: "+ correctValues);
                }
              }
            }
 else {
              LOGGER.warn("SQL query returned more than 10k rows, skipping comparison");
              queryCount--;
            }
          }
 else {
            statement.execute(sqlQueries.get(aggregationGroupIndex));
            ResultSet rs=statement.getResultSet();
            rs.beforeFirst();
            int rowCount=0;
            while (rs.next()) {
              rowCount++;
            }
            if (rowCount != 0) {
              if (GATHER_FAILED_QUERIES) {
                saveFailedQuery(pqlQuery,sqlQueries,"Pinot did not return any results while " + rowCount + " rows were expected for query "+ pqlQuery);
              }
 else {
                Assert.fail("Pinot did not return any results while " + rowCount + " results were expected for query "+ pqlQuery);
              }
            }
          }
        }
      }
    }
 else {
    }
  }
 catch (  JSONException exception) {
    if (GATHER_FAILED_QUERIES) {
      saveFailedQuery(pqlQuery,sqlQueries,"Query did not return valid JSON while running query " + pqlQuery);
      exception.printStackTrace();
    }
 else {
      Assert.fail("Query did not return valid JSON while running query " + pqlQuery,exception);
    }
  }
}
