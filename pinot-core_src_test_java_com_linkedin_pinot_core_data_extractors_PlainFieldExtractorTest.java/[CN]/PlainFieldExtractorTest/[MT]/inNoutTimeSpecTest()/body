{
  Schema schema=new SchemaBuilder().addSingleValueDimension("svDimensionInt",DataType.INT).addSingleValueDimension("svDimensionDouble",DataType.DOUBLE).addMultiValueDimension("mvDimension",DataType.STRING).addMetric("metric",DataType.INT).build();
  TimeFieldSpec timeSpec=new TimeFieldSpec();
  TimeGranularitySpec incomingTimeGranularitySpec=new TimeGranularitySpec(DataType.LONG,TimeUnit.DAYS,"incoming");
  TimeGranularitySpec outgoingTimeGranularitySpec=new TimeGranularitySpec(DataType.LONG,TimeUnit.HOURS,"outgoing");
  timeSpec.setIncomingGranularitySpec(incomingTimeGranularitySpec);
  timeSpec.setOutgoingGranularitySpec(outgoingTimeGranularitySpec);
  schema.setTimeFieldSpec(timeSpec);
  PlainFieldExtractor extractor=(PlainFieldExtractor)FieldExtractorFactory.getPlainFieldExtractor(schema);
  GenericRow row=new GenericRow();
  Map<String,Object> fieldMap=new HashMap<String,Object>();
  Short shortObj=new Short((short)5);
  fieldMap.put("svDimensionInt",shortObj);
  Float floatObj=new Float((float)3.2);
  fieldMap.put("svDimensionDouble",floatObj);
  Double doubleObj=new Double((double)34.5);
  fieldMap.put("metric",doubleObj);
  long currentDaysSinceEpoch=System.currentTimeMillis() / 1000 / 60/ 60/ 24;
  fieldMap.put("incoming",currentDaysSinceEpoch);
  row.init(fieldMap);
  extractor.transform(row);
  Assert.assertTrue(row.getValue("svDimensionInt") instanceof Integer);
  Assert.assertTrue(row.getValue("svDimensionDouble") instanceof Double);
  Assert.assertTrue(row.getValue("mvDimension") != null);
  Assert.assertTrue(row.getValue("metric") instanceof Integer);
  Assert.assertTrue((Integer)row.getValue("metric") == 34);
  Assert.assertTrue(row.getValue("incoming") == null);
  Assert.assertEquals(((Long)row.getValue("outgoing")).longValue(),currentDaysSinceEpoch * 24);
}
