{
  final Logger LOGGER=LoggerFactory.getLogger(PlainFieldExtractorTest.class);
  final int numberOfTypes=18;
  final String columnName="testColumn";
  Schema[] schemaArray=new Schema[numberOfTypes];
  Object[] objectArray=new Object[numberOfTypes];
  int i=0;
  for (  DataType dataType : DataType.values()) {
    schemaArray[i]=new SchemaBuilder().addSingleValueDimension(columnName,dataType).build();
    i++;
  }
  objectArray[0]=new Boolean(true);
  objectArray[1]=new Byte((byte)65);
  objectArray[2]=new Character('a');
  objectArray[3]=new Short((short)500);
  objectArray[4]=new Integer(500);
  objectArray[5]=new Long(500);
  objectArray[6]=new Float(500.50);
  objectArray[7]=new Double(500.50);
  objectArray[8]="Pinot Rules";
  objectArray[9]=null;
  objectArray[10]=new Byte[1];
  ((Byte[])objectArray[10])[0]=new Byte((byte)65);
  objectArray[11]=new Character[1];
  ((Character[])objectArray[11])[0]=new Character('a');
  objectArray[12]=new Short[1];
  ((Short[])objectArray[12])[0]=new Short((short)500);
  objectArray[13]=new Integer[1];
  ((Integer[])objectArray[13])[0]=new Integer(500);
  objectArray[14]=new Long[1];
  ((Long[])objectArray[14])[0]=new Long(500);
  objectArray[15]=new Float[1];
  ((Float[])objectArray[15])[0]=new Float(500.50);
  objectArray[16]=new Double[1];
  ((Double[])objectArray[16])[0]=new Double(500.50);
  objectArray[17]=new String[1];
  ((String[])objectArray[17])[0]=new String("Pinot Rules");
  for (i=0; i < numberOfTypes; i++) {
    for (int j=0; j < numberOfTypes; j++) {
      PlainFieldExtractor extractor=(PlainFieldExtractor)FieldExtractorFactory.getPlainFieldExtractor(schemaArray[i]);
      GenericRow row=new GenericRow();
      Map<String,Object> fieldMap=new HashMap<String,Object>();
      fieldMap.put(columnName,objectArray[j]);
      row.init(fieldMap);
      extractor.transform(row);
      if (j == 9) {
        Assert.assertEquals(extractor.getTotalNulls(),1);
      }
 else       if ((i == 0) && (j != 0)) {
        Assert.assertEquals(extractor.getTotalErrors(),1);
        Assert.assertEquals(extractor.getTotalConversions(),1);
      }
      LOGGER.debug("Number of Error {}",extractor.getTotalErrors());
      LOGGER.debug("Number of rows with Null columns {}",extractor.getTotalNulls());
      LOGGER.debug("Number of rows with columns requiring conversion {}",extractor.getTotalConversions());
      LOGGER.debug("Column with conversion {}, number of conversions {}",columnName,extractor.getError_count().get(columnName));
      LOGGER.debug("Old value {}, new value {}",objectArray[j],row.getValue(columnName));
    }
  }
}
