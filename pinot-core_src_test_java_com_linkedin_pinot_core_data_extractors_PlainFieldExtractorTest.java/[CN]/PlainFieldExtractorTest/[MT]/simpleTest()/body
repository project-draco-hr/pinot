{
  Schema schema=new SchemaBuilder().addSingleValueDimension("svDimensionInt",DataType.INT).addSingleValueDimension("svDimensionDouble",DataType.DOUBLE).addSingleValueDimension("someClassObject",DataType.STRING).addMultiValueDimension("mvDimension",DataType.STRING).addMultiValueDimension("mvClassObject",DataType.STRING).addMetric("metric",DataType.INT).addTime("incomingTime",TimeUnit.DAYS,DataType.LONG).build();
  PlainFieldExtractor extractor=(PlainFieldExtractor)FieldExtractorFactory.getPlainFieldExtractor(schema);
  GenericRow row=new GenericRow();
  Map<String,Object> fieldMap=new HashMap<String,Object>();
  Short shortObj=new Short((short)5);
  fieldMap.put("svDimensionInt",shortObj);
  Float floatObj=new Float((float)3.2);
  fieldMap.put("svDimensionDouble",floatObj);
  Double doubleObj=new Double((double)34.5);
  fieldMap.put("metric",doubleObj);
  long currentDaysSinceEpoch=System.currentTimeMillis() / 1000 / 60/ 60/ 24;
  fieldMap.put("incomingTime",currentDaysSinceEpoch);
  final int value=89;
{
    AnyClassWithToString obj=new AnyClassWithToString(value);
    fieldMap.put("someClassObject",value);
  }
{
    Object[] obj=new Object[2];
    obj[0]=new AnyClassWithToString(value);
    obj[1]=new AnyClassWithToString(value + 1);
    fieldMap.put("mvClassObject",obj);
  }
  row.init(fieldMap);
  extractor.transform(row);
  Assert.assertTrue(row.getValue("svDimensionInt") instanceof Integer);
  Assert.assertTrue(row.getValue("svDimensionDouble") instanceof Double);
  Assert.assertTrue(row.getValue("mvDimension") != null);
  Assert.assertTrue(row.getValue("metric") instanceof Integer);
  Assert.assertTrue((Integer)row.getValue("metric") == 34);
  Assert.assertTrue((Long)row.getValue("incomingTime") == currentDaysSinceEpoch);
  Assert.assertTrue(Integer.toString(value).equals(row.getValue("someClassObject")));
  Assert.assertTrue(row.getValue("mvClassObject") instanceof String[]);
  String[] strings=(String[])row.getValue("mvClassObject");
  Assert.assertEquals(strings.length,2);
  Assert.assertEquals(Integer.toString(value),strings[0]);
  Assert.assertEquals(Integer.toString(value + 1),strings[1]);
}
