{
  int anomalyResultsSize=anomalyResults.size();
  if (minConsecutiveSize > 1) {
    List<AnomalyResult> anomalyResultsAggregated=new ArrayList<>();
    if (anomalyResultsSize >= minConsecutiveSize) {
      int remainingSize=anomalyResultsSize;
      List<AnomalyResult> currentConsecutiveResults=new ArrayList<>();
      List<Double> consecutiveCurrentValues=new ArrayList<>();
      List<Double> consecutiveBaselineValues=new ArrayList<>();
      int n=-1;
      for (      AnomalyResult anomalyResult : anomalyResults) {
        n++;
        if (currentConsecutiveResults.isEmpty()) {
          currentConsecutiveResults.add(anomalyResult);
          consecutiveCurrentValues.add(currentValues.get(n));
          consecutiveBaselineValues.add(baselineValues.get(n));
          remainingSize--;
        }
 else {
          AnomalyResult lastConsecutiveAnomalyResult=currentConsecutiveResults.get(currentConsecutiveResults.size() - 1);
          long lastStartTime=lastConsecutiveAnomalyResult.getStartTimeUtc();
          long currentStarTime=anomalyResult.getStartTimeUtc();
          if ((lastStartTime + bucketMillis) == currentStarTime) {
            currentConsecutiveResults.add(anomalyResult);
            consecutiveCurrentValues.add(currentValues.get(n));
            consecutiveBaselineValues.add(baselineValues.get(n));
            remainingSize--;
            if (remainingSize == 0) {
              anomalyResultsAggregated.add(getMergedAnomalyResults(currentConsecutiveResults,consecutiveBaselineValues,consecutiveCurrentValues,threshold,baselineProp));
            }
          }
 else {
            if (currentConsecutiveResults.size() >= minConsecutiveSize) {
              anomalyResultsAggregated.add(getMergedAnomalyResults(currentConsecutiveResults,consecutiveBaselineValues,consecutiveCurrentValues,threshold,baselineProp));
            }
            if (remainingSize >= minConsecutiveSize) {
              currentConsecutiveResults.clear();
              consecutiveCurrentValues.clear();
              consecutiveBaselineValues.clear();
              currentConsecutiveResults.add(anomalyResult);
              consecutiveCurrentValues.add(currentValues.get(n));
              consecutiveBaselineValues.add(baselineValues.get(n));
              remainingSize--;
            }
 else {
              break;
            }
          }
        }
      }
    }
    return anomalyResultsAggregated;
  }
 else {
    return anomalyResults;
  }
}
