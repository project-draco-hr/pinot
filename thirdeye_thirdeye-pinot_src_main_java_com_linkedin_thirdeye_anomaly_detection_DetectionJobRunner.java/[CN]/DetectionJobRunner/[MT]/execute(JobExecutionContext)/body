{
  LOG.info("Running " + jobExecutionContext.getJobDetail().getKey().toString());
  detectionJobContext=(DetectionJobContext)jobExecutionContext.getJobDetail().getJobDataMap().get(DETECTION_JOB_CONTEXT);
  anomalyJobSpecDAO=detectionJobContext.getAnomalyJobDAO();
  anomalyTasksSpecDAO=detectionJobContext.getAnomalyTaskDAO();
  anomalyFunctionSpecDAO=detectionJobContext.getAnomalyFunctionDAO();
  anomalyFunctionId=detectionJobContext.getAnomalyFunctionId();
  AnomalyFunctionSpec anomalyFunctionSpec=getAnomalyFunctionSpec(anomalyFunctionId);
  detectionJobContext.setAnomalyFunctionSpec(anomalyFunctionSpec);
  windowStart=detectionJobContext.getWindowStart();
  windowEnd=detectionJobContext.getWindowEnd();
  if (windowEnd == null) {
    long delayMillis=0;
    if (anomalyFunctionSpec.getWindowDelay() != null) {
      delayMillis=TimeUnit.MILLISECONDS.convert(anomalyFunctionSpec.getWindowDelay(),anomalyFunctionSpec.getWindowDelayUnit());
    }
    Date scheduledFireTime=jobExecutionContext.getScheduledFireTime();
    windowEnd=new DateTime(scheduledFireTime).minus(delayMillis);
  }
  if (windowStart == null) {
    int windowSize=anomalyFunctionSpec.getWindowSize();
    TimeUnit windowUnit=anomalyFunctionSpec.getWindowUnit();
    long windowMillis=TimeUnit.MILLISECONDS.convert(windowSize,windowUnit);
    windowStart=windowEnd.minus(windowMillis);
  }
  detectionJobContext.setWindowStart(windowStart);
  detectionJobContext.setWindowEnd(windowEnd);
  Long jobExecutionId=createJob();
  detectionJobContext.setJobExecutionId(jobExecutionId);
  List<Long> taskIds=createTasks();
}
