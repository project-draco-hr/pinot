{
  LOG.info("Running " + jobExecutionContext.getJobDetail().getKey().toString());
  thirdEyeJobContext=(JobContext)jobExecutionContext.getJobDetail().getJobDataMap().get(THIRDEYE_JOB_CONTEXT);
  sessionFactory=thirdEyeJobContext.getSessionFactory();
  anomalyJobSpecDAO=thirdEyeJobContext.getAnomalyJobSpecDAO();
  anomalyTasksSpecDAO=thirdEyeJobContext.getAnomalyTaskSpecDAO();
  anomalyFunctionSpecDAO=thirdEyeJobContext.getAnomalyFunctionSpecDAO();
  anomalyFunctionId=thirdEyeJobContext.getAnomalyFunctionId();
  jobName=thirdEyeJobContext.getJobName();
  AnomalyFunctionSpec anomalyFunctionSpec=getAnomalyFunctionSpec(anomalyFunctionId);
  String windowEndProp=thirdEyeJobContext.getWindowEndIso();
  String windowStartProp=thirdEyeJobContext.getWindowStartIso();
  if (windowEndProp == null) {
    long delayMillis=0;
    if (anomalyFunctionSpec.getWindowDelay() != null) {
      delayMillis=TimeUnit.MILLISECONDS.convert(anomalyFunctionSpec.getWindowDelay(),anomalyFunctionSpec.getWindowDelayUnit());
    }
    Date scheduledFireTime=jobExecutionContext.getScheduledFireTime();
    windowEnd=new DateTime(scheduledFireTime).minus(delayMillis);
  }
 else {
    windowEnd=ISODateTimeFormat.dateTimeParser().parseDateTime(windowEndProp);
  }
  if (windowStartProp == null) {
    int windowSize=anomalyFunctionSpec.getWindowSize();
    TimeUnit windowUnit=anomalyFunctionSpec.getWindowUnit();
    long windowMillis=TimeUnit.MILLISECONDS.convert(windowSize,windowUnit);
    windowStart=windowEnd.minus(windowMillis);
  }
 else {
    windowStart=ISODateTimeFormat.dateTimeParser().parseDateTime(windowStartProp);
  }
  thirdEyeJobContext.setWindowStart(windowStart);
  thirdEyeJobContext.setWindowEnd(windowEnd);
  Long jobExecutionId=createAnomalyJob(jobName);
  thirdEyeJobContext.setJobExecutionId(jobExecutionId);
  List<Long> taskIds=createAnomalyTasks(anomalyFunctionSpec);
}
