{
  Session session=sessionFactory.openSession();
  List<Long> taskIds=new ArrayList<>();
  try {
    ManagedSessionContext.bind(session);
    Transaction transaction=session.beginTransaction();
    try {
      List<TaskInfo> tasks=taskGenerator.createTasks(jobContext,anomalyFunctionSpec);
      for (      TaskInfo taskInfo : tasks) {
        String taskInfoJson=null;
        try {
          taskInfoJson=OBJECT_MAPPER.writeValueAsString(taskInfo);
        }
 catch (        JsonProcessingException e) {
          LOG.error("Exception when converting TaskInfo {} to jsonString",taskInfo,e);
        }
        AnomalyTaskSpec anomalyTaskSpec=new AnomalyTaskSpec();
        anomalyTaskSpec.setJobId(jobContext.getJobExecutionId());
        anomalyTaskSpec.setTaskType(TaskType.ANOMALY_DETECTION);
        anomalyTaskSpec.setJobName(jobContext.getJobName());
        anomalyTaskSpec.setStatus(TaskStatus.WAITING);
        anomalyTaskSpec.setTaskStartTime(System.currentTimeMillis());
        anomalyTaskSpec.setTaskInfo(taskInfoJson);
        long taskId=anomalyTasksSpecDAO.createOrUpdate(anomalyTaskSpec);
        taskIds.add(taskId);
        LOG.info("Created anomalyTask {} with taskId {}",anomalyTaskSpec,taskId);
      }
      if (!transaction.wasCommitted()) {
        transaction.commit();
      }
    }
 catch (    Exception e) {
      transaction.rollback();
      throw new RuntimeException(e);
    }
  }
  finally {
    session.close();
    ManagedSessionContext.unbind(sessionFactory);
  }
  return taskIds;
}
