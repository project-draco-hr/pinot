{
  List<Pair> columnList=resultTable.getColumnList();
  List<String> groupByColumns=new ArrayList<>();
  _aggregationResults=new ArrayList<>();
  for (  Pair pair : columnList) {
    if (pair.getSecond() == null) {
      groupByColumns.add(pair.getFirst().toString());
    }
  }
  int numGroupByColumns=groupByColumns.size();
  List<List<String>> groupValueStrings=new ArrayList<>();
  for (  ResultTable.Row row : resultTable) {
    int colId=0;
    List<String> group=new ArrayList<>();
    for (    Object value : row) {
      if (columnList.get(colId).getSecond() != null) {
        break;
      }
      if (value instanceof Object[]) {
        Object[] array=(Object[])value;
        for (        Object obj : array) {
          group.add(obj.toString());
        }
      }
 else {
        group.add(value.toString());
      }
      ++colId;
    }
    groupValueStrings.add(group);
  }
  for (int colId=numGroupByColumns; colId < columnList.size(); ++colId) {
    String function=resultTable.getFunction(colId);
    if (function.equalsIgnoreCase("count_*")) {
      function="count_star";
    }
    int rowId=0;
    List<GroupValue> groupValues=new ArrayList<>();
    for (    ResultTable.Row row : resultTable) {
      String value=row.get(colId).toString();
      GroupValue groupValue=new GroupValue(value,groupValueStrings.get(rowId));
      groupValues.add(groupValue);
      ++rowId;
    }
    AggregationResult aggregationResult=new AggregationResult(groupValues,groupByColumns,function);
    _aggregationResults.add(aggregationResult);
  }
}
