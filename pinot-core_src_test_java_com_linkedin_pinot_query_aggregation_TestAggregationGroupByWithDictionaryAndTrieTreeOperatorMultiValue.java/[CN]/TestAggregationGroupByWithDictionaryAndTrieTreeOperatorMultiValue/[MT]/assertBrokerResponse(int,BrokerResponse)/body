{
  Assert.assertEquals(100000 * numSegments,brokerResponse.getNumDocsScanned());
  Assert.assertEquals(_numAggregations,brokerResponse.getAggregationResults().size());
  for (int i=0; i < _numAggregations; ++i) {
    Assert.assertEquals("[\"viewerOccupations\",\"viewerCompanies\"]",brokerResponse.getAggregationResults().get(i).getJSONArray("groupByColumns").toString());
    Assert.assertEquals(15,brokerResponse.getAggregationResults().get(i).getJSONArray("groupByResult").length());
  }
  Assert.assertEquals("count_star",brokerResponse.getAggregationResults().get(0).getString("function").toString());
  Assert.assertEquals("sum_count",brokerResponse.getAggregationResults().get(1).getString("function").toString());
  Assert.assertEquals("max_count",brokerResponse.getAggregationResults().get(2).getString("function").toString());
  Assert.assertEquals("min_count",brokerResponse.getAggregationResults().get(3).getString("function").toString());
  Assert.assertEquals("avg_count",brokerResponse.getAggregationResults().get(4).getString("function").toString());
  Assert.assertEquals("distinctCount_vieweeId",brokerResponse.getAggregationResults().get(5).getString("function").toString());
  final List<double[]> aggregationResult=getAggregationResult(numSegments);
  final List<String[]> groupByResult=getGroupResult();
  for (int j=0; j < _numAggregations; ++j) {
    final double[] aggResult=aggregationResult.get(j);
    final String[] groupResult=groupByResult.get(j);
    for (int i=0; i < 15; ++i) {
      Assert.assertEquals(aggResult[i],brokerResponse.getAggregationResults().get(j).getJSONArray("groupByResult").getJSONObject(i).getDouble("value"));
      if (groupResult.length < 2) {
        continue;
      }
      Assert.assertEquals(groupResult[i],brokerResponse.getAggregationResults().get(j).getJSONArray("groupByResult").getJSONObject(i).getString("group"));
    }
  }
}
