{
  try {
    FileSystem fileSystem=FileSystem.get(new Configuration());
    DimensionStats aggDimensionStats=new DimensionStats();
    ObjectMapper objectMapper=new ObjectMapper();
    FileStatus[] dimensionStatsFiles=fileSystem.listStatus(analysisResults);
    for (    FileStatus fileStatus : dimensionStatsFiles) {
      Path dimensionStatsFile=fileStatus.getPath();
      DimensionStats dimensionStats=objectMapper.readValue(new InputStreamReader(fileSystem.open(dimensionStatsFile)),DimensionStats.class);
      aggDimensionStats.update(dimensionStats);
    }
    SortedSet<Entry<String,Set<String>>> sortedDimensionCardinality=new TreeSet<Entry<String,Set<String>>>(new Comparator<Entry<String,Set<String>>>(){
      @Override public int compare(      Entry<String,Set<String>> dimension1,      Entry<String,Set<String>> dimension2){
        return (new Integer(dimension2.getValue().size())).compareTo(dimension1.getValue().size());
      }
    }
);
    sortedDimensionCardinality.addAll(aggDimensionStats.getDimensionValues().entrySet());
    LOGGER.info("Sorted order {}",sortedDimensionCardinality);
    Iterator<Entry<String,Set<String>>> it=sortedDimensionCardinality.iterator();
    rollupOrder=new ArrayList<String>();
    while (it.hasNext()) {
      rollupOrder.add(it.next().getKey());
    }
  }
 catch (  Exception e) {
    LOGGER.info("exception {}",e);
  }
}
