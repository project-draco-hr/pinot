{
  int maxBits=1;
  while (maxBits < 32) {
    LOGGER.debug("START test maxBits:" + maxBits);
    final String fileName=getClass().getName() + "_single_col_fixed_bit_" + maxBits+ ".dat";
    final File file=new File(fileName);
    file.delete();
    final int rows=100;
    final int cols=1;
    final int[] columnSizesInBits=new int[]{maxBits};
    final FixedBitSingleValueMultiColWriter writer=new FixedBitSingleValueMultiColWriter(file,rows,cols,columnSizesInBits,new boolean[]{true});
    final int[] data=new int[rows];
    final Random r=new Random();
    writer.open();
    final int maxValue=(int)Math.pow(2,maxBits);
    for (int i=0; i < rows; i++) {
      data[i]=r.nextInt(maxValue) * ((Math.random() > .5) ? 1 : -1);
      writer.setInt(i,0,data[i]);
    }
    writer.close();
    PinotDataBuffer heapBuffer=PinotDataBuffer.fromFile(file,ReadMode.heap,FileChannel.MapMode.READ_ONLY,"testing");
    FixedBitSingleValueMultiColReader heapReader=new FixedBitSingleValueMultiColReader(heapBuffer,rows,cols,columnSizesInBits,new boolean[]{true});
    for (int i=0; i < rows; i++) {
      Assert.assertEquals(heapReader.getInt(i,0),data[i]);
    }
    heapReader.close();
    heapBuffer.close();
    PinotDataBuffer mmapBuffer=PinotDataBuffer.fromFile(file,ReadMode.mmap,FileChannel.MapMode.READ_ONLY,"mmap-testing");
    FixedBitSingleValueMultiColReader mmapReader=new FixedBitSingleValueMultiColReader(mmapBuffer,rows,cols,columnSizesInBits,new boolean[]{true});
    for (int i=0; i < rows; i++) {
      Assert.assertEquals(mmapReader.getInt(i,0),data[i]);
    }
    mmapReader.close();
    mmapBuffer.close();
    maxBits=maxBits + 1;
    file.delete();
  }
}
