{
  metricName="totalSales";
  startMillis=0;
  endMillis=100000;
  values=new ArrayList<TimeSeriesByDimensionValue>();
  values.add(new TimeSeriesByDimensionValue("USA",100,10000,200,30000));
  values.add(new TimeSeriesByDimensionValue("IND",50,6000,70,10000));
  values.add(new TimeSeriesByDimensionValue("CAN",60,7000.78,20,2000));
  values.add(new TimeSeriesByDimensionValue("BRA",70,900,140,20000));
  values.add(new TimeSeriesByDimensionValue("CHI",20,40000,100,50000));
  metricSpecs1=new MetricSpec("totalSales",MetricType.INT);
  metricSpecs2=new MetricSpec("totalProfit",MetricType.FLOAT);
  metricSchema=MetricSchema.fromMetricSpecs(Arrays.asList(metricSpecs1,metricSpecs2));
  timeSeriesByDimensionValue=new HashMap<String,MetricTimeSeries>();
  int dummyMetricValue=50;
  for (  TimeSeriesByDimensionValue value : values) {
    metricTimeSeries=new MetricTimeSeries(metricSchema);
    metricTimeSeries.set(startMillis,metricSpecs1.getName(),value.metric1Start);
    metricTimeSeries.set(startMillis + (startMillis + endMillis) / 2,metricSpecs1.getName(),dummyMetricValue);
    metricTimeSeries.set(endMillis,metricSpecs1.getName(),value.metric1End);
    metricTimeSeries.set(startMillis,metricSpecs2.getName(),value.metric2Start);
    metricTimeSeries.set(startMillis + (startMillis + endMillis) / 2,metricSpecs2.getName(),dummyMetricValue);
    metricTimeSeries.set(endMillis,metricSpecs2.getName(),value.metric2End);
    timeSeriesByDimensionValue.put(value.dimensionValue,metricTimeSeries);
    expectedSummationOldValue+=value.metric1Start;
    expectedSummationNewValue+=value.metric1End;
  }
}
