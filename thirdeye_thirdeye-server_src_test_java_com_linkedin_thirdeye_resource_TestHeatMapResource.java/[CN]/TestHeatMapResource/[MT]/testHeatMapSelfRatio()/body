{
  metricName="totalSales";
  heatMap=new SelfRatioHeatMap(metricSpecs1.getType());
  actualHeatMapCells=heatMap.generateHeatMap(metricName,timeSeriesByDimensionValue,startMillis,endMillis);
  for (  TimeSeriesByDimensionValue value : data.values()) {
    double expectedRatio=new Double(value.metric1End - value.metric1Start) / value.metric1Start;
    EXPECTED_COLOR=(expectedRatio > 0) ? (UP_COLOR) : (DOWN_COLOR);
    HeatMapCell expectedCell=new HeatMapCell(value.dimensionValue,value.metric1End,value.metric1Start,"dummy label",expectedRatio,0,EXPECTED_COLOR);
    expectedCells.add(expectedCell);
  }
  Collections.sort(expectedCells,new Comparator<HeatMapCell>(){
    @Override public int compare(    HeatMapCell o1,    HeatMapCell o2){
      return (int)((o2.getRatio() - o1.getRatio()) * 100000);
    }
  }
);
  Assert.assertEquals(expectedCells.size(),actualHeatMapCells.size());
  for (int i=0; i < expectedCells.size(); i++) {
    Assert.assertEquals(expectedCells.get(i).getRatio(),actualHeatMapCells.get(i).getRatio(),0.0001);
  }
}
