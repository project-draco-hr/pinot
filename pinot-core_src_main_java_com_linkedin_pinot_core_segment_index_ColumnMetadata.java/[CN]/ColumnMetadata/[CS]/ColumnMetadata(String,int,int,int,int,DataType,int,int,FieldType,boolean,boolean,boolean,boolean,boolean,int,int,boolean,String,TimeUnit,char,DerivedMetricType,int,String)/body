{
  this.columnName=columnName;
  this.cardinality=cardinality;
  this.totalDocs=totalDocs;
  this.totalRawDocs=totalRawDocs;
  this.totalAggDocs=totalAggDocs;
  this.dataType=dataType;
  this.bitsPerElement=bitsPerElement;
  this.stringColumnMaxLength=stringColumnMaxLength;
  this.fieldType=fieldType;
  this.isSorted=isSorted;
  this.containsNulls=hasNulls;
  this.hasDictionary=hasDictionary;
  this.hasInvertedIndex=hasInvertedIndex;
  this.isSingleValue=isSingleValue;
  this.maxNumberOfMultiValues=maxNumberOfMultiValues;
  this.totalNumberOfEntries=totalNumberOfEntries;
  this.isAutoGenerated=isAutoGenerated;
  this.defaultNullValueString=defaultNullValueString;
  this.timeUnit=timeUnit;
  this.paddingCharacter=paddingCharacter;
  this.derivedMetricType=derivedMetricType;
  this.fieldSize=fieldSize;
  this.originColumnName=originColumnName;
switch (fieldType) {
case DIMENSION:
    this.fieldSpec=new DimensionFieldSpec(columnName,dataType,isSingleValue);
  break;
case METRIC:
if (derivedMetricType == null) {
  this.fieldSpec=new MetricFieldSpec(columnName,dataType);
}
 else {
  this.fieldSpec=new MetricFieldSpec(columnName,dataType,fieldSize,derivedMetricType);
}
break;
case TIME:
this.fieldSpec=new TimeFieldSpec(columnName,dataType,timeUnit);
break;
default :
throw new RuntimeException("Unsupported field type: " + fieldType);
}
}
