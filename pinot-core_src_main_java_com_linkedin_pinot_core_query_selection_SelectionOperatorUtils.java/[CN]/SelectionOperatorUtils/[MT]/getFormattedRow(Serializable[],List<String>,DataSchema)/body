{
  Serializable[] formattedRow=new Serializable[selectionColumns.size()];
  Map<String,Integer> columnToIdxMapping=buildColumnToIdxMappingForDataSchema(dataSchema);
  for (int i=0; i < selectionColumns.size(); ++i) {
    if (!columnToIdxMapping.containsKey(selectionColumns.get(i))) {
      formattedRow[i]=null;
      continue;
    }
    int idxInDataSchema=columnToIdxMapping.get(selectionColumns.get(i));
    if (dataSchema.getColumnType(idxInDataSchema).isSingleValue()) {
      if (dataSchema.getColumnType(idxInDataSchema) == DataType.STRING) {
        formattedRow[i]=inputValues[idxInDataSchema];
      }
 else {
        formattedRow[i]=DEFAULT_FORMAT_STRING_MAP.get(dataSchema.getColumnType(idxInDataSchema)).format(inputValues[idxInDataSchema]);
      }
    }
 else {
      String[] multiValued;
      DecimalFormat decimalFormat=DEFAULT_FORMAT_STRING_MAP.get(dataSchema.getColumnType(idxInDataSchema));
switch (dataSchema.getColumnType(idxInDataSchema)) {
case STRING_ARRAY:
        multiValued=(String[])inputValues[idxInDataSchema];
      break;
case INT_ARRAY:
    int[] intValues=(int[])inputValues[idxInDataSchema];
  multiValued=new String[intValues.length];
for (int j=0; j < intValues.length; j++) {
  multiValued[j]=decimalFormat.format(intValues[j]);
}
break;
case FLOAT_ARRAY:
float[] floatValues=(float[])inputValues[idxInDataSchema];
multiValued=new String[floatValues.length];
for (int j=0; j < floatValues.length; j++) {
multiValued[j]=decimalFormat.format(floatValues[j]);
}
break;
case LONG_ARRAY:
long[] longValues=(long[])inputValues[idxInDataSchema];
multiValued=new String[longValues.length];
for (int j=0; j < longValues.length; j++) {
multiValued[j]=decimalFormat.format(longValues[j]);
}
break;
case DOUBLE_ARRAY:
double[] doubleValues=(double[])inputValues[idxInDataSchema];
multiValued=new String[doubleValues.length];
for (int j=0; j < doubleValues.length; j++) {
multiValued[j]=decimalFormat.format(doubleValues[j]);
}
break;
default :
throw new RuntimeException("Unsupported data type in selection results");
}
formattedRow[i]=multiValued;
}
}
return formattedRow;
}
