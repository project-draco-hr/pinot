{
  TimeGranularity timeGranularity=new TimeGranularity(anomalyFunctionSpec.getBucketSize(),anomalyFunctionSpec.getBucketUnit());
  String filters=anomalyFunctionSpec.getFilters();
  TimeSeriesRequest request=new TimeSeriesRequest();
  request.setCollectionName(anomalyFunctionSpec.getCollection());
  List<MetricExpression> metricExpressions=Utils.convertToMetricExpressions(anomalyFunctionSpec.getMetric(),anomalyFunctionSpec.getMetricFunction(),anomalyFunctionSpec.getCollection());
  request.setMetricExpressions(metricExpressions);
  request.setAggregationTimeGranularity(timeGranularity);
  request.setEndDateInclusive(false);
  if (StringUtils.isNotBlank(filters)) {
    request.setFilterSet(ThirdEyeUtils.getFilterSet(filters));
  }
  if (StringUtils.isNotBlank(groupByDimension)) {
    request.setGroupByDimensions(Collections.singletonList(groupByDimension));
  }
  List<Pair<Long,Long>> startEndTimeRanges=anomalyFunction.getDataRangeIntervals(windowStart,windowEnd);
  LOG.info("Found [{}] time ranges to fetch data",startEndTimeRanges.size());
  for (  Pair<Long,Long> timeRange : startEndTimeRanges) {
    LOG.info("Start Time [{}], End Time [{}] for anomaly analysis",new DateTime(timeRange.getFirst()),new DateTime(timeRange.getSecond()));
  }
  Set<TimeSeriesRow> timeSeriesRowSet=new HashSet<>();
  for (  Pair<Long,Long> startEndInterval : startEndTimeRanges) {
    DateTime startTime=new DateTime(startEndInterval.getFirst());
    DateTime endTime=new DateTime(startEndInterval.getSecond());
    request.setStart(startTime);
    request.setEnd(endTime);
    LOG.info("Fetching data with startTime: [{}], endTime: [{}], metricExpressions: [{}], timeGranularity: [{}]",startTime,endTime,metricExpressions,timeGranularity);
    try {
      LOG.debug("Executing {}",request);
      TimeSeriesResponse response=timeSeriesHandler.handle(request);
      timeSeriesRowSet.addAll(response.getRows());
    }
 catch (    Exception e) {
      throw new JobExecutionException(e);
    }
  }
  List<TimeSeriesRow> timeSeriesRows=new ArrayList<>();
  timeSeriesRows.addAll(timeSeriesRowSet);
  return new TimeSeriesResponse(timeSeriesRows);
}
