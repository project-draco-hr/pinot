{
  setup();
  startDetectionScheduler();
  startAlertScheduler();
  Thread.sleep(10000);
  int jobSize1=jobDAO.findAll().size();
  int taskSize1=taskDAO.findAll().size();
  Assert.assertTrue(jobSize1 > 0 && jobSize1 % 2 == 0);
  Assert.assertTrue(taskSize1 > 0 && taskSize1 % 2 == 0);
  Thread.sleep(10000);
  int jobSize2=jobDAO.findAll().size();
  int taskSize2=taskDAO.findAll().size();
  Assert.assertTrue(jobSize2 > jobSize1 && jobSize2 % 2 == 0);
  Assert.assertTrue(taskSize2 > taskSize1 && taskSize2 % 2 == 0);
  tasks=taskDAO.findAll();
  int detectionCount=0;
  int alertCount=0;
  for (  TaskDTO task : tasks) {
    if (task.getTaskType().equals(TaskType.ANOMALY_DETECTION)) {
      detectionCount++;
    }
 else     if (task.getTaskType().equals(TaskType.ALERT)) {
      alertCount++;
    }
  }
  Assert.assertTrue(detectionCount > 0);
  Assert.assertTrue(alertCount > 0);
  tasks=taskDAO.findAll();
  for (  TaskDTO task : tasks) {
    Assert.assertEquals(task.getStatus(),TaskStatus.WAITING);
  }
  startMonitor();
  Thread.sleep(5000);
  tasks=taskDAO.findAll();
  int monitorCount=0;
  for (  TaskDTO task : tasks) {
    if (task.getTaskType().equals(TaskType.MONITOR)) {
      monitorCount++;
    }
  }
  Assert.assertTrue(monitorCount > 0);
  jobs=jobDAO.findAll();
  for (  JobDTO job : jobs) {
    Assert.assertEquals(job.getStatus(),JobStatus.SCHEDULED);
  }
  startWorker();
  Thread.sleep(30000);
  tasks=taskDAO.findAll();
  int completedCount=0;
  for (  TaskDTO task : tasks) {
    if (task.getStatus().equals(TaskStatus.COMPLETED)) {
      completedCount++;
    }
  }
  Assert.assertTrue(completedCount > 0);
  List<RawAnomalyResultDTO> rawAnomalies=rawResultDAO.findUnmergedByFunctionId(functionId);
  Assert.assertTrue(rawAnomalies.size() > 0);
  startMerger();
  Thread.sleep(2000);
  List<MergedAnomalyResultDTO> mergedAnomalies=mergedResultDAO.findByFunctionId(functionId);
  Assert.assertTrue(mergedAnomalies.size() > 0);
  jobs=jobDAO.findAll();
  int completedJobCount=0;
  for (  JobDTO job : jobs) {
    if (job.getStatus().equals(JobStatus.COMPLETED)) {
      completedJobCount++;
    }
  }
  Assert.assertTrue(completedJobCount > 0);
  cleanup();
}
