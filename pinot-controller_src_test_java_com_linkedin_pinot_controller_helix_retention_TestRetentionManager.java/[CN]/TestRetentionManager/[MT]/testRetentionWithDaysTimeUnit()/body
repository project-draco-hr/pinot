{
  long theDayAfterTomorrowSinceEpoch=System.currentTimeMillis() / 1000 / 60/ 60/ 24 + 2;
  for (int i=0; i < 10; ++i) {
    SegmentMetadata segmentMetadata=getTimeSegmentMetadataImpl("15544","15544",TimeUnit.DAYS.toString());
    registerSegmentMetadat(segmentMetadata);
    Thread.sleep(100);
  }
  for (int i=0; i < 10; ++i) {
    SegmentMetadata segmentMetadata=getTimeSegmentMetadataImpl(theDayAfterTomorrowSinceEpoch + "",theDayAfterTomorrowSinceEpoch + "",TimeUnit.DAYS.toString());
    registerSegmentMetadat(segmentMetadata);
    Thread.sleep(100);
  }
  Assert.assertEquals(_helixZkManager.getHelixPropertyStore().getChildNames(ZKMetadataProvider.constructPropertyStorePathForResource(BrokerRequestUtils.getOfflineResourceNameForResource(_testResourceName)),AccessOption.PERSISTENT).size(),20);
  Thread.sleep(35000);
  LOGGER.info("Sleeping thread wakes up!");
  Assert.assertEquals(_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,BrokerRequestUtils.getOfflineResourceNameForResource(_testResourceName)).getPartitionSet().size(),10);
  Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,BrokerRequestUtils.getOfflineResourceNameForResource(_testResourceName)).getPartitionSet().size(),10);
  Assert.assertEquals(_helixZkManager.getHelixPropertyStore().getChildNames(ZKMetadataProvider.constructPropertyStorePathForResource(BrokerRequestUtils.getOfflineResourceNameForResource(_testResourceName)),AccessOption.PERSISTENT).size(),10);
  cleanupSegments();
}
