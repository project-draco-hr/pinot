{
  JSONObject ret=new JSONObject();
  ret.put("tableName",tableName);
  JSONArray brokers=new JSONArray();
  JSONArray servers=new JSONArray();
  if (type == null || type.toLowerCase().equals("broker")) {
    if (_pinotHelixResourceManager.hasOfflineTable(tableName)) {
      JSONObject e=new JSONObject();
      e.put("tableType","offline");
      JSONArray a=new JSONArray();
      for (      String ins : _pinotHelixResourceManager.getBrokerInstancesForTable(tableName,TableType.OFFLINE)) {
        a.add(ins);
      }
      e.put("instances",a);
      brokers.add(e);
    }
    if (_pinotHelixResourceManager.hasRealtimeTable(tableName)) {
      JSONObject e=new JSONObject();
      e.put("tableType","realtime");
      JSONArray a=new JSONArray();
      for (      String ins : _pinotHelixResourceManager.getBrokerInstancesForTable(tableName,TableType.REALTIME)) {
        a.add(ins);
      }
      e.put("instances",a);
      brokers.add(e);
    }
  }
  if (type == null || type.toLowerCase().equals("server")) {
    if (_pinotHelixResourceManager.hasOfflineTable(tableName)) {
      JSONObject e=new JSONObject();
      e.put("tableType","offline");
      JSONArray a=new JSONArray();
      for (      String ins : _pinotHelixResourceManager.getServerInstancesForTable(tableName,TableType.OFFLINE)) {
        a.add(ins);
      }
      e.put("instances",a);
      servers.add(e);
    }
    if (_pinotHelixResourceManager.hasRealtimeTable(tableName)) {
      JSONObject e=new JSONObject();
      e.put("tableType","realtime");
      JSONArray a=new JSONArray();
      for (      String ins : _pinotHelixResourceManager.getServerInstancesForTable(tableName,TableType.REALTIME)) {
        a.add(ins);
      }
      e.put("instances",a);
      servers.add(e);
    }
  }
  ret.put("brokers",brokers);
  ret.put("server",servers);
  return new StringRepresentation(ret.toString());
}
