{
  final String tableName=(String)getRequest().getAttributes().get("tableName");
  final String type=getQueryValue("type");
  if (tableName == null) {
    return new StringRepresentation("tableName is not present");
  }
  JSONObject ret=new JSONObject();
  try {
    ret.put("tableName",tableName);
    JSONArray brokers=new JSONArray();
    JSONArray servers=new JSONArray();
    if (type == null || type.toLowerCase().equals("broker")) {
      if (manager.hasOfflineTable(tableName)) {
        JSONObject e=new JSONObject();
        e.put("tableType","offline");
        JSONArray a=new JSONArray();
        for (        String ins : manager.getBrokerInstancesForTable(tableName,TableType.OFFLINE)) {
          a.add(ins);
        }
        e.put("instances",a);
        brokers.add(e);
      }
      if (manager.hasRealtimeTable(tableName)) {
        JSONObject e=new JSONObject();
        e.put("tableType","realtime");
        JSONArray a=new JSONArray();
        for (        String ins : manager.getBrokerInstancesForTable(tableName,TableType.REALTIME)) {
          a.add(ins);
        }
        e.put("instances",a);
        brokers.add(e);
      }
    }
    if (type == null || type.toLowerCase().equals("server")) {
      if (manager.hasOfflineTable(tableName)) {
        JSONObject e=new JSONObject();
        e.put("tableType","offline");
        JSONArray a=new JSONArray();
        for (        String ins : manager.getServerInstancesForTable(tableName,TableType.OFFLINE)) {
          a.add(ins);
        }
        e.put("instances",a);
        servers.add(e);
      }
      if (manager.hasRealtimeTable(tableName)) {
        JSONObject e=new JSONObject();
        e.put("tableType","realtime");
        JSONArray a=new JSONArray();
        for (        String ins : manager.getServerInstancesForTable(tableName,TableType.REALTIME)) {
          a.add(ins);
        }
        e.put("instances",a);
        servers.add(e);
      }
    }
    ret.put("brokers",brokers);
    ret.put("server",servers);
    return new StringRepresentation(ret.toString());
  }
 catch (  Exception e) {
    LOGGER.error("error processing fetch table request, ",e);
    return PinotSegmentUploadRestletResource.exceptionToStringRepresentation(e);
  }
}
