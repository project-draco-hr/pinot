{
  buffer.clear();
  int[] lastDimensions=null;
  int[] currentDimensions=new int[dimensionSpecs.size()];
  while (buffer.position() < buffer.limit()) {
    for (int i=0; i < dimensionSpecs.size(); i++) {
      currentDimensions[i]=buffer.getInt();
      Map<Integer,String> reverse=reverseIndex.get(dimensionSpecs.get(i).getName());
      String dimensionValue=reverse.get(currentDimensions[i]);
      if (dimensionValue == null) {
        throw new IllegalArgumentException("No dimension value in index for ID " + currentDimensions[i]);
      }
      Set<String> values=dimensionValues.get(dimensionSpecs.get(i).getName());
      if (values == null) {
        values=new HashSet<String>();
        dimensionValues.put(dimensionSpecs.get(i).getName(),values);
      }
      values.add(dimensionValue);
    }
    if (lastDimensions != null && COMPARATOR.compare(lastDimensions,currentDimensions) >= 0) {
      throw new IllegalStateException("Buffer dimension values are not unique and sorted: " + Arrays.toString(lastDimensions) + "; "+ Arrays.toString(currentDimensions));
    }
    for (int i=0; i < numTimeBuckets; i++) {
      long time=buffer.getLong();
      if (time < minTime.get()) {
        minTime.set(time);
      }
      if (time > maxTime.get()) {
        maxTime.set(time);
      }
      if (time != 0 && time % numTimeBuckets != i) {
        throw new IllegalStateException("Time bucket violation: " + time + " % "+ numTimeBuckets+ " != "+ i);
      }
      for (int j=0; j < metricSpecs.size(); j++) {
        String metricName=metricSpecs.get(j).getName();
        MetricType metricType=metricSpecs.get(j).getType();
        Number val=NumberUtils.readFromBuffer(buffer,metricType);
      }
    }
    if (lastDimensions == null) {
      lastDimensions=new int[dimensionSpecs.size()];
    }
    System.arraycopy(currentDimensions,0,lastDimensions,0,currentDimensions.length);
    recordCount++;
  }
}
