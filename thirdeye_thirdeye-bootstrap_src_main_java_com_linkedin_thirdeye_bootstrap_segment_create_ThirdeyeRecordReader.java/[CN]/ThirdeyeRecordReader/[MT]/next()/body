{
  if (_metricTimeSeriesIterator == null || !_metricTimeSeriesIterator.hasNext()) {
    Pair<ByteBuffer,ByteBuffer> sequenceRecord=_sequenceFileReader.next();
    try {
      byte[] keyBytes=sequenceRecord.key().array();
      DimensionKey dimensionKey=DimensionKey.fromBytes(keyBytes);
      _dimensionValues=dimensionKey.getDimensionValues();
      byte[] valueBytes=sequenceRecord.value().array();
      MetricTimeSeries metricTimeSeries=MetricTimeSeries.fromBytes(valueBytes,_metricSchema);
      _metricBuffer=new HashMap<>();
      for (      Long time : metricTimeSeries.getTimeWindowSet()) {
        List<Number> timeSeries=new ArrayList<>();
        for (        MetricSpec metricSpec : _starTreeConfig.getMetrics()) {
          timeSeries.add(metricTimeSeries.get(time,metricSpec.getName()));
        }
        _metricBuffer.put(time,timeSeries);
      }
      _metricTimeSeriesIterator=_metricBuffer.entrySet().iterator();
    }
 catch (    Exception e) {
      _logger.error("Exception while reading next thirdeye sequence record",e);
    }
  }
  Map<String,Object> fieldMap=new HashMap<String,Object>();
  for (  DimensionSpec dimensionSpec : _starTreeConfig.getDimensions()) {
    String dimensionName=dimensionSpec.getName();
    String dimensionValue=_dimensionValues[_dimensionToIndexMapping.get(dimensionName)];
    fieldMap.put(dimensionName,dimensionValue);
  }
  Entry<Long,List<Number>> metricTimeSeries=_metricTimeSeriesIterator.next();
  List<Number> metricTimeSeriesValues=metricTimeSeries.getValue();
  for (  MetricSpec metricSpec : _starTreeConfig.getMetrics()) {
    String metricName=metricSpec.getName();
    String metricValue=metricTimeSeriesValues.get(_metricToIndexMapping.get(metricName)).toString();
    DataType dataType=DataType.valueOf(metricSpec.getType().toString());
    fieldMap.put(metricName,RecordReaderUtils.convertToDataType(metricValue,dataType));
  }
  if (!countIncluded) {
    fieldMap.put(StarTreeConstants.AUTO_METRIC_COUNT,1);
  }
  fieldMap.put(_starTreeConfig.getTime().getColumnName(),metricTimeSeries.getKey());
  GenericRow genericRow=new GenericRow();
  genericRow.init(fieldMap);
  return genericRow;
}
