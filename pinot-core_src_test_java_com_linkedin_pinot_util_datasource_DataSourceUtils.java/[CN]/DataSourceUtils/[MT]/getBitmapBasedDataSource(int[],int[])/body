{
  final MutableRoaringBitmap bitmaps[]=new MutableRoaringBitmap[dictionary.length];
  for (int i=0; i < bitmaps.length; i++) {
    bitmaps[i]=new MutableRoaringBitmap();
  }
  for (int docId=0; docId < values.length; docId++) {
    bitmaps[Arrays.binarySearch(dictionary,values[docId])].add(docId);
  }
  return new DataSource(){
    private int blockCounter=0;
    @Override public boolean open(){
      return true;
    }
    @Override public Block getNextBlock(    BlockId BlockId){
      return new ArrayBasedSingleValueBlock(dictionary,values);
    }
    @Override public String getOperatorName(){
      return "DataSourceUtils_DataSource";
    }
    @Override public Block getNextBlock(){
      if (blockCounter == 0) {
        return nextBlock(new BlockId(0));
      }
      blockCounter++;
      return null;
    }
    @Override public boolean close(){
      return true;
    }
    @Override public boolean setPredicate(    Predicate predicate){
      throw new UnsupportedOperationException();
    }
    @Override public DataSourceMetadata getDataSourceMetadata(){
      return new DataSourceMetadata(){
        @Override public boolean isSorted(){
          return false;
        }
        @Override public boolean isSingleValue(){
          return false;
        }
        @Override public boolean hasInvertedIndex(){
          return false;
        }
        @Override public boolean hasDictionary(){
          return false;
        }
        @Override public FieldType getFieldType(){
          return null;
        }
        @Override public DataType getDataType(){
          return null;
        }
        @Override public int cardinality(){
          return 0;
        }
      }
;
    }
    @Override public InvertedIndexReader getInvertedIndex(){
      return null;
    }
    @Override public Dictionary getDictionary(){
      return null;
    }
  }
;
}
