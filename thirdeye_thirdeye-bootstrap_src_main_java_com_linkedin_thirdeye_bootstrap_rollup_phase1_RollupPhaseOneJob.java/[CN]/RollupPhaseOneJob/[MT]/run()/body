{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(RollupPhaseOneJob.class);
  job.setMapperClass(RollupPhaseOneMapper.class);
  job.setInputFormatClass(SequenceFileInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(BytesWritable.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  Configuration configuration=job.getConfiguration();
  String inputPathDir=getAndSetConfiguration(configuration,ROLLUP_PHASE1_INPUT_PATH);
  getAndSetConfiguration(configuration,ROLLUP_PHASE1_CONFIG_PATH);
  getAndSetConfiguration(configuration,ROLLUP_PHASE1_OUTPUT_PATH);
  LOGGER.info("Input path dir: " + inputPathDir);
  for (  String inputPath : inputPathDir.split(",")) {
    LOGGER.info("Adding input:" + inputPath);
    Path input=new Path(inputPath);
    FileInputFormat.addInputPath(job,input);
  }
  MultipleOutputs.addNamedOutput(job,"aboveThreshold",SequenceFileOutputFormat.class,BytesWritable.class,BytesWritable.class);
  MultipleOutputs.addNamedOutput(job,"belowThreshold",SequenceFileOutputFormat.class,BytesWritable.class,BytesWritable.class);
  FileOutputFormat.setOutputPath(job,new Path(getAndCheck(ROLLUP_PHASE1_OUTPUT_PATH.toString())));
  job.waitForCompletion(true);
  Counters counters=job.getCounters();
  for (  Enum e : RollupCounter.values()) {
    Counter counter=counters.findCounter(e);
    System.out.println(counter.getDisplayName() + " : " + counter.getValue());
  }
  JobStatus status=job.getStatus();
  if (status.getState() == JobStatus.State.SUCCEEDED) {
    FileSystem fileSystem=FileSystem.get(configuration);
    Path belowThresholdPath=new Path(new Path(getAndCheck(ROLLUP_PHASE1_OUTPUT_PATH.toString())),"belowThreshold");
    Path aboveThresholdPath=new Path(new Path(getAndCheck(ROLLUP_PHASE1_OUTPUT_PATH.toString())),"aboveThreshold");
    if (!fileSystem.exists(belowThresholdPath)) {
      fileSystem.mkdirs(belowThresholdPath);
    }
    if (!fileSystem.exists(aboveThresholdPath)) {
      fileSystem.mkdirs(aboveThresholdPath);
    }
  }
  return job;
}
