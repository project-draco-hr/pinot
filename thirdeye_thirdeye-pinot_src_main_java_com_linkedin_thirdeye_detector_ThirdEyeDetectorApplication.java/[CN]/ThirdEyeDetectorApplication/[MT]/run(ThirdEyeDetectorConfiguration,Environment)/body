{
  super.initDetectorRelatedDAO();
  try {
    ThirdEyeCacheRegistry.initializeDetectorCaches(config);
  }
 catch (  Exception e) {
    LOG.error("Exception while loading caches",e);
  }
  System.setProperty("org.quartz.jobStore.misfireThreshold",QUARTZ_MISFIRE_THRESHOLD);
  SchedulerFactory schedulerFactory=new StdSchedulerFactory();
  final Scheduler quartzScheduler=schedulerFactory.getScheduler();
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      LOG.info("Starting Quartz scheduler");
      quartzScheduler.start();
    }
    @Override public void stop() throws Exception {
      LOG.info("Stopping Quartz scheduler");
      quartzScheduler.shutdown();
    }
  }
);
  final AnomalyFunctionFactory anomalyFunctionFactory=new AnomalyFunctionFactory(config.getFunctionConfigPath());
  final AnomalyDetectionJobManager anomalyDetectionJobManager=new AnomalyDetectionJobManager(quartzScheduler,anomalyFunctionSpecDAO,anomalyFunctionRelationDAO,anomalyResultDAO,hibernateBundle.getSessionFactory(),environment.metrics(),anomalyFunctionFactory,config.getFailureEmailConfig());
  environment.lifecycle().manage(new Managed(){
    @Override public void start() throws Exception {
      new HibernateSessionWrapper<Void>(hibernateBundle.getSessionFactory()).execute(new Callable<Void>(){
        @Override public Void call() throws Exception {
          List<AnomalyFunctionSpec> functions=anomalyFunctionSpecDAO.findAll();
          LinkedList<AnomalyFunctionSpec> failedToStart=new LinkedList<AnomalyFunctionSpec>();
          for (          AnomalyFunctionSpec function : functions) {
            if (function.getIsActive()) {
              try {
                LOG.info("Starting {}",function);
                anomalyDetectionJobManager.start(function.getId());
              }
 catch (              Exception e) {
                LOG.error("Failed to schedule function " + function.getId(),e);
                failedToStart.add(function);
              }
            }
          }
          if (!failedToStart.isEmpty()) {
            LOG.warn("{} functions failed to start!: {}",failedToStart.size(),failedToStart);
            String subject=String.format("Startup failed to initialize %d functions",failedToStart.size());
            String body=StringUtils.join(failedToStart,"\n");
            JobUtils.sendFailureEmail(config.getFailureEmailConfig(),subject,body);
          }
          return null;
        }
      }
);
    }
    @Override public void stop() throws Exception {
    }
  }
);
  final AtomicInteger applicationPort=new AtomicInteger(-1);
  int dropwizardConfigPort=getApplicationPortNumber(config);
  LOG.info("Dropwizard config port: {}",dropwizardConfigPort);
  if (dropwizardConfigPort > 0) {
    applicationPort.set(dropwizardConfigPort);
  }
  final EmailReportJobManager emailReportJobManager=new EmailReportJobManager(quartzScheduler,emailConfigurationDAO,anomalyResultDAO,hibernateBundle.getSessionFactory(),applicationPort,config.getDashboardHost(),config.getFailureEmailConfig());
  environment.lifecycle().addServerLifecycleListener(new ServerLifecycleListener(){
    @Override public void serverStarted(    Server server){
      LOG.info("{} server connectors found",server.getConnectors().length);
      for (      Connector connector : server.getConnectors()) {
        LOG.info("Connector: {}",connector.getName());
        if (connector instanceof ServerConnector) {
          ServerConnector serverConnector=(ServerConnector)connector;
          int localPort=serverConnector.getLocalPort();
          applicationPort.set(localPort);
          LOG.info("application port set to {} from server connector",localPort);
          break;
        }
 else         if (connector instanceof AbstractNetworkConnector) {
          AbstractNetworkConnector networkConnector=(AbstractNetworkConnector)connector;
          int localPort=networkConnector.getLocalPort();
          applicationPort.set(localPort);
          LOG.info("application port set to {} from network connector",localPort);
          break;
        }
      }
      LOG.info("Port from jetty server: {}",applicationPort.get());
      if (applicationPort.get() == -1) {
        throw new IllegalStateException("Could not determine application port");
      }
      try {
        new HibernateSessionWrapper<Void>(hibernateBundle.getSessionFactory()).execute(new Callable<Void>(){
          @Override public Void call() throws Exception {
            List<EmailConfiguration> configs=emailConfigurationDAO.findAll();
            LinkedList<EmailConfiguration> failedToStart=new LinkedList<EmailConfiguration>();
            for (            EmailConfiguration config : configs) {
              if (config.getIsActive()) {
                try {
                  LOG.info("Starting {}",config);
                  emailReportJobManager.start(config.getId());
                }
 catch (                Exception e) {
                  LOG.error("Failed to schedule report " + config.getId(),e);
                  failedToStart.add(config);
                }
              }
            }
            if (!failedToStart.isEmpty()) {
              LOG.warn("{} reports failed to start!: {}",failedToStart.size(),failedToStart);
              String subject=String.format("Startup failed to initialize %d reports",failedToStart.size());
              String body=StringUtils.join(failedToStart,"\n");
              JobUtils.sendFailureEmail(config.getFailureEmailConfig(),subject,body);
            }
            return null;
          }
        }
);
      }
 catch (      Exception e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  environment.jersey().register(new AnomalyFunctionSpecResource(anomalyFunctionSpecDAO));
  environment.jersey().register(new AnomalyFunctionRelationResource(anomalyFunctionRelationDAO));
  environment.jersey().register(new AnomalyResultResource(anomalyResultDAO));
  environment.jersey().register(new ContextualEventResource(contextualEventDAO));
  environment.jersey().register(new MetricsGraphicsTimeSeriesResource(anomalyResultDAO));
  environment.jersey().register(new AnomalyDetectionJobResource(anomalyDetectionJobManager,anomalyFunctionSpecDAO));
  environment.jersey().register(new EmailReportJobResource(emailReportJobManager,emailConfigurationDAO));
  environment.jersey().register(new EmailReportResource(emailConfigurationDAO,emailReportJobManager));
  environment.jersey().register(new EmailFunctionDependencyResource(emailFunctionDependencyDAO));
}
