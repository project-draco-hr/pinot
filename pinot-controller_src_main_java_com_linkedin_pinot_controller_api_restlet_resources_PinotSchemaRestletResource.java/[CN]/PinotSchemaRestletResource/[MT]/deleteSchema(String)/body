{
  Schema schema=_pinotHelixResourceManager.getSchema(schemaName);
  if (schema == null) {
    LOGGER.error("Error: could not find schema {}",schemaName);
    setStatus(Status.CLIENT_ERROR_NOT_FOUND);
    return new StringRepresentation("Error: Could not find schema " + schemaName);
  }
  List<String> tableNames=_pinotHelixResourceManager.getAllRealtimeTables();
  for (  String tableName : tableNames) {
    AbstractTableConfig config=_pinotHelixResourceManager.getTableConfig(tableName,CommonConstants.Helix.TableType.REALTIME);
    String tableSchema=config.getValidationConfig().getSchemaName();
    if (schemaName.equals(tableSchema)) {
      LOGGER.error("Cannot delete schema {}, as it is associated with table {}",schemaName,tableName);
      setStatus(Status.CLIENT_ERROR_CONFLICT);
      return new StringRepresentation("Error: Cannot delete schema " + schemaName + " as it is associated with table: "+ TableNameBuilder.extractRawTableName(tableName));
    }
  }
  LOGGER.info("Trying to delete schema {}",schemaName);
  if (_pinotHelixResourceManager.deleteSchema(schema)) {
    LOGGER.info("Success: Deleted schema {}",schemaName);
    setStatus(Status.SUCCESS_OK);
    return new StringRepresentation("Success: Deleted schema " + schemaName);
  }
 else {
    LOGGER.error("Error: could not delete schema {}",schemaName);
    ControllerRestApplication.getControllerMetrics().addMeteredGlobalValue(ControllerMeter.CONTROLLER_SCHEMA_DELETE_ERROR,1L);
    setStatus(Status.SERVER_ERROR_INTERNAL);
    return new StringRepresentation("Error: Could not delete schema " + schemaName);
  }
}
