{
  List<MetricTable> tables=new ArrayList<>();
  for (  Map.Entry<String,Map<String,Number[]>> entry : result.getData().entrySet()) {
    Map<Long,Number[]> baselineData=new HashMap<>();
    for (    Map.Entry<String,Number[]> dataEntry : entry.getValue().entrySet()) {
      baselineData.put(Long.valueOf(dataEntry.getKey()),dataEntry.getValue());
    }
    Map<Long,Number[]> currentData=baselineData;
    List<MetricDataRow> rows=ViewUtils.extractMetricDataRows(baselineData,currentData,currentMillis,baselineOffsetMillis,intraDayPeriod);
    List<MetricDataRow> cumulativeRows=new LinkedList<>();
    if (!rows.isEmpty()) {
      int metricCount=result.getMetrics().size();
      Number[] cumulativeBaselineValues=new Number[metricCount];
      Arrays.fill(cumulativeBaselineValues,0.0);
      Number[] cumulativeCurrentValues=new Number[metricCount];
      Arrays.fill(cumulativeCurrentValues,0.0);
      for (      MetricDataRow row : rows) {
        Number[] baselineValues=row.getBaseline();
        for (int i=0; i < baselineValues.length; i++) {
          cumulativeBaselineValues[i]=cumulativeBaselineValues[i].doubleValue() + (baselineValues[i] == null ? 0.0 : baselineValues[i].doubleValue());
        }
        Number[] currentValues=row.getCurrent();
        for (int i=0; i < currentValues.length; i++) {
          cumulativeCurrentValues[i]=cumulativeCurrentValues[i].doubleValue() + (currentValues[i] == null ? 0.0 : currentValues[i].doubleValue());
        }
        Number[] cumulativeBaselineValuesCopy=Arrays.copyOf(cumulativeBaselineValues,cumulativeBaselineValues.length);
        Number[] cumulativeCurrentValuesCopy=Arrays.copyOf(cumulativeCurrentValues,cumulativeCurrentValues.length);
        MetricDataRow cumulativeRow=new MetricDataRow(row.getBaselineTime(),cumulativeBaselineValuesCopy,row.getCurrentTime(),cumulativeCurrentValuesCopy);
        cumulativeRows.add(cumulativeRow);
      }
    }
    tables.add(new MetricTable(getDimensionValues(entry.getKey()),rows,cumulativeRows));
  }
  return tables;
}
