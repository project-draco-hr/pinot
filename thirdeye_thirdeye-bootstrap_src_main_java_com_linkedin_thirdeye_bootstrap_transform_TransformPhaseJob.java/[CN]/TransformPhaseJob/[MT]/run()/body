{
  Job job=Job.getInstance(getConf());
  Configuration configuration=job.getConfiguration();
  job.setJobName(name);
  job.setJarByClass(TransformPhaseJob.class);
  String transformConfigUDFClass=getAndSetConfiguration(configuration,TRANSFORM_CONFIG_UDF);
  LOGGER.info("Initializing TransformUDFClass:{} with params:{}",transformConfigUDFClass);
  Constructor<?> constructor=Class.forName(transformConfigUDFClass).getConstructor();
  TransformConfigUDF transformConfigUDF=(TransformConfigUDF)constructor.newInstance();
  transformConfigUDF.setTransformConfig(job);
  FileSystem fs=FileSystem.get(configuration);
  String outputSchemaPath=getAndSetConfiguration(configuration,TRANSFORM_OUTPUT_AVRO_SCHEMA);
  Schema.Parser parser=new Schema.Parser();
  Schema outputSchema=parser.parse(fs.open(new Path(outputSchemaPath)));
  LOGGER.info("{}",outputSchema);
  String inputSchemaPath=getAndSetConfiguration(configuration,TRANSFORM_INPUT_AVRO_SCHEMA);
  parser=new Schema.Parser();
  Schema inputSchema=parser.parse(fs.open(new Path(inputSchemaPath)));
  LOGGER.info("{}",inputSchema);
  job.setNumReduceTasks(0);
  job.setMapperClass(GenericTransformMapper.class);
  AvroJob.setInputKeySchema(job,inputSchema);
  job.setInputFormatClass(AvroKeyInputFormat.class);
  AvroJob.setOutputKeySchema(job,outputSchema);
  job.setOutputFormatClass(AvroKeyOutputFormat.class);
  job.setMapOutputKeyClass(AvroKey.class);
  job.setMapOutputValueClass(NullWritable.class);
  String inputPathDir=getAndSetConfiguration(configuration,TRANSFORM_INPUT_PATH);
  String outputPathDir=getAndSetConfiguration(configuration,TRANSFORM_OUTPUT_PATH);
  getAndSetConfiguration(configuration,TRANSFORM_UDF);
  LOGGER.info("Input path dir: " + inputPathDir);
  FileInputFormat.setInputDirRecursive(job,true);
  for (  String inputPath : inputPathDir.split(",")) {
    Path input=new Path(inputPath);
    FileStatus[] listFiles=fs.listStatus(input);
    boolean isNested=false;
    for (    FileStatus fileStatus : listFiles) {
      if (fileStatus.isDirectory()) {
        isNested=true;
        LOGGER.info("Adding input:" + fileStatus.getPath());
        FileInputFormat.addInputPath(job,fileStatus.getPath());
      }
    }
    if (!isNested) {
      LOGGER.info("Adding input:" + inputPath);
      FileInputFormat.addInputPath(job,input);
    }
  }
  FileOutputFormat.setOutputPath(job,new Path(outputPathDir));
  job.waitForCompletion(true);
  return job;
}
