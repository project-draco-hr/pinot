{
  long start=System.currentTimeMillis();
  MutableRoaringBitmap answer;
  if (bitmaps.length == 1) {
    answer=new MutableRoaringBitmap();
    answer.or(bitmaps[0]);
  }
 else   if (bitmaps.length == 2) {
    answer=ImmutableRoaringBitmap.or(bitmaps[0],bitmaps[1]);
  }
 else {
    PriorityQueue<ImmutableRoaringBitmap> pq=new PriorityQueue<ImmutableRoaringBitmap>(bitmaps.length,new Comparator<ImmutableRoaringBitmap>(){
      @Override public int compare(      ImmutableRoaringBitmap a,      ImmutableRoaringBitmap b){
        return a.getSizeInBytes() - b.getSizeInBytes();
      }
    }
);
    for (int srcId=0; srcId < bitmaps.length; srcId++) {
      pq.add(bitmaps[srcId]);
    }
    ImmutableRoaringBitmap x1=pq.poll();
    ImmutableRoaringBitmap x2=pq.poll();
    answer=ImmutableRoaringBitmap.or(x1,x2);
    while (pq.size() > 0) {
      answer.or(pq.poll());
    }
  }
  boolean validate=false;
  if (validate) {
    final MutableRoaringBitmap bit=(MutableRoaringBitmap)bitmaps[0];
    for (int srcId=1; srcId < bitmaps.length; srcId++) {
      final MutableRoaringBitmap bitToAndWith=(MutableRoaringBitmap)bitmaps[srcId];
      bit.or(bitToAndWith);
    }
  }
  long end=System.currentTimeMillis();
  LOGGER.info("time taken for fast Or : " + (end - start));
  return answer;
}
