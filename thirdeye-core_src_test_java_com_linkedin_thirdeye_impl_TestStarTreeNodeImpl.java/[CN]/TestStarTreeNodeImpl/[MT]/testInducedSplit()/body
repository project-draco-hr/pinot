{
  StarTreeNode root=createRoot();
  root.init(config,recordStoreFactory);
  for (int i=0; i < 100; i++) {
    MetricTimeSeries ts=new MetricTimeSeries(metricSchema);
    ts.set(0,"M",1);
    StarTreeRecordImpl.Builder b=new StarTreeRecordImpl.Builder().setDimensionKey(getDimensionKey("A" + (i % 4),"B" + (i % 8),"C" + (i % 16))).setMetricTimeSeries(ts);
    root.getRecordStore().update(b.build(config));
    StringBuilder sb=new StringBuilder();
    sb.append("B").append(i % 8).append("C").append(i % 16);
  }
  MetricTimeSeries ts=new MetricTimeSeries(metricSchema);
  ts.set(0,"M",0);
  StarTreeRecord other=new StarTreeRecordImpl.Builder().setDimensionKey(getDimensionKey(StarTreeConstants.OTHER,StarTreeConstants.OTHER,StarTreeConstants.OTHER)).setMetricTimeSeries(ts).build(config);
  root.getRecordStore().update(other);
  root.split("A");
  Assert.assertEquals(root.getChildren().size(),4);
  Assert.assertNotNull(root.getOtherNode());
  Assert.assertNotNull(root.getStarNode());
  Assert.assertEquals(root.getChildDimensionName(),"A");
  Set<String> childDimensionValues=new HashSet<String>();
  for (  StarTreeNode child : root.getChildren()) {
    Assert.assertEquals(child.getDimensionName(),"A");
    Assert.assertTrue(child.isLeaf());
    childDimensionValues.add(child.getDimensionValue());
  }
  Set<String> expectedValues=new HashSet<String>(Arrays.asList("A0","A1","A2","A3"));
  Assert.assertEquals(childDimensionValues,expectedValues);
  for (int i=0; i < 4; i++) {
    Assert.assertNotNull(root.getChild("A" + i));
  }
  Assert.assertNull(root.getChild("A4"));
}
