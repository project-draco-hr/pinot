{
{
    FakeLLRealtimeSegmentDataManager segmentDataManager=createFakeSegmentManager();
    segmentDataManager._state.set(segmentDataManager,LLRealtimeSegmentDataManager.State.INITIAL_CONSUMING);
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    segmentDataManager.setNumRowsConsumed(maxRowsInSegment - 1);
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    segmentDataManager.setNumRowsConsumed(maxRowsInSegment);
    Assert.assertTrue(segmentDataManager.invokeEndCriteriaReached());
  }
{
    FakeLLRealtimeSegmentDataManager segmentDataManager=createFakeSegmentManager();
    segmentDataManager._state.set(segmentDataManager,LLRealtimeSegmentDataManager.State.INITIAL_CONSUMING);
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    _timeNow+=maxTimeForSegmentCloseMs + 1;
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    replaceRealtimeSegment(segmentDataManager,10);
    _timeNow+=maxTimeForSegmentCloseMs;
    Assert.assertTrue(segmentDataManager.invokeEndCriteriaReached());
  }
{
    FakeLLRealtimeSegmentDataManager segmentDataManager=createFakeSegmentManager();
    segmentDataManager._state.set(segmentDataManager,LLRealtimeSegmentDataManager.State.CATCHING_UP);
    final long finalOffset=_startOffset + 100;
    segmentDataManager.setFinalOffset(finalOffset);
    segmentDataManager.setCurrentOffset(finalOffset - 1);
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    segmentDataManager.setCurrentOffset(finalOffset);
    Assert.assertTrue(segmentDataManager.invokeEndCriteriaReached());
  }
{
    FakeLLRealtimeSegmentDataManager segmentDataManager=createFakeSegmentManager();
    _timeNow+=maxTimeForSegmentCloseMs;
    segmentDataManager._state.set(segmentDataManager,LLRealtimeSegmentDataManager.State.CATCHING_UP);
    final long finalOffset=_startOffset + 100;
    segmentDataManager.setFinalOffset(finalOffset);
    segmentDataManager.setCurrentOffset(finalOffset - 1);
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    segmentDataManager.setCurrentOffset(finalOffset);
    Assert.assertTrue(segmentDataManager.invokeEndCriteriaReached());
  }
{
    FakeLLRealtimeSegmentDataManager segmentDataManager=createFakeSegmentManager();
    _timeNow+=1;
    segmentDataManager._state.set(segmentDataManager,LLRealtimeSegmentDataManager.State.CONSUMING_TO_ONLINE);
    segmentDataManager.setConsumeEndTime(_timeNow + 10);
    final long finalOffset=_startOffset + 100;
    segmentDataManager.setFinalOffset(finalOffset);
    segmentDataManager.setCurrentOffset(finalOffset - 1);
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    segmentDataManager.setCurrentOffset(finalOffset);
    Assert.assertTrue(segmentDataManager.invokeEndCriteriaReached());
  }
{
    FakeLLRealtimeSegmentDataManager segmentDataManager=createFakeSegmentManager();
    segmentDataManager._state.set(segmentDataManager,LLRealtimeSegmentDataManager.State.CONSUMING_TO_ONLINE);
    final long endTime=_timeNow + 10;
    segmentDataManager.setConsumeEndTime(endTime);
    final long finalOffset=_startOffset + 100;
    segmentDataManager.setFinalOffset(finalOffset);
    segmentDataManager.setCurrentOffset(finalOffset - 1);
    _timeNow=endTime - 1;
    Assert.assertFalse(segmentDataManager.invokeEndCriteriaReached());
    _timeNow=endTime;
    Assert.assertTrue(segmentDataManager.invokeEndCriteriaReached());
  }
}
