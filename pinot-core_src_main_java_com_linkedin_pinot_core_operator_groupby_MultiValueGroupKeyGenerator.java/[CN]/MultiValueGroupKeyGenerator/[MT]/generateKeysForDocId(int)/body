{
  List<Long> groupByKeys=new ArrayList<>();
  groupByKeys.add(0l);
  for (int i=0; i < _groupByColumns.length; i++) {
    if (_isSingleValueGroupByColumn[i]) {
      BlockSingleValIterator blockValIterator=_singleValIterators[i];
      blockValIterator.skipTo(docId);
      int dictId=blockValIterator.nextIntVal();
      for (int j=0; j < groupByKeys.size(); j++) {
        groupByKeys.set(j,groupByKeys.get(j) * _cardinalities[i] + dictId);
      }
    }
 else {
      BlockMultiValIterator blockValIterator=_multiValIterators[i];
      blockValIterator.skipTo(docId);
      int numMultiValues=blockValIterator.nextIntVal(_maxMultiValuesArray[i]);
      int originalSize=groupByKeys.size();
      for (int j=0; j < numMultiValues - 1; ++j) {
        for (int k=0; k < originalSize; k++) {
          groupByKeys.add(groupByKeys.get(k));
        }
      }
      for (int j=0; j < numMultiValues; j++) {
        for (int k=0; k < originalSize; k++) {
          int index=j * originalSize + k;
          groupByKeys.set(index,(groupByKeys.get(index) * _cardinalities[i]) + _maxMultiValuesArray[i][j]);
        }
      }
    }
  }
  _uniqueGroupKeys.addAll(groupByKeys);
  return Longs.toArray(groupByKeys);
}
