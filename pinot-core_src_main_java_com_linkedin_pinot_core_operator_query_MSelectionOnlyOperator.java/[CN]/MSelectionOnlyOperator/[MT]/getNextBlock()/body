{
  final long startTime=System.currentTimeMillis();
  long numDocsScanned=0;
  ProjectionBlock projectionBlock=null;
  while ((projectionBlock=(ProjectionBlock)_projectionOperator.nextBlock()) != null) {
    for (int i=0; i < _dataSchema.size(); ++i) {
      _blocks[i]=projectionBlock.getBlock(_dataSchema.getColumnName(i));
    }
    SelectionFetcher selectionFetcher=new SelectionFetcher(_blocks,_dataSchema);
    BlockDocIdIterator blockDocIdIterator=projectionBlock.getDocIdSetBlock().getBlockDocIdSet().iterator();
    int docId;
    while ((docId=blockDocIdIterator.next()) != Constants.EOF && _rowEvents.size() < _limitDocs) {
      numDocsScanned++;
      _rowEvents.add(selectionFetcher.getRow(docId));
    }
    if (_rowEvents.size() == _limitDocs) {
      break;
    }
  }
  final IntermediateResultsBlock resultBlock=new IntermediateResultsBlock();
  resultBlock.setSelectionResult(_rowEvents);
  resultBlock.setSelectionDataSchema(_dataSchema);
  resultBlock.setNumDocsScanned(numDocsScanned);
  resultBlock.setTotalDocs(_indexSegment.getSegmentMetadata().getTotalDocs());
  final long endTime=System.currentTimeMillis();
  resultBlock.setTimeUsedMs(endTime - startTime);
  return resultBlock;
}
