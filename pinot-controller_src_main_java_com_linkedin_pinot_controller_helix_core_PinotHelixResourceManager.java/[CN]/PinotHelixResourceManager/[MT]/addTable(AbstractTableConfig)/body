{
  TenantConfig tenantConfig=null;
  TableType type=TableType.valueOf(config.getTableType().toUpperCase());
  if (isSingleTenantCluster()) {
    tenantConfig=new TenantConfig();
    tenantConfig.setBroker(ControllerTenantNameBuilder.getBrokerTenantNameForTenant(ControllerTenantNameBuilder.DEFAULT_TENANT_NAME));
switch (type) {
case OFFLINE:
      tenantConfig.setServer(ControllerTenantNameBuilder.getOfflineTenantNameForTenant(ControllerTenantNameBuilder.DEFAULT_TENANT_NAME));
    break;
case REALTIME:
  tenantConfig.setServer(ControllerTenantNameBuilder.getRealtimeTenantNameForTenant(ControllerTenantNameBuilder.DEFAULT_TENANT_NAME));
break;
default :
throw new RuntimeException("UnSupported table type");
}
config.setTenantConfig(tenantConfig);
}
 else {
tenantConfig=config.getTenantConfig();
if (tenantConfig.getBroker() == null || tenantConfig.getServer() == null) {
throw new RuntimeException("missing tenant configs");
}
}
SegmentsValidationAndRetentionConfig segmentsConfig=config.getValidationConfig();
switch (type) {
case OFFLINE:
final String offlineTableName=config.getTableName();
LOGGER.info("building empty ideal state for table : " + offlineTableName);
final IdealState offlineIdealState=PinotTableIdealStateBuilder.buildEmptyIdealStateFor(offlineTableName,Integer.parseInt(segmentsConfig.getReplication()),_helixAdmin,_helixClusterName);
LOGGER.info("adding table via the admin");
_helixAdmin.addResource(_helixClusterName,offlineTableName,offlineIdealState);
LOGGER.info("successfully added the table : " + offlineTableName + " to the cluster");
ZKMetadataProvider.setOfflineTableConfig(_propertyStore,offlineTableName,AbstractTableConfig.toZnRecord(config));
_propertyStore.create(ZKMetadataProvider.constructPropertyStorePathForResource(offlineTableName),new ZNRecord(offlineTableName),AccessOption.PERSISTENT);
break;
case REALTIME:
final String realtimeTableName=config.getTableName();
ZKMetadataProvider.setRealtimeTableConfig(_propertyStore,realtimeTableName,AbstractTableConfig.toZnRecord(config));
LOGGER.info("building empty ideal state for table : " + realtimeTableName);
final IdealState realtimeIdealState=PinotTableIdealStateBuilder.buildInitialRealtimeIdealStateFor(realtimeTableName,config,_helixAdmin,_helixClusterName,_propertyStore);
LOGGER.info("adding table via the admin");
_helixAdmin.addResource(_helixClusterName,realtimeTableName,realtimeIdealState);
LOGGER.info("successfully added the table : " + realtimeTableName + " to the cluster");
_propertyStore.create(ZKMetadataProvider.constructPropertyStorePathForResource(realtimeTableName),new ZNRecord(realtimeTableName),AccessOption.PERSISTENT);
break;
default :
throw new RuntimeException("UnSupported table type");
}
handleBrokerResource(config);
}
