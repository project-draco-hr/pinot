{
  PinotHelixPropertyStoreZnRecordProvider propertyStoreHelper=PinotHelixPropertyStoreZnRecordProvider.forSchema(_propertyStore);
  String path=StringUtil.join("/",propertyStoreHelper.getRelativePath(),schemaName);
  List<String> schemas=_propertyStore.getChildNames(path,AccessOption.PERSISTENT);
  List<Integer> schemasIds=new ArrayList<Integer>();
  for (  String id : schemas) {
    schemasIds.add(Integer.parseInt(id));
  }
  Collections.sort(schemasIds);
  String latest=String.valueOf(schemasIds.get(schemasIds.size() - 1));
  LOGGER.info("found schema {} with version {}",schemaName,latest);
  ZNRecord record=propertyStoreHelper.get(schemaName + "/" + latest);
  return Schema.fromZNRecordV2(record);
}
