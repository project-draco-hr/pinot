{
  final PinotResourceManagerResponse res=new PinotResourceManagerResponse();
  final String brokerResourceTag="broker_" + resourceTag;
  final List<String> taggedBrokerInstanceList=_helixAdmin.getInstancesInClusterWithTag(_helixClusterName,brokerResourceTag);
  for (  final String instance : taggedBrokerInstanceList) {
    LOGGER.info("untagging broker instance : " + instance.toString());
    _helixAdmin.removeInstanceTag(_helixClusterName,instance,brokerResourceTag);
    _helixAdmin.addInstanceTag(_helixClusterName,instance,CommonConstants.Helix.UNTAGGED_BROKER_INSTANCE);
  }
  HelixHelper.deleteResourceFromBrokerResource(_helixAdmin,_helixClusterName,resourceTag);
  HelixHelper.deleteBrokerDataResourceConfig(_helixAdmin,_helixClusterName,resourceTag);
  if (!_helixAdmin.getResourcesInCluster(_helixClusterName).contains(resourceTag)) {
    res.status=STATUS.failure;
    res.errorMessage=String.format("Resource (%s) does not exist",resourceTag);
    return res;
  }
  final List<String> taggedInstanceList=_helixAdmin.getInstancesInClusterWithTag(_helixClusterName,resourceTag);
  for (  final String instance : taggedInstanceList) {
    LOGGER.info("untagging instance : " + instance.toString());
    _helixAdmin.removeInstanceTag(_helixClusterName,instance,resourceTag);
    _helixAdmin.addInstanceTag(_helixClusterName,instance,CommonConstants.Helix.UNTAGGED_SERVER_INSTANCE);
  }
  _propertyStore.remove("/" + resourceTag,0);
  _helixAdmin.dropResource(_helixClusterName,resourceTag);
  res.status=STATUS.success;
  return res;
}
