{
  final String tableName;
  if (segmentZKMetadata instanceof RealtimeSegmentZKMetadata) {
    tableName=TableNameBuilder.REALTIME_TABLE_NAME_BUILDER.forTable(segmentZKMetadata.getTableName());
  }
 else {
    tableName=TableNameBuilder.OFFLINE_TABLE_NAME_BUILDER.forTable(segmentZKMetadata.getTableName());
  }
  final String segmentName=segmentZKMetadata.getSegmentName();
  HelixDataAccessor helixDataAccessor=_helixZkManager.getHelixDataAccessor();
  PropertyKey idealStatePropertyKey=_keyBuilder.idealStates(tableName);
  boolean updateSuccessful;
  do {
    final IdealState idealState=_helixAdmin.getResourceIdealState(_helixClusterName,tableName);
    final Set<String> instanceSet=idealState.getInstanceSet(segmentName);
    if (instanceSet == null || instanceSet.size() == 0) {
      LOGGER.warn("No instances as yet for segment {}, table {}",segmentName,tableName);
      return true;
    }
    for (    final String instance : instanceSet) {
      idealState.setPartitionState(segmentName,instance,"OFFLINE");
    }
    updateSuccessful=helixDataAccessor.updateProperty(idealStatePropertyKey,idealState);
  }
 while (!updateSuccessful);
  IdealState updatedIdealState=_helixAdmin.getResourceIdealState(_helixClusterName,tableName);
  Map<String,String> instanceStateMap=updatedIdealState.getInstanceStateMap(segmentName);
  for (  String state : instanceStateMap.values()) {
    if (!"OFFLINE".equals(state)) {
      LOGGER.error("Failed to write OFFLINE ideal state!");
      return false;
    }
  }
  LOGGER.info("Wait until segment - " + segmentName + " to be OFFLINE in ExternalView");
  if (!ifExternalViewChangeReflectedForState(tableName,segmentName,"OFFLINE",_externalViewOnlineToOfflineTimeoutMillis,false)) {
    LOGGER.error("External view for segment {} did not reflect the ideal state of OFFLINE within the {} ms time limit",segmentName,_externalViewOnlineToOfflineTimeoutMillis);
    return false;
  }
  do {
    final IdealState idealState=_helixAdmin.getResourceIdealState(_helixClusterName,tableName);
    final Set<String> instanceSet=idealState.getInstanceSet(segmentName);
    LOGGER.info("Found {} instances for segment '{}', in ideal state",instanceSet.size(),segmentName);
    for (    final String instance : instanceSet) {
      idealState.setPartitionState(segmentName,instance,"ONLINE");
      LOGGER.info("Setting Ideal State for segment '{}' to ONLINE for instance '{}'",segmentName,instance);
    }
    updateSuccessful=helixDataAccessor.updateProperty(idealStatePropertyKey,idealState);
  }
 while (!updateSuccessful);
  updatedIdealState=_helixAdmin.getResourceIdealState(_helixClusterName,tableName);
  instanceStateMap=updatedIdealState.getInstanceStateMap(segmentName);
  LOGGER.info("Found {} instances for segment '{}', after updating ideal state",instanceStateMap.size(),segmentName);
  for (  String state : instanceStateMap.values()) {
    if (!"ONLINE".equals(state)) {
      LOGGER.error("Failed to write ONLINE ideal state!");
      return false;
    }
  }
  LOGGER.info("Refresh is done for segment - " + segmentName);
  return true;
}
