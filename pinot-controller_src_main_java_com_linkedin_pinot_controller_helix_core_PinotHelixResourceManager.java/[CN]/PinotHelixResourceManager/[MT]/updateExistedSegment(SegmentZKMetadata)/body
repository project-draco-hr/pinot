{
  String resourceName=null;
  if (segmentZKMetadata instanceof RealtimeSegmentZKMetadata) {
    resourceName=BrokerRequestUtils.getRealtimeResourceNameForResource(resourceName);
  }
 else {
    resourceName=BrokerRequestUtils.getOfflineResourceNameForResource(resourceName);
  }
  segmentZKMetadata.getResourceName();
  final String segmentName=segmentZKMetadata.getSegmentName();
  final IdealState currentIdealState=_helixAdmin.getResourceIdealState(_helixClusterName,resourceName);
  final Set<String> currentInstanceSet=currentIdealState.getInstanceSet(segmentName);
  for (  final String instance : currentInstanceSet) {
    currentIdealState.setPartitionState(segmentName,instance,"OFFLINE");
  }
  _helixAdmin.setResourceIdealState(_helixClusterName,resourceName,currentIdealState);
  LOGGER.info("Wait until segment - " + segmentName + " to be OFFLINE in ExternalView");
  if (!ifExternalViewChangeReflectedForState(resourceName,segmentName,"OFFLINE",_externalViewReflectTimeOut)) {
    throw new RuntimeException("Cannot get OFFLINE state to be reflected on ExternalView changed for segment: " + segmentName);
  }
  for (  final String instance : currentInstanceSet) {
    currentIdealState.setPartitionState(segmentName,instance,"ONLINE");
  }
  _helixAdmin.setResourceIdealState(_helixClusterName,resourceName,currentIdealState);
  LOGGER.info("Wait until segment - " + segmentName + " to be ONLINE in ExternalView");
  if (!ifExternalViewChangeReflectedForState(resourceName,segmentName,"ONLINE",_externalViewReflectTimeOut)) {
    throw new RuntimeException("Cannot get ONLINE state to be reflected on ExternalView changed for segment: " + segmentName);
  }
  LOGGER.info("Refresh is done for segment - " + segmentName);
  return true;
}
