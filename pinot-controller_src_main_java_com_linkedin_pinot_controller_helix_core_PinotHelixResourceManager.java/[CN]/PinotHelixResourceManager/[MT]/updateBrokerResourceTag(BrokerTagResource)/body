{
  final PinotResourceManagerResponse res=new PinotResourceManagerResponse();
  final BrokerTagResource currentBrokerTag=ControllerHelixHelper.getBrokerTag(_helixAdmin,_helixClusterName,brokerTagResource.getTag());
  if (currentBrokerTag.getNumBrokerInstances() < brokerTagResource.getNumBrokerInstances()) {
    final int numBrokerInstancesToTag=brokerTagResource.getNumBrokerInstances() - currentBrokerTag.getNumBrokerInstances();
    final List<String> untaggedBrokerInstances=_helixAdmin.getInstancesInClusterWithTag(_helixClusterName,CommonConstants.Helix.UNTAGGED_BROKER_INSTANCE);
    if (untaggedBrokerInstances.size() < numBrokerInstancesToTag) {
      res.status=STATUS.failure;
      res.errorMessage="Failed to allocate broker instances to Tag : " + brokerTagResource.getTag() + ", Current number of untagged broker instances : "+ untaggedBrokerInstances.size()+ ", current number of tagged instances : "+ currentBrokerTag.getNumBrokerInstances()+ ", updated number of tagged instances : "+ brokerTagResource.getNumBrokerInstances();
      LOGGER.error(res.errorMessage);
      return res;
    }
    for (int i=0; i < numBrokerInstancesToTag; ++i) {
      _helixAdmin.removeInstanceTag(_helixClusterName,untaggedBrokerInstances.get(i),CommonConstants.Helix.UNTAGGED_BROKER_INSTANCE);
      _helixAdmin.addInstanceTag(_helixClusterName,untaggedBrokerInstances.get(i),brokerTagResource.getTag());
    }
  }
 else {
    final int numBrokerInstancesToRemove=currentBrokerTag.getNumBrokerInstances() - brokerTagResource.getNumBrokerInstances();
    final List<String> taggedBrokerInstances=_helixAdmin.getInstancesInClusterWithTag(_helixClusterName,brokerTagResource.getTag());
    unTagBrokerInstance(taggedBrokerInstances.subList(0,numBrokerInstancesToRemove),brokerTagResource.getTag());
  }
  ControllerHelixHelper.updateBrokerTag(_helixAdmin,_helixClusterName,brokerTagResource);
  res.status=STATUS.success;
  return res;
}
