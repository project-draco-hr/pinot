{
  final String realtimeResourceName=BrokerRequestUtils.getRealtimeResourceNameForResource(resource.getResourceName());
  RealtimeDataResourceZKMetadata realtimeDataResource=ZKMetadataUtils.getRealtimeDataResourceMetadata(resource);
  final List<String> unTaggedInstanceList=getOnlineUnTaggedServerInstanceList();
  final int numInstanceToUse=realtimeDataResource.getNumDataInstances();
  LOGGER.info("Trying to allocate " + numInstanceToUse + " instances.");
  LOGGER.info("Current untagged boxes: " + unTaggedInstanceList.size());
  if (unTaggedInstanceList.size() < numInstanceToUse) {
    throw new UnsupportedOperationException("Cannot allocate enough hardware resource.");
  }
  for (int i=0; i < numInstanceToUse; ++i) {
    LOGGER.info("tag instance : " + unTaggedInstanceList.get(i).toString() + " to "+ realtimeResourceName);
    _helixAdmin.removeInstanceTag(_helixClusterName,unTaggedInstanceList.get(i),CommonConstants.Helix.UNTAGGED_SERVER_INSTANCE);
    _helixAdmin.addInstanceTag(_helixClusterName,unTaggedInstanceList.get(i),realtimeResourceName);
  }
  ZKMetadataProvider.setRealtimeResourceZKMetadata(getPropertyStore(),realtimeDataResource);
  LOGGER.info("building empty ideal state for resource : " + realtimeResourceName);
  final IdealState idealState=PinotResourceIdealStateBuilder.buildInitialRealtimeIdealStateFor(realtimeResourceName,realtimeDataResource,_helixAdmin,_helixClusterName,getPropertyStore());
  LOGGER.info("adding resource via the admin");
  _helixAdmin.addResource(_helixClusterName,realtimeResourceName,idealState);
  LOGGER.info("successfully added the resource : " + realtimeResourceName + " to the cluster");
  _propertyStore.create(ZKMetadataProvider.constructPropertyStorePathForResource(realtimeResourceName),new ZNRecord(realtimeResourceName),AccessOption.PERSISTENT);
}
