{
  final String offlineResourceName=BrokerRequestUtils.getOfflineResourceNameForResource(resource.getResourceName());
  OfflineDataResourceZKMetadata offlineDataResource=ZKMetadataUtils.getOfflineDataResourceMetadata(resource);
  final List<String> unTaggedInstanceList=getOnlineUnTaggedServerInstanceList();
  final int numInstanceToUse=offlineDataResource.getNumDataInstances();
  LOGGER.info("Trying to allocate " + numInstanceToUse + " instances.");
  LOGGER.info("Current untagged boxes: " + unTaggedInstanceList.size());
  if (unTaggedInstanceList.size() < numInstanceToUse) {
    throw new UnsupportedOperationException("Cannot allocate enough hardware resource.");
  }
  for (int i=0; i < numInstanceToUse; ++i) {
    LOGGER.info("tag instance : " + unTaggedInstanceList.get(i).toString() + " to "+ offlineResourceName);
    _helixAdmin.removeInstanceTag(_helixClusterName,unTaggedInstanceList.get(i),CommonConstants.Helix.UNTAGGED_SERVER_INSTANCE);
    _helixAdmin.addInstanceTag(_helixClusterName,unTaggedInstanceList.get(i),offlineResourceName);
  }
  LOGGER.info("building empty ideal state for resource : " + offlineResourceName);
  final IdealState idealState=PinotResourceIdealStateBuilder.buildEmptyIdealStateFor(offlineResourceName,offlineDataResource.getNumDataReplicas(),_helixAdmin,_helixClusterName);
  LOGGER.info("adding resource via the admin");
  _helixAdmin.addResource(_helixClusterName,offlineResourceName,idealState);
  LOGGER.info("successfully added the resource : " + offlineResourceName + " to the cluster");
  ZKMetadataProvider.setOfflineResourceZKMetadata(getPropertyStore(),offlineDataResource);
}
