{
  KafkaStreamMetadata kafkaStreamMetadata=new KafkaStreamMetadata(indexingConfig.getStreamConfigs());
  IdealState idealState=_helixAdmin.getResourceIdealState(_helixClusterName,realtimeTableName);
  if (kafkaStreamMetadata.hasHighLevelKafkaConsumerType()) {
    if (kafkaStreamMetadata.hasSimpleKafkaConsumerType()) {
      if (idealState == null) {
        createHelixEntriesForHighLevelConsumer(config,realtimeTableName,idealState);
        idealState=_helixAdmin.getResourceIdealState(_helixClusterName,realtimeTableName);
        LOGGER.info("Configured new HLC for table {}",realtimeTableName);
      }
    }
 else {
      createHelixEntriesForHighLevelConsumer(config,realtimeTableName,idealState);
    }
  }
  if (kafkaStreamMetadata.hasSimpleKafkaConsumerType()) {
    final String llcKafkaPartitionAssignmentPath=ZKMetadataProvider.constructPropertyStorePathForKafkaPartitions(realtimeTableName);
    if (!_propertyStore.exists(llcKafkaPartitionAssignmentPath,AccessOption.PERSISTENT)) {
      PinotTableIdealStateBuilder.buildLowLevelRealtimeIdealStateFor(realtimeTableName,config,_helixAdmin,_helixClusterName,idealState);
      LOGGER.info("Successfully added Helix entries for low-level consumers for {} ",realtimeTableName);
    }
 else {
      LOGGER.info("LLC is already set up for table {}, not configuring again",realtimeTableName);
    }
  }
}
