{
  final PinotResourceManagerResponse res=new PinotResourceManagerResponse();
  TableType resourceType=null;
  try {
    resourceType=resource.getResourceType();
  }
 catch (  Exception e) {
    res.errorMessage="ResourceType has to be REALTIME/OFFLINE/HYBRID : " + e.getMessage();
    res.status=STATUS.failure;
    LOGGER.error(e.toString());
    throw new RuntimeException("ResourceType has to be REALTIME/OFFLINE/HYBRID.",e);
  }
  try {
switch (resourceType) {
case OFFLINE:
      _pinotHelixAdmin.createNewOfflineDataResource(resource);
    handleBrokerResource(resource);
  break;
case REALTIME:
_pinotHelixAdmin.createNewRealtimeDataResource(resource);
handleBrokerResource(resource);
break;
case HYBRID:
_pinotHelixAdmin.createNewOfflineDataResource(resource);
_pinotHelixAdmin.createNewRealtimeDataResource(resource);
handleBrokerResource(resource);
break;
default :
break;
}
}
 catch (final Exception e) {
res.errorMessage=e.getMessage();
res.status=STATUS.failure;
LOGGER.error("Caught exception while creating cluster with config " + resource.toString(),e);
revertDataResource(resource);
throw new RuntimeException("Error creating cluster, have successfull rolled back",e);
}
res.status=STATUS.success;
return res;
}
