{
  final long startTime=System.currentTimeMillis();
  long numDocsScanned=0;
  ProjectionBlock projectionBlock=null;
  try {
    while ((projectionBlock=(ProjectionBlock)_projectionOperator.nextBlock()) != null) {
      int j=0;
      for (int i=0; i < _dataSchema.size(); ++i) {
        _blocks[j++]=projectionBlock.getBlock(_dataSchema.getColumnName(i));
      }
      _selectionOperatorService.iterateOnBlock(projectionBlock.getDocIdSetBlock().getBlockDocIdSet().iterator(),_blocks);
      numDocsScanned+=((DocIdSetBlock)(projectionBlock.getDocIdSetBlock())).getSearchableLength();
      if (_selectionOperatorService.canTerminate()) {
        break;
      }
    }
    final IntermediateResultsBlock resultBlock=new IntermediateResultsBlock();
    resultBlock.setSelectionResult(_selectionOperatorService.getRowEventsSet());
    resultBlock.setSelectionDataSchema(_selectionOperatorService.getDataSchema());
    resultBlock.setNumDocsScanned(numDocsScanned);
    resultBlock.setTotalDocs(_indexSegment.getTotalDocs());
    final long endTime=System.currentTimeMillis();
    resultBlock.setTimeUsedMs(endTime - startTime);
    LOGGER.debug("Time spent in MSelectionOperator:" + (endTime - startTime));
    return resultBlock;
  }
 catch (  Exception e) {
    LOGGER.warn("Caught exception while processing selection operator",e);
    final IntermediateResultsBlock resultBlock=new IntermediateResultsBlock();
    List<ProcessingException> processingExceptions=new ArrayList<ProcessingException>();
    ProcessingException exception=QueryException.QUERY_EXECUTION_ERROR.deepCopy();
    exception.setMessage(e.getMessage());
    processingExceptions.add(exception);
    resultBlock.setExceptionsList(processingExceptions);
    resultBlock.setNumDocsScanned(0);
    resultBlock.setTotalDocs(_indexSegment.getTotalDocs());
    resultBlock.setTimeUsedMs(System.currentTimeMillis() - startTime);
    return resultBlock;
  }
}
