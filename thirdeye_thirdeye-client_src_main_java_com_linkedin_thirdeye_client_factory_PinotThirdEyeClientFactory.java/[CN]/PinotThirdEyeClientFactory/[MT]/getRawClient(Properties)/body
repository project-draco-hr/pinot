{
  if (!props.containsKey(CONTROLLER_HOST_PROPERTY_KEY) || !props.containsKey(CONTROLLER_PORT_PROPERTY_KEY)) {
    throw new IllegalArgumentException("Config file must contain mappings for " + CONTROLLER_HOST_PROPERTY_KEY + ", "+ CONTROLLER_PORT_PROPERTY_KEY+ " : "+ props);
  }
  if (!props.containsKey(BROKERS_PROPERTY_KEY) && !(props.containsKey(ZK_URL_PROPERTY_KEY) && props.containsKey(CLUSTER_NAME_PROPERTY_KEY) && props.containsKey(TAG_PROPERTY_KEY))) {
    throw new IllegalArgumentException("Config file must contain mappings for " + BROKERS_PROPERTY_KEY + ", or all of "+ CONTROLLER_HOST_PROPERTY_KEY+ ", "+ CONTROLLER_PORT_PROPERTY_KEY+ ", "+ ZK_URL_PROPERTY_KEY+ ", "+ CLUSTER_NAME_PROPERTY_KEY+ " and "+ TAG_PROPERTY_KEY+ " : "+ props);
  }
  PinotThirdEyeClient client;
  String controllerHost=props.getProperty(CONTROLLER_HOST_PROPERTY_KEY);
  int controllerPort=Integer.parseInt(props.getProperty(CONTROLLER_PORT_PROPERTY_KEY));
  if (props.containsKey(BROKERS_PROPERTY_KEY)) {
    client=PinotThirdEyeClient.fromHostList(controllerHost,controllerPort,props.getProperty(BROKERS_PROPERTY_KEY).split(","));
  }
 else {
    String zkUrl=props.getProperty(ZK_URL_PROPERTY_KEY);
    String clusterName=props.getProperty(CLUSTER_NAME_PROPERTY_KEY);
    String tag=props.getProperty(TAG_PROPERTY_KEY);
    client=PinotThirdEyeClient.fromZookeeper(getConfig(),controllerHost,controllerPort,zkUrl,clusterName,tag);
  }
  if (props.containsKey(FIXED_COLLECTIONS_PROPERTY_KEY)) {
    String collectionString=props.getProperty(FIXED_COLLECTIONS_PROPERTY_KEY);
    List<String> collections=Arrays.asList(collectionString.split(","));
    client.setFixedCollections(collections);
  }
  return client;
}
