{
  ControllerRequestURLBuilder urlBuilder=ControllerRequestURLBuilder.baseUrl(CONTROLLER_BASE_API_URL);
  JSONObject instanceList=new JSONObject(sendGetRequest(urlBuilder.forInstanceList()));
  assertEquals(instanceList.getJSONArray("instances").length(),0,"Expected empty instance list at beginning of test");
  JSONObject brokerInstance=new JSONObject("{\"host\":\"1.2.3.4\", \"type\":\"broker\", \"port\":\"1234\"}");
  sendPostRequest(urlBuilder.forInstanceCreate(),brokerInstance.toString());
  JSONObject serverInstance=new JSONObject("{\"host\":\"1.2.3.4\", \"type\":\"server\", \"port\":\"2345\"}");
  sendPostRequest(urlBuilder.forInstanceCreate(),serverInstance.toString());
  instanceList=new JSONObject(sendGetRequest(urlBuilder.forInstanceList()));
  assertEquals(instanceList.getJSONArray("instances").length(),2,"Expected two instances after creation of untagged instances");
  brokerInstance.put("tag","someTag");
  brokerInstance.put("host","2.3.4.5");
  sendPostRequest(urlBuilder.forInstanceCreate(),brokerInstance.toString());
  serverInstance.put("tag","someTag");
  serverInstance.put("host","2.3.4.5");
  sendPostRequest(urlBuilder.forInstanceCreate(),serverInstance.toString());
  instanceList=new JSONObject(sendGetRequest(urlBuilder.forInstanceList()));
  assertEquals(instanceList.getJSONArray("instances").length(),4,"Expected two instances after creation of tagged instances");
  try {
    sendPostRequest(urlBuilder.forInstanceCreate(),brokerInstance.toString());
    fail("Duplicate broker instance creation did not fail");
  }
 catch (  IOException e) {
  }
  try {
    sendPostRequest(urlBuilder.forInstanceCreate(),serverInstance.toString());
    fail("Duplicate server instance creation did not fail");
  }
 catch (  IOException e) {
  }
  instanceList=new JSONObject(sendGetRequest(urlBuilder.forInstanceList()));
  assertEquals(instanceList.getJSONArray("instances").length(),4,"Expected two instances after creation of duplicate instances");
  JSONObject instance=new JSONObject(sendGetRequest(urlBuilder.forInstanceInformation("Broker_1.2.3.4_1234")));
  assertEquals(instance.get("instanceName"),"Broker_1.2.3.4_1234");
  assertEquals(instance.get("hostName"),"1.2.3.4");
  assertEquals(instance.get("port"),"1234");
  assertEquals(instance.get("enabled"),true);
  assertEquals(instance.getJSONArray("tags").length(),1);
  assertEquals(instance.getJSONArray("tags").get(0),CommonConstants.Helix.UNTAGGED_BROKER_INSTANCE);
  instance=new JSONObject(sendGetRequest(urlBuilder.forInstanceInformation("Server_1.2.3.4_2345")));
  assertEquals(instance.get("instanceName"),"Server_1.2.3.4_2345");
  assertEquals(instance.get("hostName"),"1.2.3.4");
  assertEquals(instance.get("port"),"2345");
  assertEquals(instance.get("enabled"),true);
  assertEquals(instance.getJSONArray("tags").length(),1);
  assertEquals(instance.getJSONArray("tags").get(0),CommonConstants.Helix.UNTAGGED_SERVER_INSTANCE);
  instance=new JSONObject(sendGetRequest(urlBuilder.forInstanceInformation("Broker_2.3.4.5_1234")));
  assertEquals(instance.get("instanceName"),"Broker_2.3.4.5_1234");
  assertEquals(instance.get("hostName"),"2.3.4.5");
  assertEquals(instance.get("port"),"1234");
  assertEquals(instance.get("enabled"),true);
  assertEquals(instance.getJSONArray("tags").length(),1);
  assertEquals(instance.getJSONArray("tags").get(0),"someTag");
  instance=new JSONObject(sendGetRequest(urlBuilder.forInstanceInformation("Server_2.3.4.5_2345")));
  assertEquals(instance.get("instanceName"),"Server_2.3.4.5_2345");
  assertEquals(instance.get("hostName"),"2.3.4.5");
  assertEquals(instance.get("port"),"2345");
  assertEquals(instance.get("enabled"),true);
  assertEquals(instance.getJSONArray("tags").length(),1);
  assertEquals(instance.getJSONArray("tags").get(0),"someTag");
  try {
    sendGetRequest(urlBuilder.forInstanceInformation("Server_potato_8126"));
    fail("Request to get instance information for an instance that does not exist did not fail");
  }
 catch (  IOException e) {
  }
}
