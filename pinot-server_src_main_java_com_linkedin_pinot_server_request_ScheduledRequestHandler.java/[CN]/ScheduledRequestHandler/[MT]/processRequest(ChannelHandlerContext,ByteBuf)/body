{
  final long queryStartTime=System.nanoTime();
  serverMetrics.addMeteredGlobalValue(ServerMeter.QUERIES,1);
  LOGGER.debug("Processing request : {}",request);
  byte[] byteArray=new byte[request.readableBytes()];
  request.readBytes(byteArray);
  SerDe serDe=new SerDe(new TCompactProtocol.Factory());
  final InstanceRequest instanceRequest=new InstanceRequest();
  if (!serDe.deserialize(instanceRequest,byteArray)) {
    LOGGER.error("Failed to deserialize query request from broker ip: {}",((InetSocketAddress)channelHandlerContext.channel().remoteAddress()).getAddress().getHostAddress());
    DataTable result=new DataTable();
    result.addException(QueryException.INTERNAL_ERROR);
    serverMetrics.addMeteredGlobalValue(ServerMeter.REQUEST_DESERIALIZATION_EXCEPTIONS,1);
    return Futures.immediateFuture(serializeDataTable(null,serverMetrics,result,queryStartTime));
  }
  long deserializationEndTime=System.nanoTime();
  final BrokerRequest brokerRequest=instanceRequest.getQuery();
  serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.REQUEST_DESERIALIZATION,deserializationEndTime - queryStartTime);
  LOGGER.debug("Processing requestId:{},request={}",instanceRequest.getRequestId(),instanceRequest);
  final QueryRequest queryRequest=new QueryRequest(instanceRequest);
  String brokerId=instanceRequest.isSetBrokerId() ? instanceRequest.getBrokerId() : ((InetSocketAddress)channelHandlerContext.channel().remoteAddress()).getAddress().getHostAddress();
  queryRequest.setClientId(brokerId);
  final long schedulerSubmitTime=System.nanoTime();
  ListenableFuture<DataTable> queryTask=queryScheduler.submit(queryRequest);
  ListenableFuture<DataTable> queryResponse=Futures.catching(queryTask,Throwable.class,new Function<Throwable,DataTable>(){
    @Nullable @Override public DataTable apply(    @Nullable Throwable input){
      serverMetrics.addMeteredGlobalValue(ServerMeter.UNCAUGHT_EXCEPTIONS,1);
      DataTable result=new DataTable();
      result.addException(QueryException.INTERNAL_ERROR);
      return result;
    }
  }
);
  ListenableFuture<byte[]> serializedQueryResponse=Futures.transform(queryResponse,new Function<DataTable,byte[]>(){
    @Nullable @Override public byte[] apply(    @Nullable DataTable instanceResponse){
      long totalNanos=System.nanoTime() - schedulerSubmitTime;
      serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.QUERY_PROCESSING,totalNanos);
      return serializeDataTable(instanceRequest,serverMetrics,instanceResponse,queryStartTime);
    }
  }
);
  return serializedQueryResponse;
}
