{
  String[] dimensionValues=new String[config.getDimensions().size()];
  for (int i=0; i < config.getDimensions().size(); i++) {
    DimensionSpec dimensionSpec=config.getDimensions().get(i);
    String dimensionValue=getRecordValue(dimensionSpec.getName(),record);
    if (!NULL_DIMENSION_VALUE.equals(dimensionValue) && dimensionSpec.getType() != null) {
switch (dimensionSpec.getType()) {
case EMAIL_DOMAIN:
        dimensionValue=parseEmailDomain(dimensionValue,dimensionSpec.getConfig());
      break;
case TERNARY:
    dimensionValue=parseTernaryValue(dimensionValue,dimensionSpec.getConfig());
  break;
}
}
dimensionValues[i]=dimensionValue;
}
DimensionKey dimensionKey=new DimensionKey(dimensionValues);
String timeColumnName=config.getTime().getColumnName();
String timeStr=getRecordValue(timeColumnName,record);
if (timeStr == null) {
throw new IllegalArgumentException("Record has null time " + timeColumnName + ": "+ record);
}
Long time=Long.valueOf(timeStr);
if (time <= 0) {
LOGGER.warn("Skipping because zero or negative time {}",record);
return null;
}
TimeGranularity inputGranularity=config.getTime().getInput();
TimeGranularity bucketGranularity=config.getTime().getBucket();
time=bucketGranularity.getUnit().convert(time * inputGranularity.getSize(),inputGranularity.getUnit()) / bucketGranularity.getSize();
MetricTimeSeries timeSeries=new MetricTimeSeries(MetricSchema.fromMetricSpecs(config.getMetrics()));
for (int i=0; i < config.getMetrics().size(); i++) {
MetricSpec metricSpec=config.getMetrics().get(i);
Number metricValue=getMetricValue(metricSpec,record);
timeSeries.increment(time,metricSpec.getName(),metricValue);
}
return new StarTreeRecordImpl(config,dimensionKey,timeSeries);
}
