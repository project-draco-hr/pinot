{
  String fileName="test_single_col.dat";
  File f=new File(fileName);
  f.delete();
  DataOutputStream dos=new DataOutputStream(new FileOutputStream(f));
  int numRows=100;
  int numCols=2;
  int[][] colData=new int[numRows][numCols];
  Random r=new Random();
  for (int i=0; i < numRows; i++) {
    colData[i]=new int[numCols];
    for (int j=0; j < numCols; j++) {
      colData[i][j]=r.nextInt();
      dos.writeInt(colData[i][j]);
    }
  }
  dos.flush();
  dos.close();
  RandomAccessFile raf=new RandomAccessFile(f,"rw");
  System.out.println("file size: " + raf.getChannel().size());
  raf.close();
  PinotDataBuffer heapBuffer=PinotDataBuffer.fromFile(f,ReadMode.heap,FileChannel.MapMode.READ_ONLY,"testing-heap");
  FixedByteSingleValueMultiColReader heapReader=new FixedByteSingleValueMultiColReader(heapBuffer,numRows,numCols,new int[]{4,4});
  heapReader.open();
  for (int i=0; i < numRows; i++) {
    for (int j=0; j < numCols; j++) {
      Assert.assertEquals(heapReader.getInt(i,j),colData[i][j]);
    }
  }
  heapReader.close();
  PinotDataBuffer mmapBuffer=PinotDataBuffer.fromFile(f,ReadMode.mmap,FileChannel.MapMode.READ_ONLY,"mmap_testing");
  FixedByteSingleValueMultiColReader mmapReader=new FixedByteSingleValueMultiColReader(mmapBuffer,numRows,numCols,new int[]{4,4});
  mmapReader.open();
  for (int i=0; i < numRows; i++) {
    for (int j=0; j < numCols; j++) {
      Assert.assertEquals(mmapReader.getInt(i,j),colData[i][j]);
    }
  }
  mmapReader.close();
  f.delete();
}
