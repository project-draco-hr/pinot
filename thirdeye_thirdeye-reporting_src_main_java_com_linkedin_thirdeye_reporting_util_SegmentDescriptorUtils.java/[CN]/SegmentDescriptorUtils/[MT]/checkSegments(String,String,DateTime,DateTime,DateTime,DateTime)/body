{
  List<TimeRange> missingSegments=new ArrayList<TimeRange>();
  ObjectMapper OBJECT_MAPPER=new ObjectMapper();
  URL url=new URL(serverUri + "/collections/" + collection+ "/segments");
  SegmentDescriptor[] sd=OBJECT_MAPPER.readValue((new InputStreamReader(url.openStream(),"UTF-8")),SegmentDescriptor[].class);
  List<SegmentDescriptor> segmentDescriptors=new ArrayList<SegmentDescriptor>();
  for (  SegmentDescriptor segment : sd) {
    if (segment != null && segment.getFile() != null) {
      segmentDescriptors.add(segment);
    }
  }
  Collections.sort(segmentDescriptors,new Comparator<SegmentDescriptor>(){
    @Override public int compare(    SegmentDescriptor o1,    SegmentDescriptor o2){
      return o1.getStartWallTime().compareTo(o2.getStartWallTime());
    }
  }
);
  for (  SegmentDescriptor segment : segmentDescriptors) {
    LOGGER.info("Segment : " + segment.getStartWallTime() + " "+ segment.getEndWallTime()+ " "+ segment.getFile());
  }
  missingSegments.addAll(getMissingSegments(segmentDescriptors,currentStartHour,currentEndHour));
  missingSegments.addAll(getMissingSegments(segmentDescriptors,baselineStartHour,baselineEndHour));
  return missingSegments;
}
