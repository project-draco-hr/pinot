{
  final Future<BrokerResponse> responseFuture=_transport.executeQueryAsync(pickRandomBroker(),statement);
  return new Future<ResultSetGroup>(){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      return responseFuture.cancel(mayInterruptIfRunning);
    }
    @Override public boolean isCancelled(){
      return responseFuture.isCancelled();
    }
    @Override public boolean isDone(){
      return responseFuture.isDone();
    }
    @Override public ResultSetGroup get() throws InterruptedException, ExecutionException {
      try {
        return get(1000L,TimeUnit.DAYS);
      }
 catch (      TimeoutException e) {
        throw new ExecutionException(e);
      }
    }
    @Override public ResultSetGroup get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      BrokerResponse response=responseFuture.get(timeout,unit);
      return new ResultSetGroup(response);
    }
  }
;
}
