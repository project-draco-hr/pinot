{
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  BrokerRequest brokerRequest=_brokerRequest.deepCopy();
  ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(makeSegMgrList(_indexSegmentList),brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  DataTable instanceResponse=globalPlan.getInstanceResponse();
  LOGGER.debug(Long.toString(instanceResponse.getLong(0,0)));
  LOGGER.debug(Double.toString(instanceResponse.getDouble(0,1)));
  LOGGER.debug(Double.toString(instanceResponse.getDouble(0,2)));
  LOGGER.debug(Double.toString(instanceResponse.getDouble(0,3)));
  LOGGER.debug(instanceResponse.getObject(0,4).toString());
  LOGGER.debug(instanceResponse.getObject(0,5).toString());
  LOGGER.debug(instanceResponse.getObject(0,6).toString());
  LOGGER.debug("Query time: {}",instanceResponse.getMetadata().get("timeUsedMs"));
  assertEquals(200001L * _indexSegmentList.size(),instanceResponse.getLong(0,0));
  assertEquals(20000100000.0 * _indexSegmentList.size(),instanceResponse.getDouble(0,1));
  assertEquals(200000.0,instanceResponse.getDouble(0,2));
  assertEquals(0.0,instanceResponse.getDouble(0,3));
  assertEquals(100000.0,Double.parseDouble(instanceResponse.getObject(0,4).toString()));
  assertEquals(10,((IntOpenHashSet)instanceResponse.getObject(0,5)).size());
  assertEquals(100,((IntOpenHashSet)instanceResponse.getObject(0,6)).size());
  BrokerReduceService reduceService=new BrokerReduceService();
  Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:1111"),instanceResponse);
  BrokerResponseNative brokerResponse=reduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  LOGGER.debug(brokerResponse.getAggregationResults().toString());
}
