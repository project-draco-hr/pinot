{
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  BrokerRequest brokerRequest=_brokerRequest.deepCopy();
  brokerRequest.setAggregationsInfo(null);
  brokerRequest.setAggregationsInfoIsSet(false);
  brokerRequest.setSelections(getSelectionQuery());
  brokerRequest.getSelections().setSelectionSortSequence(null);
  brokerRequest.getSelections().setOffset(0);
  brokerRequest.getSelections().setSize(20);
  ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(makeSegMgrList(_indexSegmentList),brokerRequest,executorService,150000);
  globalPlan.print();
  brokerRequest=setFilterQuery(brokerRequest);
  globalPlan=instancePlanMaker.makeInterSegmentPlan(makeSegMgrList(_indexSegmentList),brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  DataTable instanceResponse=globalPlan.getInstanceResponse();
  BrokerReduceService defaultReduceService=new BrokerReduceService();
  Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
  instanceResponseMap.put(new ServerInstance("localhost:1111"),instanceResponse);
  BrokerResponseNative brokerResponse=defaultReduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  LOGGER.debug(brokerResponse.getSelectionResults().toString());
  LOGGER.debug("TimeUsedMs: {}",brokerResponse.getTimeUsedMs());
  LOGGER.debug(brokerResponse.toString());
  List<Serializable[]> rows=brokerResponse.getSelectionResults().getRows();
  for (  Serializable[] row : rows) {
    Assert.assertEquals(Double.parseDouble(row[0].toString()),1.0);
  }
}
