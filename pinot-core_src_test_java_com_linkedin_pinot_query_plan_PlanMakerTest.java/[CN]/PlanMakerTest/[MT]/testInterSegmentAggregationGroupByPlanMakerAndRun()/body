{
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV1();
  BrokerRequest brokerRequest=getAggregationGroupByNoFilterBrokerRequest();
  ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(_indexSegmentList,brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  DataTable instanceResponse=globalPlan.getInstanceResponse();
  System.out.println(instanceResponse);
  List<DataTable> instanceResponseList=new ArrayList<DataTable>();
  instanceResponseList.add(instanceResponse);
  List<Map<String,Serializable>> combinedGroupByResult=AggregationGroupByOperatorService.transformDataTableToGroupByResult(instanceResponse);
  int i=0;
  Map<String,Serializable> singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      assertEquals(400020,((Number)resultList).longValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      assertEquals(400000,((Number)resultList).longValue());
    }
  }
  i=1;
  singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      double expectedSumValue=(((Double.parseDouble(keyString) + 200000 + Double.parseDouble(keyString)) * 20001) / 2) * 20;
      assertEquals(expectedSumValue,((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      double expectedSumValue=(((Double.parseDouble(keyString) + 200000) - 10) + Double.parseDouble(keyString)) * 10000 * 20;
      assertEquals(expectedSumValue,((Double)resultList).doubleValue());
    }
  }
  i=2;
  singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      assertEquals(200000 + Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      assertEquals((200000 - 10) + Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
  }
  i=3;
  singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      assertEquals(Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      assertEquals(Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
  }
  i=4;
  singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      double expectedAvgValue=((((Double.parseDouble(keyString) + 200000 + Double.parseDouble(keyString)) * 20001) / 2) * 20) / 400020;
      assertEquals(expectedAvgValue,Double.parseDouble((resultList.toString())));
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      System.out.println("grouped key : " + keyString + ", value : "+ resultList);
      double expectedAvgValue=((((Double.parseDouble(keyString) + 200000) - 10) + Double.parseDouble(keyString)) * 10000 * 20) / 400000;
      assertEquals(expectedAvgValue,Double.parseDouble((resultList.toString())));
    }
  }
  i=5;
  singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    Serializable resultList=singleGroupByResult.get(keyString);
    System.out.println("grouped key : " + keyString + ", value : "+ resultList);
    int expectedAvgValue=1;
    assertEquals(expectedAvgValue,((IntOpenHashSet)resultList).size());
  }
  i=6;
  singleGroupByResult=combinedGroupByResult.get(i);
  for (  String keyString : singleGroupByResult.keySet()) {
    Serializable resultList=singleGroupByResult.get(keyString);
    System.out.println("grouped key : " + keyString + ", value : "+ resultList);
    int expectedAvgValue=10;
    assertEquals(expectedAvgValue,((IntOpenHashSet)resultList).size());
  }
  DefaultReduceService defaultReduceService=new DefaultReduceService();
  Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
  BrokerResponse brokerResponse=defaultReduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  System.out.println(new JSONArray(brokerResponse.getAggregationResults()));
  System.out.println("Time used : " + brokerResponse.getTimeUsedMs());
}
