{
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  BrokerRequest brokerRequest=getAggregationGroupByNoFilterBrokerRequest();
  ExecutorService executorService=Executors.newCachedThreadPool(new NamedThreadFactory("test-plan-maker"));
  Plan globalPlan=instancePlanMaker.makeInterSegmentPlan(makeSegMgrList(_indexSegmentList),brokerRequest,executorService,150000);
  globalPlan.print();
  globalPlan.execute();
  DataTable instanceResponse=globalPlan.getInstanceResponse();
  LOGGER.debug(instanceResponse.toString());
  List<DataTable> instanceResponseList=new ArrayList<DataTable>();
  instanceResponseList.add(instanceResponse);
  List<Map<String,Serializable>> combinedGroupByResult=AggregationGroupByOperatorService.transformDataTableToGroupByResult(instanceResponse);
  Map<String,Serializable> singleGroupByResult=combinedGroupByResult.get(COUNT_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(400020,((Number)resultList).longValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(400000,((Number)resultList).longValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(SUM_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedSumValue=(((Double.parseDouble(keyString) + 200000 + Double.parseDouble(keyString)) * 20001) / 2) * 20;
      assertEquals(expectedSumValue,((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedSumValue=(((Double.parseDouble(keyString) + 200000) - 10) + Double.parseDouble(keyString)) * 10000 * 20;
      assertEquals(expectedSumValue,((Double)resultList).doubleValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(MAX_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(200000 + Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals((200000 - 10) + Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(MIN_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(AVG_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedAvgValue=((((Double.parseDouble(keyString) + 200000 + Double.parseDouble(keyString)) * 20001) / 2) * 20) / 400020;
      assertEquals(expectedAvgValue,Double.parseDouble((resultList.toString())));
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedAvgValue=((((Double.parseDouble(keyString) + 200000) - 10) + Double.parseDouble(keyString)) * 10000 * 20) / 400000;
      assertEquals(expectedAvgValue,Double.parseDouble((resultList.toString())));
    }
  }
  singleGroupByResult=combinedGroupByResult.get(DISTINCT_DIM0_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    Serializable resultList=singleGroupByResult.get(keyString);
    LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
    int expectedAvgValue=1;
    assertEquals(expectedAvgValue,((IntOpenHashSet)resultList).size());
  }
  singleGroupByResult=combinedGroupByResult.get(DISTINCT_DIM1_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    Serializable resultList=singleGroupByResult.get(keyString);
    LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
    int expectedAvgValue=10;
    assertEquals(expectedAvgValue,((IntOpenHashSet)resultList).size());
  }
  DefaultReduceService defaultReduceService=new DefaultReduceService();
  Map<ServerInstance,DataTable> instanceResponseMap=new HashMap<ServerInstance,DataTable>();
  instanceResponseMap.put(new ServerInstance("localhost:0000"),instanceResponse);
  BrokerResponseJSON brokerResponse=defaultReduceService.reduceOnDataTable(brokerRequest,instanceResponseMap);
  LOGGER.debug(new JSONArray(brokerResponse.getAggregationResults()).toString());
  LOGGER.debug("Time used: {}",brokerResponse.getTimeUsedMs());
}
