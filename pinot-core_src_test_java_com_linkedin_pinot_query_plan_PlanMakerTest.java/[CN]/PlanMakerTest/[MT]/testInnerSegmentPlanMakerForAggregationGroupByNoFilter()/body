{
  BrokerRequest brokerRequest=getAggregationGroupByNoFilterBrokerRequest();
  PlanMaker instancePlanMaker=new InstancePlanMakerImplV2();
  PlanNode rootPlanNode=instancePlanMaker.makeInnerSegmentPlan(_indexSegment,brokerRequest);
  rootPlanNode.showTree("");
  IntermediateResultsBlock resultBlock=(IntermediateResultsBlock)rootPlanNode.run().nextBlock();
  LOGGER.debug("RunningTime: {}",resultBlock.getTimeUsedMs());
  LOGGER.debug("NumDocsScanned: {}",resultBlock.getNumDocsScanned());
  LOGGER.debug("TotalDocs: {}",resultBlock.getTotalRawDocs());
  List<Map<String,Serializable>> combinedGroupByResult=resultBlock.getAggregationGroupByOperatorResult();
  Map<String,Serializable> singleGroupByResult=combinedGroupByResult.get(COUNT_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(200001,((Number)resultList).longValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(200000,((Number)resultList).longValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(SUM_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedSumValue=((Double.parseDouble(keyString) + 2000000 + Double.parseDouble(keyString)) * 200001) / 2;
      assertEquals(expectedSumValue,((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedSumValue=(((Double.parseDouble(keyString) + 2000000) - 10) + Double.parseDouble(keyString)) * 100000;
      assertEquals(expectedSumValue,((Double)resultList).doubleValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(MAX_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(2000000 + Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals((2000000 - 10) + Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(MIN_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      assertEquals(Double.parseDouble(keyString),((Double)resultList).doubleValue());
    }
  }
  singleGroupByResult=combinedGroupByResult.get(AVG_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    if (keyString.equals("0")) {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedAvgValue=((Double.parseDouble(keyString) + 2000000 + Double.parseDouble(keyString)) * 200001) / 2 / 200001;
      assertEquals(expectedAvgValue,Double.parseDouble((resultList.toString())));
    }
 else {
      Serializable resultList=singleGroupByResult.get(keyString);
      LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
      double expectedAvgValue=((((Double.parseDouble(keyString) + 2000000) - 10) + Double.parseDouble(keyString)) * 100000) / 200000;
      assertEquals(expectedAvgValue,Double.parseDouble((resultList.toString())));
    }
  }
  singleGroupByResult=combinedGroupByResult.get(DISTINCT_DIM0_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    Serializable resultList=singleGroupByResult.get(keyString);
    LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
    assertEquals(1,((IntOpenHashSet)resultList).size());
  }
  singleGroupByResult=combinedGroupByResult.get(DISTINCT_DIM1_AGGREGATION_INDEX);
  for (  String keyString : singleGroupByResult.keySet()) {
    Serializable resultList=singleGroupByResult.get(keyString);
    LOGGER.debug("grouped key: {}, value: {}",keyString,resultList);
    assertEquals(10,((IntOpenHashSet)resultList).size());
  }
}
