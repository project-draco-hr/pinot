{
  ArrayList<Integer> leftIdsCopy=new ArrayList<>(leftIds);
  ArrayList<Integer> rightIdsCopy=new ArrayList<>(rightIds);
  if (leftIdsCopy.size() != rightIdsCopy.size()) {
    return false;
  }
  Iterator<Integer> leftIterator=leftIdsCopy.iterator();
  while (leftIterator.hasNext()) {
    Integer leftId=leftIterator.next();
    FilterQuery leftQuery=leftFilterQueries.getFilterQueryMap().get(leftId);
    Iterator<Integer> rightIterator=rightIdsCopy.iterator();
    while (rightIterator.hasNext()) {
      Integer rightId=rightIterator.next();
      FilterQuery rightQuery=rightFilterQueries.getFilterQueryMap().get(rightId);
      boolean operatorsAreEqual=EqualityUtils.isEqual(leftQuery.getOperator(),rightQuery.getOperator());
      boolean columnsAreEqual=EqualityUtils.isEqual(leftQuery.getColumn(),rightQuery.getColumn());
      boolean valuesAreEqual=EqualityUtils.isEqual(leftQuery.getValue(),rightQuery.getValue());
      boolean fieldsAreEqual=columnsAreEqual && operatorsAreEqual && valuesAreEqual;
      if (operatorsAreEqual && columnsAreEqual && leftQuery.getOperator() == FilterOperator.IN) {
        Set<String> leftValues=new HashSet<>(Arrays.asList(leftQuery.getValue().get(0).split("\t\t")));
        Set<String> rightValues=new HashSet<>(Arrays.asList(rightQuery.getValue().get(0).split("\t\t")));
        fieldsAreEqual=leftValues.equals(rightValues);
        if (!fieldsAreEqual) {
          System.out.println("in clause not the same?");
          System.out.println("leftValues = " + leftValues);
          System.out.println("rightValues = " + rightValues);
        }
      }
      if (!operatorsAreEqual && columnsAreEqual && valuesAreEqual) {
        if ((leftQuery.getOperator() == FilterOperator.NOT || leftQuery.getOperator() == FilterOperator.NOT_IN) && (rightQuery.getOperator() == FilterOperator.NOT || rightQuery.getOperator() == FilterOperator.NOT_IN)) {
          fieldsAreEqual=true;
        }
      }
      if (fieldsAreEqual) {
        if (filterQueryIsEquivalent(leftQuery.getNestedFilterQueryIds(),rightQuery.getNestedFilterQueryIds(),leftFilterQueries,rightFilterQueries)) {
          leftIterator.remove();
          rightIterator.remove();
          break;
        }
      }
    }
  }
  return leftIdsCopy.isEmpty();
}
