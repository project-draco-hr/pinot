{
  boolean queryTypeIsEqual=EqualityUtils.isEqual(left.getQueryType(),right.getQueryType());
  boolean querySourceIsEqual=EqualityUtils.isEqual(left.getQuerySource(),right.getQuerySource());
  boolean timeInterlalIsEqual=EqualityUtils.isEqual(left.getTimeInterval(),right.getTimeInterval());
  boolean durationIsEqual=EqualityUtils.isEqual(left.getDuration(),right.getDuration());
  boolean selectionsAreEqual=EqualityUtils.isEqual(left.getSelections(),right.getSelections());
  boolean bucketHashKeyIsEqual=EqualityUtils.isEqual(left.getBucketHashKey(),right.getBucketHashKey());
  boolean basicFieldsAreEquivalent=queryTypeIsEqual && querySourceIsEqual && timeInterlalIsEqual&& durationIsEqual&& selectionsAreEqual&& bucketHashKeyIsEqual;
  boolean aggregationsAreEquivalent=true;
  List<AggregationInfo> leftAggregationsInfo=left.getAggregationsInfo();
  List<AggregationInfo> rightAggregationsInfo=right.getAggregationsInfo();
  if (!EqualityUtils.isEqual(leftAggregationsInfo,rightAggregationsInfo)) {
    if (leftAggregationsInfo == null || rightAggregationsInfo == null || leftAggregationsInfo.size() != rightAggregationsInfo.size()) {
      aggregationsAreEquivalent=false;
    }
 else {
      ArrayList<AggregationInfo> leftAggregationsInfoCopy=new ArrayList<>(leftAggregationsInfo);
      ArrayList<AggregationInfo> rightAggregationsInfoCopy=new ArrayList<>(rightAggregationsInfo);
      int aggregationsInfoCount=leftAggregationsInfoCopy.size();
      for (int i=0; i < aggregationsInfoCount; i++) {
        AggregationInfo leftInfo=leftAggregationsInfoCopy.get(i);
        for (int j=0; j < rightAggregationsInfoCopy.size(); ++j) {
          AggregationInfo rightInfo=rightAggregationsInfoCopy.get(j);
          if (EqualityUtils.isEqual(leftInfo,rightInfo)) {
            rightAggregationsInfoCopy.remove(j);
            break;
          }
 else {
            if ("count".equalsIgnoreCase(rightInfo.getAggregationType()) && "count".equalsIgnoreCase(leftInfo.getAggregationType())) {
              rightAggregationsInfoCopy.remove(j);
              break;
            }
          }
        }
      }
      aggregationsAreEquivalent=rightAggregationsInfoCopy.isEmpty();
    }
  }
  boolean groupByClauseIsEquivalent=EqualityUtils.isEqual(left.getGroupBy(),right.getGroupBy());
  if (!groupByClauseIsEquivalent) {
    groupByClauseIsEquivalent=(EqualityUtils.isEqualIgnoringOrder(left.getGroupBy().getColumns(),right.getGroupBy().getColumns()) && EqualityUtils.isEqual(left.getGroupBy().getTopN(),right.getGroupBy().getTopN()));
  }
  boolean filtersAreEquivalent=EqualityUtils.isEqual(left.isSetFilterQuery(),right.isSetFilterQuery());
  if (left.isSetFilterQuery()) {
    int leftRootId=left.getFilterQuery().getId();
    int rightRootId=right.getFilterQuery().getId();
    filtersAreEquivalent=!filtersHaveAtMostOneRangeFilterPerColumn(left,right) || filterQueryIsEquivalent(Collections.singletonList(leftRootId),Collections.singletonList(rightRootId),left.getFilterSubQueryMap(),right.getFilterSubQueryMap());
  }
  boolean areEqual=basicFieldsAreEquivalent && aggregationsAreEquivalent && groupByClauseIsEquivalent&& filtersAreEquivalent;
  if (!areEqual) {
    System.out.println("queryTypeIsEqual = " + queryTypeIsEqual);
    System.out.println("querySourceIsEqual = " + querySourceIsEqual);
    System.out.println("timeInterlalIsEqual = " + timeInterlalIsEqual);
    System.out.println("durationIsEqual = " + durationIsEqual);
    System.out.println("selectionsAreEqual = " + selectionsAreEqual);
    System.out.println("bucketHashKeyIsEqual = " + bucketHashKeyIsEqual);
    System.out.println("basicFieldsAreEquivalent = " + basicFieldsAreEquivalent);
    System.out.println("aggregationsAreEquivalent = " + aggregationsAreEquivalent);
    System.out.println("groupByClauseIsEquivalent = " + groupByClauseIsEquivalent);
    System.out.println("filtersAreEquivalent = " + filtersAreEquivalent);
    if (!filtersAreEquivalent) {
      int leftRootId=left.getFilterQuery().getId();
      int rightRootId=right.getFilterQuery().getId();
      displayFilterDifference(Collections.singletonList(leftRootId),Collections.singletonList(rightRootId),left.getFilterSubQueryMap(),right.getFilterSubQueryMap());
    }
  }
  return areEqual;
}
