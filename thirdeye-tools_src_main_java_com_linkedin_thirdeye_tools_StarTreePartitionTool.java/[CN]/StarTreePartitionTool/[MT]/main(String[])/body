{
  int numPartitions=Integer.valueOf(args[0]);
  File inputDir=new File(args[1]);
  File outputDir=new File(args[2]);
  File inputDataDir=new File(inputDir,StarTreeConstants.DATA_DIR_NAME);
  File[] files=inputDataDir.listFiles(new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.getName().endsWith(StarTreeConstants.BUFFER_FILE_SUFFIX);
    }
  }
);
  if (files == null) {
    throw new IllegalStateException("No files in " + inputDir);
  }
  Map<Integer,Set<UUID>> partitionMap=new HashMap<Integer,Set<UUID>>();
  for (  File file : files) {
    UUID nodeId=UUID.fromString(file.getName().substring(0,file.getName().indexOf(StarTreeConstants.BUFFER_FILE_SUFFIX)));
    int partitionId=StarTreeUtils.getPartitionId(nodeId,numPartitions);
    Set<UUID> nodeIds=partitionMap.get(partitionId);
    if (nodeIds == null) {
      nodeIds=new HashSet<UUID>();
      partitionMap.put(partitionId,nodeIds);
    }
    nodeIds.add(nodeId);
  }
  FileUtils.forceMkdir(outputDir);
  for (  Map.Entry<Integer,Set<UUID>> entry : partitionMap.entrySet()) {
    LOG.info("Creating partition {}",entry.getKey());
    File partitionDir=new File(outputDir,Integer.toString(entry.getKey()));
    File collectionDir=new File(partitionDir,inputDir.getName());
    File outputDataDir=new File(collectionDir,StarTreeConstants.DATA_DIR_NAME);
    FileUtils.forceMkdir(collectionDir);
    FileUtils.forceMkdir(outputDataDir);
    File treeSrc=new File(inputDir,StarTreeConstants.TREE_FILE_NAME);
    File treeDst=new File(collectionDir,StarTreeConstants.TREE_FILE_NAME);
    FileUtils.copyFile(treeSrc,treeDst);
    LOG.info("Copied tree to partition {}",entry.getKey());
    File configSrc=new File(inputDir,StarTreeConstants.CONFIG_FILE_NAME);
    File configDst=new File(collectionDir,StarTreeConstants.CONFIG_FILE_NAME);
    FileUtils.copyFile(configSrc,configDst);
    LOG.info("Copied config to partition {}",entry.getKey());
    for (    UUID nodeId : entry.getValue()) {
      File bufferSrc=new File(inputDataDir,nodeId + StarTreeConstants.BUFFER_FILE_SUFFIX);
      File bufferDst=new File(outputDataDir,nodeId + StarTreeConstants.BUFFER_FILE_SUFFIX);
      FileUtils.copyFile(bufferSrc,bufferDst);
      File indexSrc=new File(inputDataDir,nodeId + StarTreeConstants.INDEX_FILE_SUFFIX);
      File indexDst=new File(outputDataDir,nodeId + StarTreeConstants.INDEX_FILE_SUFFIX);
      FileUtils.copyFile(indexSrc,indexDst);
      LOG.info("\tCopied {} to partition {}",nodeId,entry.getKey());
    }
  }
}
