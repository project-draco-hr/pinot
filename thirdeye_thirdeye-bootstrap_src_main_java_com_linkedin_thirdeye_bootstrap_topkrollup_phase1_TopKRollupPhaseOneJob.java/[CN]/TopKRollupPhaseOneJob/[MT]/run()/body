{
  Job job=Job.getInstance(getConf());
  job.setJobName(name);
  job.setJarByClass(TopKRollupPhaseOneJob.class);
  FileSystem fs=FileSystem.get(getConf());
  Schema schema=new Schema.Parser().parse(fs.open(new Path(getAndCheck(TOPK_ROLLUP_PHASE1_SCHEMA_PATH.toString()))));
  LOGGER.info("{}",schema);
  job.setMapperClass(TopKRollupPhaseOneMapper.class);
  AvroJob.setInputKeySchema(job,schema);
  job.setInputFormatClass(AvroKeyInputFormat.class);
  job.setMapOutputKeyClass(BytesWritable.class);
  job.setMapOutputValueClass(BytesWritable.class);
  job.setReducerClass(TopKRollupPhaseOneReducer.class);
  job.setOutputKeyClass(BytesWritable.class);
  job.setOutputValueClass(BytesWritable.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  String numReducers=props.getProperty("num.reducers");
  if (numReducers != null) {
    job.setNumReduceTasks(Integer.parseInt(numReducers));
  }
 else {
    job.setNumReduceTasks(10);
  }
  LOGGER.info("Setting number of reducers : " + job.getNumReduceTasks());
  Configuration configuration=job.getConfiguration();
  String inputPathDir=getAndSetConfiguration(configuration,TOPK_ROLLUP_PHASE1_INPUT_PATH);
  getAndSetConfiguration(configuration,TOPK_ROLLUP_PHASE1_CONFIG_PATH);
  getAndSetConfiguration(configuration,TOPK_ROLLUP_PHASE1_OUTPUT_PATH);
  getAndSetConfiguration(configuration,TOPK_ROLLUP_PHASE1_METRIC_SUMS_PATH);
  LOGGER.info("Input path dir: " + inputPathDir);
  for (  String inputPath : inputPathDir.split(",")) {
    LOGGER.info("Adding input:" + inputPath);
    Path input=new Path(inputPath);
    FileInputFormat.addInputPath(job,input);
  }
  FileOutputFormat.setOutputPath(job,new Path(getAndCheck(TOPK_ROLLUP_PHASE1_OUTPUT_PATH.toString())));
  job.waitForCompletion(true);
  return job;
}
