{
  int numOfItems=10000;
  for (  Byte quantile : functionMap.keySet()) {
    LOGGER.info("[Test Quantile " + quantile + "]");
    for (int i=0; i < numOfItems; i+=numOfItems / 17) {
      if (i == 0) {
        continue;
      }
      RandomNumberArray arr=new RandomNumberArray(i,DUPLICATION_PER_ITEM);
      TDigest digest=new TDigest(compressionFactor);
      DoubleArrayList list=new DoubleArrayList();
      arr.offerAllNumberTo(digest);
      arr.offerAllNumberTo(list);
      byte[] bytes=serialize(digest);
      TDigest digest2=deserialize(bytes);
      double estimate=digest.getQuantile(quantile);
      double estimate2=digest2.getQuantile(quantile);
      double actual=QuantileUtil.getValueOnQuantile(list,quantile);
      println("[Before Serialization Estimate]: " + estimate);
      println("[After Serialization Estimate]: " + estimate2);
    }
  }
  assertEquals(true,true);
}
