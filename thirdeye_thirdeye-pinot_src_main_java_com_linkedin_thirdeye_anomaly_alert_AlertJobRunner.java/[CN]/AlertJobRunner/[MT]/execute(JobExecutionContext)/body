{
  LOG.info("Running " + jobExecutionContext.getJobDetail().getKey().toString());
  alertJobContext=(AlertJobContext)jobExecutionContext.getJobDetail().getJobDataMap().get(ALERT_JOB_CONTEXT);
  anomalyJobSpecDAO=alertJobContext.getAnomalyJobDAO();
  anomalyTasksSpecDAO=alertJobContext.getAnomalyTaskDAO();
  emailConfigurationDAO=alertJobContext.getEmailConfigurationDAO();
  alertConfigId=alertJobContext.getAlertConfigId();
  EmailConfiguration alertConfig=emailConfigurationDAO.findById(alertConfigId);
  alertJobContext.setAlertConfig(alertConfig);
  windowEnd=alertJobContext.getWindowEnd();
  windowStart=alertJobContext.getWindowStart();
  if (windowEnd == null) {
    long delayMillis=0;
    if (alertConfig.getWindowDelay() != null) {
      delayMillis=TimeUnit.MILLISECONDS.convert(alertConfig.getWindowDelay(),alertConfig.getWindowDelayUnit());
    }
    Date scheduledFireTime=jobExecutionContext.getScheduledFireTime();
    windowEnd=new DateTime(scheduledFireTime).minus(delayMillis);
  }
  if (windowStart == null) {
    int windowSize=alertConfig.getWindowSize();
    TimeUnit windowUnit=alertConfig.getWindowUnit();
    long windowMillis=TimeUnit.MILLISECONDS.convert(windowSize,windowUnit);
    windowStart=windowEnd.minus(windowMillis);
  }
  alertJobContext.setWindowStart(windowStart);
  alertJobContext.setWindowEnd(windowEnd);
  Long jobExecutionId=createJob();
  alertJobContext.setJobExecutionId(jobExecutionId);
  List<Long> taskIds=createTasks();
}
