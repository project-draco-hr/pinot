{
  LOG.info("Running " + jobExecutionContext.getJobDetail().getKey().toString());
  alertJobContext=(AlertJobContext)jobExecutionContext.getJobDetail().getJobDataMap().get(ALERT_JOB_CONTEXT);
  anomalyJobSpecDAO=alertJobContext.getAnomalyJobDAO();
  anomalyTasksSpecDAO=alertJobContext.getAnomalyTaskDAO();
  emailConfigurationDAO=alertJobContext.getEmailConfigurationDAO();
  alertConfigId=alertJobContext.getAlertConfigId();
  EmailConfiguration alertConfig=emailConfigurationDAO.findById(alertConfigId);
  alertJobContext.setAlertConfig(alertConfig);
  windowEndTime=alertJobContext.getWindowEndTime();
  windowStartTime=alertJobContext.getWindowStartTime();
  if (windowEndTime == null) {
    long delayMillis=0;
    if (alertConfig.getWindowDelay() != null) {
      delayMillis=TimeUnit.MILLISECONDS.convert(alertConfig.getWindowDelay(),alertConfig.getWindowDelayUnit());
    }
    Date scheduledFireTime=jobExecutionContext.getScheduledFireTime();
    windowEndTime=new DateTime(scheduledFireTime).minus(delayMillis);
  }
  if (windowStartTime == null) {
    int windowSize=alertConfig.getWindowSize();
    TimeUnit windowUnit=alertConfig.getWindowUnit();
    long windowMillis=TimeUnit.MILLISECONDS.convert(windowSize,windowUnit);
    windowStartTime=windowEndTime.minus(windowMillis);
  }
  alertJobContext.setWindowStartTime(windowStartTime);
  alertJobContext.setWindowEndTime(windowEndTime);
  Long jobExecutionId=createJob();
  alertJobContext.setJobExecutionId(jobExecutionId);
  List<Long> taskIds=createTasks();
}
