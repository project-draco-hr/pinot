{
  if (!_pinotHelixResourceManager.isLeader()) {
    LOGGER.info("Skipping validation, not leader!");
    return;
  }
  LOGGER.info("Starting validation");
  List<String> allTableNames=_pinotHelixResourceManager.getAllPinotTableNames();
  ZkHelixPropertyStore<ZNRecord> propertyStore=_pinotHelixResourceManager.getPropertyStore();
  for (  String tableName : allTableNames) {
    List<SegmentMetadata> segmentMetadataList=new ArrayList<SegmentMetadata>();
    TableType tableType=TableNameBuilder.getTableTypeFromTableName(tableName);
    if (tableType.equals(TableType.OFFLINE)) {
      validateOfflineSegmentPush(propertyStore,tableName,segmentMetadataList);
    }
 else     if (tableType.equals(TableType.REALTIME)) {
      List<RealtimeSegmentZKMetadata> realtimeSegmentZKMetadatas=ZKMetadataProvider.getRealtimeSegmentZKMetadataListForTable(propertyStore,tableName);
      boolean countHLCSegments=true;
      AbstractTableConfig tableConfig;
      KafkaStreamMetadata streamMetadata;
      try {
        tableConfig=_pinotHelixResourceManager.getRealtimeTableConfig(tableName);
        streamMetadata=new KafkaStreamMetadata(tableConfig.getIndexingConfig().getStreamConfigs());
        if (streamMetadata.hasSimpleKafkaConsumerType() && !streamMetadata.hasHighLevelKafkaConsumerType()) {
          countHLCSegments=false;
        }
      }
 catch (      Exception e) {
        LOGGER.warn("Cannot get tableconfig for {}",tableName);
        continue;
      }
      for (      RealtimeSegmentZKMetadata realtimeSegmentZKMetadata : realtimeSegmentZKMetadatas) {
        SegmentMetadata segmentMetadata=new SegmentMetadataImpl(realtimeSegmentZKMetadata);
        segmentMetadataList.add(segmentMetadata);
      }
      _validationMetrics.updateTotalDocumentsGauge(tableName,computeRealtimeTotalDocumentInSegments(segmentMetadataList,countHLCSegments));
      if (streamMetadata.hasSimpleKafkaConsumerType()) {
        validateLLCSegments(tableName);
      }
    }
 else {
      LOGGER.warn("Ignoring table type {} for table {}",tableType,tableName);
    }
  }
  LOGGER.info("Validation completed");
}
