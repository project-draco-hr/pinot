{
  if (segmentIntervals.size() < 2) {
    return Collections.emptyList();
  }
  List<Interval> sortedSegmentIntervals=new ArrayList<Interval>(segmentIntervals);
  Collections.sort(sortedSegmentIntervals,new Comparator<Interval>(){
    @Override public int compare(    Interval first,    Interval second){
      if (first.getStartMillis() < second.getStartMillis())       return -1;
 else       if (second.getStartMillis() < first.getStartMillis())       return 1;
      return 0;
    }
  }
);
  final long startTime=sortedSegmentIntervals.get(0).getStartMillis();
  long endTime=Long.MIN_VALUE;
  for (  Interval sortedSegmentInterval : sortedSegmentIntervals) {
    if (endTime < sortedSegmentInterval.getEndMillis()) {
      endTime=sortedSegmentInterval.getEndMillis();
    }
  }
  final long frequencyMillis=frequency.getMillis();
  int lastEndIntervalCount=0;
  List<Interval> missingIntervals=new ArrayList<Interval>(10);
  for (  Interval segmentInterval : sortedSegmentIntervals) {
    int startIntervalCount=(int)((segmentInterval.getStartMillis() - startTime) / frequencyMillis);
    int endIntervalCount=(int)((segmentInterval.getEndMillis() - startTime) / frequencyMillis);
    if (lastEndIntervalCount < startIntervalCount - 1) {
      for (int missingIntervalIndex=lastEndIntervalCount + 1; missingIntervalIndex < startIntervalCount; ++missingIntervalIndex) {
        missingIntervals.add(new Interval(startTime + frequencyMillis * missingIntervalIndex,startTime + frequencyMillis * (missingIntervalIndex + 1) - 1));
      }
    }
    lastEndIntervalCount=Math.max(lastEndIntervalCount,endIntervalCount);
  }
  return missingIntervals;
}
