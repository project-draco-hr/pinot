{
  ensureDirectoryExistsAndIsEmpty(_tmpDir);
  ensureDirectoryExistsAndIsEmpty(_segmentDir);
  ensureDirectoryExistsAndIsEmpty(_tarDir);
  startCluster();
  final List<File> avroFiles=unpackAvroData(_tmpDir,SEGMENT_COUNT);
  createTable();
  ExecutorService executor=Executors.newCachedThreadPool();
  setupH2AndInsertAvro(avroFiles,executor);
  buildSegmentsFromAvro(avroFiles,executor,0,_segmentDir,_tarDir,"mytable");
  setupQueryGenerator(avroFiles,executor);
  executor.shutdown();
  executor.awaitTermination(10,TimeUnit.MINUTES);
  final CountDownLatch latch=new CountDownLatch(1);
  HelixManager manager=HelixManagerFactory.getZKHelixManager(getHelixClusterName(),"test_instance",InstanceType.SPECTATOR,ZkStarter.DEFAULT_ZK_STR);
  manager.connect();
  manager.addExternalViewChangeListener(new ExternalViewChangeListener(){
    @Override public void onExternalViewChange(    List<ExternalView> externalViewList,    NotificationContext changeContext){
      for (      ExternalView externalView : externalViewList) {
        if (externalView.getId().contains("mytable")) {
          Set<String> partitionSet=externalView.getPartitionSet();
          if (partitionSet.size() == SEGMENT_COUNT) {
            int onlinePartitionCount=0;
            for (            String partitionId : partitionSet) {
              Map<String,String> partitionStateMap=externalView.getStateMap(partitionId);
              if (partitionStateMap.containsValue("ONLINE")) {
                onlinePartitionCount++;
              }
            }
            if (onlinePartitionCount == SEGMENT_COUNT) {
              System.out.println("Got " + SEGMENT_COUNT + " online tables, unlatching the main thread");
              latch.countDown();
            }
          }
        }
      }
    }
  }
);
  int i=0;
  for (  String segmentName : _tarDir.list()) {
    System.out.println("Uploading segment " + (i++) + " : "+ segmentName);
    File file=new File(_tarDir,segmentName);
    FileUploadUtils.sendSegmentFile("localhost","8998",segmentName,new FileInputStream(file),file.length());
  }
  latch.await();
  TOTAL_DOCS=115545;
  long timeInTwoMinutes=System.currentTimeMillis() + 2 * 60 * 1000L;
  long numDocs;
  while ((numDocs=getCurrentServingNumDocs()) < TOTAL_DOCS) {
    System.out.println("Current number of documents: " + numDocs);
    if (System.currentTimeMillis() < timeInTwoMinutes) {
      Thread.sleep(1000);
    }
 else {
      Assert.fail("Segments were not completely loaded within two minutes");
    }
  }
}
