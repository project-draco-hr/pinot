{
  try {
    String text=new String(payload,"UTF-8");
    JSONObject message=new JSONObject(text);
    Map<String,Object> rowEntries=new HashMap<String,Object>();
    for (    FieldSpec dimensionSpec : schema.getDimensionFieldSpecs()) {
      if (message.has(dimensionSpec.getName())) {
        Object entry;
        if (dimensionSpec.isSingleValueField()) {
          entry=stringToDataType(dimensionSpec,message.getString(dimensionSpec.getName()));
        }
 else {
          JSONArray jsonArray=message.getJSONArray(dimensionSpec.getName());
          Object[] array=new Object[jsonArray.length()];
          for (int i=0; i < array.length; i++) {
            array[i]=stringToDataType(dimensionSpec,jsonArray.getString(i));
          }
          if (array.length == 0) {
            entry=new Object[]{AvroRecordReader.getDefaultNullValue(dimensionSpec)};
          }
 else {
            entry=array;
          }
        }
        rowEntries.put(dimensionSpec.getName(),entry);
      }
 else {
        Object entry=AvroRecordReader.getDefaultNullValue(dimensionSpec);
        rowEntries.put(dimensionSpec.getName(),entry);
      }
    }
    for (    FieldSpec metricSpec : schema.getMetricFieldSpecs()) {
      if (message.has(metricSpec.getName())) {
        Object entry=stringToDataType(metricSpec,message.getString(metricSpec.getName()));
        rowEntries.put(metricSpec.getName(),entry);
      }
 else {
        Object entry=AvroRecordReader.getDefaultNullValue(metricSpec);
        rowEntries.put(metricSpec.getName(),entry);
      }
    }
    TimeFieldSpec timeSpec=schema.getTimeFieldSpec();
    if (message.has(timeSpec.getName())) {
      Object entry=stringToDataType(timeSpec,message.getString(timeSpec.getName()));
      rowEntries.put(timeSpec.getName(),entry);
    }
 else {
      Object entry=AvroRecordReader.getDefaultNullValue(timeSpec);
      rowEntries.put(timeSpec.getName(),entry);
    }
    GenericRow row=new GenericRow();
    row.init(rowEntries);
    return row;
  }
 catch (  Exception e) {
    LOGGER.error("error decoding , ",e);
  }
  return null;
}
