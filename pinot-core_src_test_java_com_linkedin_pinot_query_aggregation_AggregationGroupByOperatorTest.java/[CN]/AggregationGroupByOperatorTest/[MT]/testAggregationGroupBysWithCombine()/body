{
  final List<AggregationFunctionGroupByOperator> aggregationFunctionGroupByOperatorList=new ArrayList<AggregationFunctionGroupByOperator>();
  Operator filterOperator=new MatchEntireSegmentOperator(_indexSegment.getSegmentMetadata().getTotalDocs());
  final BReusableFilteredDocIdSetOperator docIdSetOperator=new BReusableFilteredDocIdSetOperator(filterOperator,_indexSegment.getSegmentMetadata().getTotalDocs(),5000);
  final Map<String,DataSource> dataSourceMap=getDataSourceMap();
  final MProjectionOperator projectionOperator=new MProjectionOperator(dataSourceMap,docIdSetOperator);
  for (int i=0; i < _numAggregations; ++i) {
    final MDefaultAggregationFunctionGroupByOperator aggregationFunctionGroupByOperator=new MDefaultAggregationFunctionGroupByOperator(_aggregationInfos.get(i),_groupBy,new UReplicatedProjectionOperator(projectionOperator),true);
    aggregationFunctionGroupByOperatorList.add(aggregationFunctionGroupByOperator);
  }
  final MAggregationGroupByOperator aggregationGroupByOperator=new MAggregationGroupByOperator(_indexSegment,_aggregationInfos,_groupBy,projectionOperator,aggregationFunctionGroupByOperatorList);
  final IntermediateResultsBlock block=(IntermediateResultsBlock)aggregationGroupByOperator.nextBlock();
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.debug("Result 1: {}",block.getAggregationGroupByOperatorResult().get(i));
  }
  final List<AggregationFunctionGroupByOperator> aggregationFunctionGroupByOperatorList1=new ArrayList<AggregationFunctionGroupByOperator>();
  Operator filterOperator1=new MatchEntireSegmentOperator(_indexSegment.getSegmentMetadata().getTotalDocs());
  final BReusableFilteredDocIdSetOperator docIdSetOperator1=new BReusableFilteredDocIdSetOperator(filterOperator1,_indexSegment.getSegmentMetadata().getTotalDocs(),5000);
  final Map<String,DataSource> dataSourceMap1=getDataSourceMap();
  final MProjectionOperator projectionOperator1=new MProjectionOperator(dataSourceMap1,docIdSetOperator1);
  for (int i=0; i < _numAggregations; ++i) {
    final MDefaultAggregationFunctionGroupByOperator aggregationFunctionGroupByOperator1=new MDefaultAggregationFunctionGroupByOperator(_aggregationInfos.get(i),_groupBy,new UReplicatedProjectionOperator(projectionOperator1),true);
    aggregationFunctionGroupByOperatorList1.add(aggregationFunctionGroupByOperator1);
  }
  final MAggregationGroupByOperator aggregationGroupByOperator1=new MAggregationGroupByOperator(_indexSegment,_aggregationInfos,_groupBy,projectionOperator1,aggregationFunctionGroupByOperatorList1);
  final IntermediateResultsBlock block1=(IntermediateResultsBlock)aggregationGroupByOperator1.nextBlock();
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.debug("Result 2: {}",block1.getAggregationGroupByOperatorResult().get(i));
  }
  CombineService.mergeTwoBlocks(getAggregationGroupByNoFilterBrokerRequest(),block,block1);
  LOGGER.debug("Combined Result : ");
  for (int i=0; i < _numAggregations; ++i) {
    LOGGER.debug("Combined : {}",block.getAggregationGroupByOperatorResult().get(i));
  }
}
