{
  List<List<Serializable>> aggregationResultsList=new ArrayList<List<Serializable>>();
  for (int i=0; i < brokerRequest.getAggregationsInfo().size(); ++i) {
    aggregationResultsList.add(new ArrayList<Serializable>());
  }
  DataSchema aggregationResultSchema;
  for (  ServerInstance serverInstance : instanceResponseMap.keySet()) {
    DataTable instanceResponse=instanceResponseMap.get(serverInstance);
    aggregationResultSchema=instanceResponse.getDataSchema();
    if (aggregationResultSchema == null) {
      continue;
    }
    for (int rowId=0; rowId < instanceResponse.getNumberOfRows(); ++rowId) {
      for (int colId=0; colId < brokerRequest.getAggregationsInfoSize(); ++colId) {
switch (aggregationResultSchema.getColumnType(colId)) {
case INT:
          aggregationResultsList.get(colId).add(instanceResponse.getInt(rowId,colId));
        break;
case SHORT:
      aggregationResultsList.get(colId).add(instanceResponse.getShort(rowId,colId));
    break;
case FLOAT:
  aggregationResultsList.get(colId).add(instanceResponse.getFloat(rowId,colId));
break;
case LONG:
aggregationResultsList.get(colId).add(instanceResponse.getLong(rowId,colId));
break;
case DOUBLE:
aggregationResultsList.get(colId).add(instanceResponse.getDouble(rowId,colId));
break;
case STRING:
aggregationResultsList.get(colId).add(instanceResponse.getString(rowId,colId));
break;
default :
aggregationResultsList.get(colId).add(instanceResponse.getObject(rowId,colId));
break;
}
}
}
}
return aggregationResultsList;
}
