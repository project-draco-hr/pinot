{
  long queryStartTime=System.nanoTime();
  _serverMetrics.addMeteredValue(null,ServerMeter.QUERIES,1);
  LOGGER.debug("processing request : {}",request);
  DataTable instanceResponse=null;
  byte[] byteArray=new byte[request.readableBytes()];
  request.readBytes(byteArray);
  SerDe serDe=new SerDe(new TCompactProtocol.Factory());
  BrokerRequest brokerRequest=null;
  try {
    final InstanceRequest queryRequest=new InstanceRequest();
    serDe.deserialize(queryRequest,byteArray);
    long deserRequestTime=System.nanoTime();
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.TOTAL_QUERY_TIME,deserRequestTime - queryStartTime);
    LOGGER.debug("instance request : {}",queryRequest);
    brokerRequest=queryRequest.getQuery();
    long startTime=System.nanoTime();
    instanceResponse=_queryExecutor.processQuery(queryRequest);
    long totalNanos=System.nanoTime() - startTime;
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.QUERY_PROCESSING,totalNanos);
  }
 catch (  Exception e) {
    LOGGER.error("Got exception while processing request. Returning error response",e);
    _serverMetrics.addMeteredValue(null,ServerMeter.UNCAUGHT_EXCEPTIONS,1);
    DataTableBuilder dataTableBuilder=new DataTableBuilder(null);
    List<ProcessingException> exceptions=new ArrayList<ProcessingException>();
    ProcessingException exception=QueryException.INTERNAL_ERROR.deepCopy();
    exception.setMessage(e.getMessage());
    exceptions.add(exception);
    instanceResponse=dataTableBuilder.buildExceptions();
  }
  byte[] responseByte;
  long serializationStartTime=System.nanoTime();
  try {
    if (instanceResponse == null) {
      LOGGER.warn("Instance response is null.");
      responseByte=new byte[0];
    }
 else {
      responseByte=instanceResponse.toBytes();
    }
  }
 catch (  Exception e) {
    _serverMetrics.addMeteredValue(null,ServerMeter.RESPONSE_SERIALIZATION_EXCEPTIONS,1);
    LOGGER.error("Got exception while serializing response.",e);
    responseByte=null;
  }
  long serializationEndTime=System.nanoTime();
  _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.RESPONSE_SERIALIZATION,serializationEndTime - serializationStartTime);
  _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.TOTAL_QUERY_TIME,serializationEndTime - queryStartTime);
  return responseByte;
}
