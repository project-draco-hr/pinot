{
  _serverMetrics.addMeteredValue(null,ServerMeter.QUERIES,1);
  LOGGER.debug("processing request : " + request);
  DataTable instanceResponse=null;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  byte[] byteArray=new byte[request.readableBytes()];
  request.readBytes(byteArray);
  SerDe serDe=new SerDe(new TCompactProtocol.Factory());
  try {
    final InstanceRequest queryRequest=new InstanceRequest();
    serDe.deserialize(queryRequest,byteArray);
    LOGGER.info("instance request : " + queryRequest);
    final BrokerRequest brokerRequest=queryRequest.getQuery();
    instanceResponse=_serverMetrics.timePhase(queryRequest.getQuery(),ServerQueryPhase.TOTAL_QUERY_TIME,new Callable<DataTable>(){
      @Override public DataTable call() throws Exception {
        return _queryExecutor.processQuery(queryRequest);
      }
    }
);
    LOGGER.debug("******************************");
    if (instanceResponse != null) {
      LOGGER.debug("instanceResponse : " + instanceResponse.toString());
    }
 else {
      LOGGER.debug("instanceResponse : null");
    }
    LOGGER.debug("******************************");
  }
 catch (  Exception e) {
    LOGGER.error("Got exception while processing request. Returning error response",e);
    _serverMetrics.addMeteredValue(null,ServerMeter.UNCAUGHT_EXCEPTIONS,1);
    DataTableBuilder dataTableBuilder=new DataTableBuilder(null);
    List<ProcessingException> exceptions=new ArrayList<ProcessingException>();
    ProcessingException exception=QueryException.INTERNAL_ERROR.deepCopy();
    exception.setMessage(e.getMessage());
    exceptions.add(exception);
    instanceResponse=dataTableBuilder.buildExceptions();
  }
  try {
    if (instanceResponse == null) {
      return new byte[0];
    }
 else {
      return instanceResponse.toBytes();
    }
  }
 catch (  Exception e) {
    _serverMetrics.addMeteredValue(null,ServerMeter.RESPONSE_SERIALIZATION_EXCEPTIONS,1);
    LOGGER.error("Got exception while serializing response.",e);
    return null;
  }
}
