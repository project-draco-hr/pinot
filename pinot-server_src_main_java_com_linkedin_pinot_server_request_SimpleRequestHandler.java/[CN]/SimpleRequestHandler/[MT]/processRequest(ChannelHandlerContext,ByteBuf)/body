{
  long queryStartTime=System.nanoTime();
  _serverMetrics.addMeteredGlobalValue(ServerMeter.QUERIES,1);
  LOGGER.debug("processing request : {}",request);
  DataTable instanceResponse=null;
  byte[] byteArray=new byte[request.readableBytes()];
  request.readBytes(byteArray);
  SerDe serDe=new SerDe(new TCompactProtocol.Factory());
  BrokerRequest brokerRequest=null;
  try {
    final InstanceRequest instanceRequest=new InstanceRequest();
    if (!serDe.deserialize(instanceRequest,byteArray)) {
      LOGGER.error("Failed to deserialize query request");
      DataTable result=new DataTable();
      result.addException(QueryException.INTERNAL_ERROR);
      _serverMetrics.addMeteredGlobalValue(ServerMeter.REQUEST_DESERIALIZATION_EXCEPTIONS,1);
      return serializeDataTable(brokerRequest,instanceResponse,queryStartTime);
    }
    long deserRequestTime=System.nanoTime();
    brokerRequest=instanceRequest.getQuery();
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.REQUEST_DESERIALIZATION,deserRequestTime - queryStartTime);
    LOGGER.debug("Processing requestId:{},request={}",instanceRequest.getRequestId(),instanceRequest);
    QueryRequest queryRequest=new QueryRequest(instanceRequest);
    String brokerId=instanceRequest.isSetBrokerId() ? instanceRequest.getBrokerId() : ((InetSocketAddress)channelHandlerContext.channel().remoteAddress()).getAddress().getHostAddress();
    queryRequest.setClientId(brokerId);
    long startTime=System.nanoTime();
    instanceResponse=_queryExecutor.processQuery(queryRequest);
    long totalNanos=System.nanoTime() - startTime;
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.QUERY_PROCESSING,totalNanos);
  }
 catch (  Exception e) {
    LOGGER.error("Got exception while processing request. Returning error response",e);
    _serverMetrics.addMeteredGlobalValue(ServerMeter.UNCAUGHT_EXCEPTIONS,1);
    DataTableBuilder dataTableBuilder=new DataTableBuilder(null);
    List<ProcessingException> exceptions=new ArrayList<ProcessingException>();
    ProcessingException exception=QueryException.INTERNAL_ERROR.deepCopy();
    exception.setMessage(e.getMessage());
    exceptions.add(exception);
    instanceResponse=dataTableBuilder.buildExceptions();
  }
  return serializeDataTable(brokerRequest,instanceResponse,queryStartTime);
}
