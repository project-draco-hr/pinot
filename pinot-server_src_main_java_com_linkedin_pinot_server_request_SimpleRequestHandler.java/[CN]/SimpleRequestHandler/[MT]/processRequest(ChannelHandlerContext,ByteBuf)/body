{
  long queryStartTime=System.nanoTime();
  _serverMetrics.addMeteredGlobalValue(ServerMeter.QUERIES,1);
  LOGGER.debug("processing request : {}",request);
  DataTable instanceResponse=null;
  byte[] byteArray=new byte[request.readableBytes()];
  request.readBytes(byteArray);
  SerDe serDe=new SerDe(new TCompactProtocol.Factory());
  InstanceRequest instanceRequest=null;
  try {
    instanceRequest=new InstanceRequest();
    if (!serDe.deserialize(instanceRequest,byteArray)) {
      LOGGER.error("Failed to deserialize query request from broker ip: {}",((InetSocketAddress)channelHandlerContext.channel().remoteAddress()).getAddress().getHostAddress());
      DataTable result=new DataTable();
      result.addException(QueryException.INTERNAL_ERROR);
      _serverMetrics.addMeteredGlobalValue(ServerMeter.REQUEST_DESERIALIZATION_EXCEPTIONS,1);
      return Futures.immediateFuture(ScheduledRequestHandler.serializeDataTable(instanceRequest,_serverMetrics,instanceResponse,queryStartTime));
    }
    long deserRequestTime=System.nanoTime();
    BrokerRequest brokerRequest=instanceRequest.getQuery();
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.REQUEST_DESERIALIZATION,deserRequestTime - queryStartTime);
    LOGGER.debug("Processing requestId: {},request: {}",instanceRequest.getRequestId(),instanceRequest);
    QueryRequest queryRequestContext=new QueryRequest(instanceRequest);
    String brokerId=instanceRequest.isSetBrokerId() ? instanceRequest.getBrokerId() : ((InetSocketAddress)channelHandlerContext.channel().remoteAddress()).getAddress().getHostAddress();
    queryRequestContext.setClientId(brokerId);
    long startTime=System.nanoTime();
    instanceResponse=_queryExecutor.processQuery(queryRequestContext);
    long totalNanos=System.nanoTime() - startTime;
    _serverMetrics.addPhaseTiming(brokerRequest,ServerQueryPhase.QUERY_PROCESSING,totalNanos);
  }
 catch (  Exception e) {
    LOGGER.error("Got exception while processing request. Returning error response for requestId: {}, brokerId: {}",instanceRequest.getRequestId(),instanceRequest.getBrokerId(),e);
    _serverMetrics.addMeteredGlobalValue(ServerMeter.UNCAUGHT_EXCEPTIONS,1);
    DataTableBuilder dataTableBuilder=new DataTableBuilder(null);
    List<ProcessingException> exceptions=new ArrayList<ProcessingException>();
    ProcessingException exception=QueryException.INTERNAL_ERROR.deepCopy();
    exception.setMessage(e.getMessage());
    exceptions.add(exception);
    instanceResponse=dataTableBuilder.buildExceptions();
  }
  byte[] responseBytes=ScheduledRequestHandler.serializeDataTable(instanceRequest,_serverMetrics,instanceResponse,queryStartTime);
  return Futures.immediateFuture(responseBytes);
}
