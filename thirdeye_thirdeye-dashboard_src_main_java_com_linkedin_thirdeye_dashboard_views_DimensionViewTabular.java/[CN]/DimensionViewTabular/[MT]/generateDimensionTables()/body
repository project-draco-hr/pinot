{
  Map<String,String> metricAliases=new HashMap<>();
  for (int i=0; i < schema.getMetrics().size(); i++) {
    metricAliases.put(schema.getMetrics().get(i),schema.getMetricAliases().get(i));
  }
  Map<String,String> dimensionAliases=new HashMap<>();
  for (int i=0; i < schema.getDimensions().size(); i++) {
    dimensionAliases.put(schema.getDimensions().get(i),schema.getDimensionAliases().get(i));
  }
  List<DimensionTable> tables=new ArrayList<>();
  for (  Map.Entry<String,QueryResult> entry : results.entrySet()) {
    String dimensionName=entry.getKey();
    QueryResult result=entry.getValue();
    List<String> dimensionNames=result.getDimensions();
    int dimensionIdx=dimensionNames.indexOf(dimensionName);
    Map<List<String>,Map<String,Number[]>> processedResult=ViewUtils.processDimensionGroups(result,objectMapper,dimensionGroupMap,dimensionRegexMap,dimensionName);
    List<DimensionTableRow> rows=new ArrayList<>();
    for (    Map.Entry<List<String>,Map<String,Number[]>> combination : processedResult.entrySet()) {
      long minTime=-1;
      long maxTime=-1;
      for (      String timeString : combination.getValue().keySet()) {
        long time=Long.valueOf(timeString);
        if (minTime == -1 || time < minTime) {
          minTime=time;
        }
        if (maxTime == -1 || time > maxTime) {
          maxTime=time;
        }
      }
      String value=combination.getKey().get(dimensionIdx);
      Number[] baseline=combination.getValue().get(String.valueOf(minTime));
      Number[] current=combination.getValue().get(String.valueOf(maxTime));
      if (current != null && baseline != null) {
        DimensionTableRow row=new DimensionTableRow(value,baseline,current);
        rows.add(row);
      }
    }
    DimensionTable dimensionTable=new DimensionTable(result.getMetrics(),metricAliases,dimensionName,dimensionAliases.get(dimensionName),rows);
    tables.add(dimensionTable);
  }
  return tables;
}
