{
  final Map<String,String> configs=record.getSimpleFields();
  _segmentMetadataPropertiesConfiguration=new PropertiesConfiguration();
  for (  final Entry<String,String> entry : configs.entrySet()) {
    _segmentMetadataPropertiesConfiguration.addProperty(entry.getKey(),entry.getValue());
  }
  if (configs.containsKey(V1Constants.MetadataKeys.Segment.SEGMENT_CRC)) {
    _crc=Long.parseLong(configs.get(V1Constants.MetadataKeys.Segment.SEGMENT_CRC));
  }
  if (configs.containsKey(V1Constants.MetadataKeys.Segment.SEGMENT_CREATION_TIME)) {
    _creationTime=Long.parseLong(configs.get(V1Constants.MetadataKeys.Segment.SEGMENT_CREATION_TIME));
  }
  if (configs.containsKey(V1Constants.SEGMENT_PUSH_TIME)) {
    try {
      _pushTime=Long.parseLong(configs.get(V1Constants.SEGMENT_PUSH_TIME));
    }
 catch (    NumberFormatException nfe) {
      LOGGER.warn("Invalid data while loading push time",nfe);
    }
  }
  if (configs.containsKey(V1Constants.SEGMENT_REFRESH_TIME)) {
    try {
      _refreshTime=Long.parseLong(configs.get(V1Constants.SEGMENT_REFRESH_TIME));
    }
 catch (    NumberFormatException nfe) {
      LOGGER.warn("Invalid data while loading refresh time",nfe);
    }
  }
  setTimeIntervalAndGranularity();
  _columnMetadataMap=null;
  _segmentName=record.getId();
  _schema=new Schema();
  _allColumns=new HashSet<String>();
  _indexDir=null;
}
