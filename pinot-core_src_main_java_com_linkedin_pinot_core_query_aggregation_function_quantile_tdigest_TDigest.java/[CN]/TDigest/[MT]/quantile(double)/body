{
  GroupTree values=summary;
  if (values.size() == 1) {
    return values.iterator().next().mean();
  }
  Iterator<Group> it=values.iterator();
  Group center=it.next();
  Group leading=it.next();
  if (!it.hasNext()) {
    double diff=(leading.mean() - center.mean()) / 2;
    if (q > 0.75) {
      return leading.mean() + diff * (4 * q - 3);
    }
 else {
      return center.mean() + diff * (4 * q - 1);
    }
  }
 else {
    q*=count;
    double right=(leading.mean() - center.mean()) / 2;
    double left=right;
    double t=center.count();
    while (it.hasNext()) {
      if (t + center.count() / 2 >= q) {
        return center.mean() - left * 2 * (q - t) / center.count();
      }
 else       if (t + leading.count() >= q) {
        return center.mean() + right * 2.0 * (center.count() - (q - t)) / center.count();
      }
      t+=center.count();
      center=leading;
      leading=it.next();
      left=right;
      right=(leading.mean() - center.mean()) / 2;
    }
    center=leading;
    left=right;
    if (t + center.count() / 2 >= q) {
      return center.mean() - left * 2 * (q - t) / center.count();
    }
 else     if (t + leading.count() >= q) {
      return center.mean() + right * 2.0 * (center.count() - (q - t)) / center.count();
    }
 else {
      return 1;
    }
  }
}
