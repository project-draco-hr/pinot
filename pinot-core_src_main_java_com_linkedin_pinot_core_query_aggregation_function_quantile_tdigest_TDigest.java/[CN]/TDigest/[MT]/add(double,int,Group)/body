{
  Group start=summary.floor(base);
  if (start == null) {
    start=summary.ceiling(base);
  }
  if (start == null) {
    summary.add(Group.createWeighted(x,w,base.data()));
    count=w;
  }
 else {
    Iterable<Group> neighbors=summary.tailSet(start);
    double minDistance=Double.MAX_VALUE;
    int lastNeighbor=0;
    int i=summary.headCount(start);
    for (    Group neighbor : neighbors) {
      double z=Math.abs(neighbor.mean() - x);
      if (z <= minDistance) {
        minDistance=z;
        lastNeighbor=i;
      }
 else {
        break;
      }
      i++;
    }
    Group closest=null;
    int sum=summary.headSum(start);
    i=summary.headCount(start);
    double n=1;
    for (    Group neighbor : neighbors) {
      if (i > lastNeighbor) {
        break;
      }
      double z=Math.abs(neighbor.mean() - x);
      double q=(sum + neighbor.count() / 2.0) / count;
      double k=4 * count * q* (1 - q) / compression;
      if (z == minDistance && neighbor.count() + w <= k) {
        if (gen.nextDouble() < 1 / n) {
          closest=neighbor;
        }
        n++;
      }
      sum+=neighbor.count();
      i++;
    }
    if (closest == null) {
      summary.add(Group.createWeighted(x,w,base.data()));
    }
 else {
      summary.remove(closest);
      closest.add(x,w,base.data());
      summary.add(closest);
    }
    count+=w;
    if (summary.size() > 100 * compression) {
      compress();
    }
  }
}
