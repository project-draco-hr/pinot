{
  ZkTestUtils.startLocalZkServer();
  _zkClient=new ZkClient(ZK_STR);
  _pinotHelixResourceManager=new PinotHelixResourceManager(ZK_STR,HELIX_CLUSTER_NAME,CONTROLLER_INSTANCE_NAME,null);
  _pinotHelixResourceManager.start();
  ControllerRequestBuilderUtil.addFakeDataInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_STR,2);
  ControllerRequestBuilderUtil.addFakeBrokerInstancesToAutoJoinHelixCluster(HELIX_CLUSTER_NAME,ZK_STR,2);
  _helixAdmin=_pinotHelixResourceManager.getHelixAdmin();
  _helixZkManager=_pinotHelixResourceManager.getHelixZkManager();
  Tenant brokerTenant=new Tenant(TenantRole.BROKER,"testBroker",5,-1,-1);
  _pinotHelixResourceManager.createBrokerTenant(brokerTenant);
  Tenant serverTenant=new Tenant(TenantRole.BROKER,"testServer",4,2,2);
  _pinotHelixResourceManager.createBrokerTenant(serverTenant);
  String OfflineTableConfigJson=ControllerRequestBuilderUtil.buildCreateOfflineTableV2JSON(_testTableName,"testServer","testBroker",2).toString();
  AbstractTableConfig offlineTableConfig=AbstractTableConfig.init(OfflineTableConfigJson);
  _pinotHelixResourceManager.addTable(offlineTableConfig);
}
