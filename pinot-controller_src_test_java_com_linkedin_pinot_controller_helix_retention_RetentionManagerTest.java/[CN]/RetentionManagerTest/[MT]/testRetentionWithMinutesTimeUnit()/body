{
  _retentionManager=new RetentionManager(_pinotHelixResourceManager,5);
  _retentionManager.start();
  long theDayAfterTomorrowSinceEpoch=System.currentTimeMillis() / 1000 / 60/ 60/ 24 + 2;
  long minutesSinceEpochTimeStamp=theDayAfterTomorrowSinceEpoch * 24 * 60;
  for (int i=0; i < 10; ++i) {
    SegmentMetadata segmentMetadata=getTimeSegmentMetadataImpl("22383360","22383360",TimeUnit.MINUTES.toString());
    registerSegmentMetadata(segmentMetadata);
    Thread.sleep(100);
  }
  for (int i=0; i < 10; ++i) {
    SegmentMetadata segmentMetadata=getTimeSegmentMetadataImpl(minutesSinceEpochTimeStamp + "",minutesSinceEpochTimeStamp + "",TimeUnit.MINUTES.toString());
    registerSegmentMetadata(segmentMetadata);
    Thread.sleep(100);
  }
  Assert.assertEquals(_helixZkManager.getHelixPropertyStore().getChildNames(ZKMetadataProvider.constructPropertyStorePathForResource(_offlineTableName),AccessOption.PERSISTENT).size(),20);
  Thread.sleep(8000);
  LOGGER.info("Sleeping thread wakes up!");
  Assert.assertEquals(_helixAdmin.getResourceExternalView(HELIX_CLUSTER_NAME,_offlineTableName).getPartitionSet().size(),10);
  Assert.assertEquals(_helixAdmin.getResourceIdealState(HELIX_CLUSTER_NAME,_offlineTableName).getPartitionSet().size(),10);
  Assert.assertEquals(_helixZkManager.getHelixPropertyStore().getChildNames(ZKMetadataProvider.constructPropertyStorePathForResource(_offlineTableName),AccessOption.PERSISTENT).size(),10);
  cleanupSegments();
}
