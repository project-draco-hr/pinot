{
  long start=System.currentTimeMillis();
  if (_isParallel) {
    long queryEndTime=System.currentTimeMillis() + _timeOutMs;
    @SuppressWarnings("rawtypes") List<Future> blocks=new ArrayList<Future>();
    for (    final Operator operator : _operators) {
      blocks.add(_executorService.submit(new Callable<Block>(){
        @Override public Block call() throws Exception {
          return operator.nextBlock();
        }
      }
));
    }
    LOG.debug("Submitting operators to be run in parallel and it took:" + (System.currentTimeMillis() - start));
    try {
      _mergedBlock=(IntermediateResultsBlock)blocks.get(0).get(queryEndTime - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
      LOG.debug("Got response from operator 0 after: " + (System.currentTimeMillis() - start));
      for (int i=1; i < blocks.size(); ++i) {
        IntermediateResultsBlock blockToMerge=(IntermediateResultsBlock)blocks.get(i).get(queryEndTime - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
        LOG.debug("Got response from operator " + i + " after: "+ (System.currentTimeMillis() - start));
        CombineService.mergeTwoBlocks(_brokerRequest,_mergedBlock,blockToMerge);
        LOG.debug("Merged response from operator " + i + " after: "+ (System.currentTimeMillis() - start));
      }
    }
 catch (    InterruptedException e) {
      if (_mergedBlock == null) {
        _mergedBlock=new IntermediateResultsBlock(e);
      }
      List<ProcessingException> exceptions=_mergedBlock.getExceptions();
      if (exceptions == null) {
        exceptions=new ArrayList<ProcessingException>();
      }
      ProcessingException exception=QueryException.FUTURE_CALL_ERROR.deepCopy();
      exception.setMessage(e.getMessage());
      exceptions.add(exception);
      _mergedBlock.setExceptionsList(exceptions);
    }
catch (    ExecutionException e) {
      if (_mergedBlock == null) {
        _mergedBlock=new IntermediateResultsBlock(e);
      }
      List<ProcessingException> exceptions=_mergedBlock.getExceptions();
      if (exceptions == null) {
        exceptions=new ArrayList<ProcessingException>();
      }
      ProcessingException exception=QueryException.QUERY_EXECUTION_ERROR.deepCopy();
      exception.setMessage(e.getMessage());
      exceptions.add(exception);
      _mergedBlock.setExceptionsList(exceptions);
    }
catch (    TimeoutException e) {
      if (_mergedBlock == null) {
        _mergedBlock=new IntermediateResultsBlock(e);
      }
      List<ProcessingException> exceptions=_mergedBlock.getExceptions();
      if (exceptions == null) {
        exceptions=new ArrayList<ProcessingException>();
      }
      ProcessingException exception=QueryException.EXECUTION_TIMEOUT_ERROR.deepCopy();
      exception.setMessage(e.getMessage());
      exceptions.add(exception);
      _mergedBlock.setExceptionsList(exceptions);
    }
  }
 else {
    for (    Operator operator : _operators) {
      if ((operator instanceof MAggregationOperator) || (operator instanceof MSelectionOrderByOperator) || (operator instanceof MSelectionOnlyOperator)|| (operator instanceof MAggregationGroupByOperator)|| (operator instanceof MCombineOperator)) {
        IntermediateResultsBlock block=(IntermediateResultsBlock)operator.nextBlock();
        if (_mergedBlock == null) {
          _mergedBlock=block;
        }
 else {
          CombineService.mergeTwoBlocks(_brokerRequest,_mergedBlock,block);
        }
      }
 else {
        throw new UnsupportedOperationException("Unsupported Operator to be processed in MResultOperator : " + operator);
      }
    }
  }
  if ((_brokerRequest.getAggregationsInfoSize() > 0) && (_brokerRequest.getGroupBy() != null) && (_brokerRequest.getGroupBy().getColumnsSize() > 0)) {
    trimToSize(_brokerRequest,_mergedBlock);
  }
  long end=System.currentTimeMillis();
  LOG.debug("Time spent in MCombineOperator:" + (end - start));
  return _mergedBlock;
}
