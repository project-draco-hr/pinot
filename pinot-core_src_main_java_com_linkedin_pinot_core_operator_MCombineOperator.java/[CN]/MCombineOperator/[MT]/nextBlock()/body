{
  final long startTime=System.currentTimeMillis();
  if (_isParallel) {
    final long queryEndTime=System.currentTimeMillis() + _timeOutMs;
    int numGroups=Math.min(MAX_THREADS_PER_QUERY,(_operators.size() + MIN_SEGMENTS_PER_THREAD - 1) / MIN_SEGMENTS_PER_THREAD);
    final List<List<Operator>> operatorGroups=new ArrayList<List<Operator>>(numGroups);
    for (int i=0; i < numGroups; i++) {
      operatorGroups.add(new ArrayList<Operator>());
    }
    for (int i=0; i < _operators.size(); i++) {
      operatorGroups.get(i % numGroups).add(_operators.get(i));
    }
    final BlockingQueue<Block> blockingQueue=new ArrayBlockingQueue<Block>(operatorGroups.size());
    for (    final List<Operator> operatorGroup : operatorGroups) {
      _executorService.submit(new Runnable(){
        @Override public void run(){
          IntermediateResultsBlock mergedBlock=null;
          try {
            for (            Operator operator : operatorGroup) {
              IntermediateResultsBlock blockToMerge=(IntermediateResultsBlock)operator.nextBlock();
              if (mergedBlock == null) {
                mergedBlock=blockToMerge;
              }
 else {
                CombineService.mergeTwoBlocks(_brokerRequest,mergedBlock,blockToMerge);
              }
            }
          }
 catch (          Exception e) {
            LOGGER.error("exception in the MCombine operator ",e);
            mergedBlock=new IntermediateResultsBlock(e);
          }
          if (blockingQueue != null) {
            blockingQueue.offer(mergedBlock);
          }
        }
      }
);
    }
    LOGGER.debug("Submitting operators to be run in parallel and it took:" + (System.currentTimeMillis() - startTime));
    Future<IntermediateResultsBlock> mergedBlockFuture=_executorService.submit(new Callable<IntermediateResultsBlock>(){
      @Override public IntermediateResultsBlock call() throws Exception {
        int mergedBlocksNumber=0;
        IntermediateResultsBlock mergedBlock=null;
        while ((queryEndTime > System.currentTimeMillis()) && (mergedBlocksNumber < operatorGroups.size())) {
          if (mergedBlock == null) {
            mergedBlock=(IntermediateResultsBlock)blockingQueue.poll(queryEndTime - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
            if (mergedBlock != null) {
              mergedBlocksNumber++;
            }
            LOGGER.debug("Got response from operator 0 after: {}",(System.currentTimeMillis() - startTime));
          }
 else {
            IntermediateResultsBlock blockToMerge=(IntermediateResultsBlock)blockingQueue.poll(queryEndTime - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
            if (blockToMerge != null) {
              try {
                LOGGER.debug("Got response from operator {} after: {}",mergedBlocksNumber,(System.currentTimeMillis() - startTime));
                CombineService.mergeTwoBlocks(_brokerRequest,mergedBlock,blockToMerge);
                LOGGER.debug("Merged response from operator {} after: {}",mergedBlocksNumber,(System.currentTimeMillis() - startTime));
              }
 catch (              Exception e) {
                mergedBlock.getExceptions().add(QueryException.getException(QueryException.MERGE_RESPONSE_ERROR,e));
              }
              mergedBlocksNumber++;
            }
          }
        }
        return mergedBlock;
      }
    }
);
    try {
      _mergedBlock=mergedBlockFuture.get(queryEndTime - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      LOGGER.error("InterruptedException ",e);
      if (_mergedBlock == null) {
        _mergedBlock=new IntermediateResultsBlock(e);
      }
      List<ProcessingException> exceptions=_mergedBlock.getExceptions();
      if (exceptions == null) {
        exceptions=new ArrayList<ProcessingException>();
      }
      exceptions.add(QueryException.getException(QueryException.FUTURE_CALL_ERROR,e));
      _mergedBlock.setExceptionsList(exceptions);
    }
catch (    ExecutionException e) {
      LOGGER.error("Execution Exception",e);
      if (_mergedBlock == null) {
        _mergedBlock=new IntermediateResultsBlock(e);
      }
      List<ProcessingException> exceptions=_mergedBlock.getExceptions();
      if (exceptions == null) {
        exceptions=new ArrayList<ProcessingException>();
      }
      exceptions.add(QueryException.getException(QueryException.MERGE_RESPONSE_ERROR,e));
      _mergedBlock.setExceptionsList(exceptions);
    }
catch (    TimeoutException e) {
      LOGGER.error("TimeoutException ",e);
      if (_mergedBlock == null) {
        _mergedBlock=new IntermediateResultsBlock(e);
      }
      List<ProcessingException> exceptions=_mergedBlock.getExceptions();
      if (exceptions == null) {
        exceptions=new ArrayList<ProcessingException>();
      }
      exceptions.add(QueryException.getException(QueryException.EXECUTION_TIMEOUT_ERROR,e));
      _mergedBlock.setExceptionsList(exceptions);
    }
  }
 else {
    for (    Operator operator : _operators) {
      if ((operator instanceof MAggregationOperator) || (operator instanceof MSelectionOrderByOperator) || (operator instanceof MSelectionOnlyOperator)|| (operator instanceof MAggregationGroupByOperator)|| (operator instanceof MCombineOperator)) {
        IntermediateResultsBlock block=(IntermediateResultsBlock)operator.nextBlock();
        if (_mergedBlock == null) {
          _mergedBlock=block;
        }
 else {
          CombineService.mergeTwoBlocks(_brokerRequest,_mergedBlock,block);
        }
      }
 else {
        throw new UnsupportedOperationException("Unsupported Operator to be processed in MResultOperator : " + operator);
      }
    }
  }
  if ((_brokerRequest.getAggregationsInfoSize() > 0) && (_brokerRequest.getGroupBy() != null) && (_brokerRequest.getGroupBy().getColumnsSize() > 0)) {
    trimToSize(_brokerRequest,_mergedBlock);
  }
  long end=System.currentTimeMillis();
  LOGGER.info("Time spent in MCombineOperator:" + (end - startTime));
  return _mergedBlock;
}
