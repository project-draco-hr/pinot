{
  String key1="localhost:8080";
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    runner.waitForDone();
    Assert.assertTrue(runner.isCancelled(),"Composite Cancelled ?");
    Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
    Assert.assertTrue(runner.getMessage().isEmpty(),"Composite No Reponse :");
    Assert.assertTrue(runner.getError().isEmpty(),"Composite No Error :");
    Assert.assertTrue(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    AssertJUnit.assertNull("No Reponse :",future.get());
    AssertJUnit.assertNull("No Error :",future.getError());
    Assert.assertTrue(listener.isCancelled(),"listener Cancelled ?");
    Assert.assertTrue(listener.isDone(),"listener Is Done ? ");
    Assert.assertTrue(listener.getMessage().isEmpty(),"listener No Reponse :");
    Assert.assertTrue(listener.getError().isEmpty(),"listener No Error :");
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    runner.waitForDone();
    Assert.assertTrue(runner.isCancelled(),"Composite Cancelled ?");
    Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
    Assert.assertTrue(runner.getMessage().isEmpty(),"Composite No Reponse :");
    Assert.assertTrue(runner.getError().isEmpty(),"Composite No Error :");
    Assert.assertTrue(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    AssertJUnit.assertNull("No Reponse :",future.get());
    AssertJUnit.assertNull("No Error :",future.getError());
    Assert.assertTrue(listener.isCancelled(),"listener Cancelled ?");
    Assert.assertTrue(listener.isDone(),"listener Is Done ? ");
    Assert.assertTrue(listener.getMessage().isEmpty(),"listener No Reponse :");
    Assert.assertTrue(listener.getError().isEmpty(),"listener No Error :");
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    runner.waitForDone();
    Assert.assertFalse(runner.isCancelled(),"Composite Cancelled ?");
    Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
    Assert.assertTrue(runner.getMessage().isEmpty(),"Composite No Reponse :");
    Assert.assertEquals(runner.getError().get(key1),expectedError,"Composite Error");
    Assert.assertFalse(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    AssertJUnit.assertNull("No Reponse :",future.get());
    Assert.assertEquals(future.getError().values().iterator().next(),expectedError,"Error");
    Assert.assertFalse(listener.isCancelled(),"Listener Cancelled ?");
    Assert.assertTrue(listener.isDone(),"Listener Is Done ? ");
    Assert.assertTrue(listener.getMessage().isEmpty(),"Listener No Reponse :");
    Assert.assertEquals(listener.getError().get(key1),expectedError,"Listener Error");
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    runner.waitForDone();
    Assert.assertFalse(runner.isCancelled(),"Composite Cancelled ?");
    Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
    Assert.assertTrue(runner.getMessage().isEmpty(),"Composite No Reponse :");
    Assert.assertEquals(runner.getError().get(key1),expectedError,"Composite Error");
    Assert.assertFalse(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    AssertJUnit.assertNull("No Reponse :",future.get());
    Assert.assertEquals(future.getError().values().iterator().next(),expectedError,"Error");
    Assert.assertFalse(listener.isCancelled(),"Listener Cancelled ?");
    Assert.assertTrue(listener.isDone(),"Listener Is Done ? ");
    Assert.assertTrue(listener.getMessage().isEmpty(),"Listener No Reponse :");
    Assert.assertEquals(listener.getError().get(key1),expectedError,"Listener Error");
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    runner.waitForDone();
    Assert.assertFalse(runner.isCancelled(),"Composite Cancelled ?");
    Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
    Assert.assertTrue(runner.getError().isEmpty(),"Composite No Error :");
    Assert.assertEquals(runner.getMessage().get(key1),message,"Composite Message");
    Assert.assertFalse(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    Assert.assertEquals(future.getOne(),message,"Reponse :");
    AssertJUnit.assertNull("No Error",future.getError());
    Assert.assertFalse(listener.isCancelled(),"Listener Cancelled ?");
    Assert.assertTrue(listener.isDone(),"Listener Is Done ? ");
    Assert.assertTrue(listener.getError().isEmpty(),"listener No Error :");
    Assert.assertEquals(listener.getMessage().get(key1),message,"listener Message");
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    runner.waitForDone();
    Assert.assertFalse(runner.isCancelled(),"Composite Cancelled ?");
    Assert.assertTrue(runner.isDone(),"Composite Is Done ? ");
    Assert.assertTrue(runner.getError().isEmpty(),"Composite No Error :");
    Assert.assertEquals(runner.getMessage().get(key1),message,"Composite Message");
    Assert.assertFalse(future.isCancelled(),"Cancelled ?");
    Assert.assertTrue(future.isDone(),"Is Done ? ");
    Assert.assertEquals(future.getOne(),message,"Reponse :");
    AssertJUnit.assertNull("No Error",future.getError());
    Assert.assertFalse(listener.isCancelled(),"Listener Cancelled ?");
    Assert.assertTrue(listener.isDone(),"Listener Is Done ? ");
    Assert.assertTrue(listener.getError().isEmpty(),"listener No Error :");
    Assert.assertEquals(listener.getMessage().get(key1),message,"listener Message");
    executor.shutdown();
  }
}
