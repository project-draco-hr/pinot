{
  String key1="localhost:8080";
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    runner.waitForDone();
    AssertJUnit.assertTrue("Composite Cancelled ?",runner.isCancelled());
    AssertJUnit.assertTrue("Composite Is Done ? ",runner.isDone());
    AssertJUnit.assertTrue("Composite No Reponse :",runner.getMessage().isEmpty());
    AssertJUnit.assertTrue("Composite No Error :",runner.getError().isEmpty());
    AssertJUnit.assertTrue("Cancelled ?",future.isCancelled());
    AssertJUnit.assertTrue("Is Done ? ",future.isDone());
    AssertJUnit.assertNull("No Reponse :",future.get());
    AssertJUnit.assertNull("No Error :",future.getError());
    AssertJUnit.assertTrue("listener Cancelled ?",listener.isCancelled());
    AssertJUnit.assertTrue("listener Is Done ? ",listener.isDone());
    AssertJUnit.assertTrue("listener No Reponse :",listener.getMessage().isEmpty());
    AssertJUnit.assertTrue("listener No Error :",listener.getError().isEmpty());
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    runner.waitForDone();
    AssertJUnit.assertTrue("Composite Cancelled ?",runner.isCancelled());
    AssertJUnit.assertTrue("Composite Is Done ? ",runner.isDone());
    AssertJUnit.assertTrue("Composite No Reponse :",runner.getMessage().isEmpty());
    AssertJUnit.assertTrue("Composite No Error :",runner.getError().isEmpty());
    AssertJUnit.assertTrue("Cancelled ?",future.isCancelled());
    AssertJUnit.assertTrue("Is Done ? ",future.isDone());
    AssertJUnit.assertNull("No Reponse :",future.get());
    AssertJUnit.assertNull("No Error :",future.getError());
    AssertJUnit.assertTrue("listener Cancelled ?",listener.isCancelled());
    AssertJUnit.assertTrue("listener Is Done ? ",listener.isDone());
    AssertJUnit.assertTrue("listener No Reponse :",listener.getMessage().isEmpty());
    AssertJUnit.assertTrue("listener No Error :",listener.getError().isEmpty());
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    runner.waitForDone();
    AssertJUnit.assertFalse("Composite Cancelled ?",runner.isCancelled());
    AssertJUnit.assertTrue("Composite Is Done ? ",runner.isDone());
    AssertJUnit.assertTrue("Composite No Reponse :",runner.getMessage().isEmpty());
    AssertJUnit.assertEquals("Composite Error",expectedError,runner.getError().get(key1));
    AssertJUnit.assertFalse("Cancelled ?",future.isCancelled());
    AssertJUnit.assertTrue("Is Done ? ",future.isDone());
    AssertJUnit.assertNull("No Reponse :",future.get());
    AssertJUnit.assertEquals("Error",expectedError,future.getError().values().iterator().next());
    AssertJUnit.assertFalse("Listener Cancelled ?",listener.isCancelled());
    AssertJUnit.assertTrue("Listener Is Done ? ",listener.isDone());
    AssertJUnit.assertTrue("Listener No Reponse :",listener.getMessage().isEmpty());
    AssertJUnit.assertEquals("Listener Error",expectedError,listener.getError().get(key1));
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    String message="dummy Message";
    future.onSuccess(message);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    runner.waitForDone();
    AssertJUnit.assertFalse("Composite Cancelled ?",runner.isCancelled());
    AssertJUnit.assertTrue("Composite Is Done ? ",runner.isDone());
    AssertJUnit.assertTrue("Composite No Reponse :",runner.getMessage().isEmpty());
    AssertJUnit.assertEquals("Composite Error",expectedError,runner.getError().get(key1));
    AssertJUnit.assertFalse("Cancelled ?",future.isCancelled());
    AssertJUnit.assertTrue("Is Done ? ",future.isDone());
    AssertJUnit.assertNull("No Reponse :",future.get());
    AssertJUnit.assertEquals("Error",expectedError,future.getError().values().iterator().next());
    AssertJUnit.assertFalse("Listener Cancelled ?",listener.isCancelled());
    AssertJUnit.assertTrue("Listener Is Done ? ",listener.isDone());
    AssertJUnit.assertTrue("Listener No Reponse :",listener.getMessage().isEmpty());
    AssertJUnit.assertEquals("Listener Error",expectedError,listener.getError().get(key1));
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    runner.waitForDone();
    AssertJUnit.assertFalse("Composite Cancelled ?",runner.isCancelled());
    AssertJUnit.assertTrue("Composite Is Done ? ",runner.isDone());
    AssertJUnit.assertTrue("Composite No Error :",runner.getError().isEmpty());
    AssertJUnit.assertEquals("Composite Message",message,runner.getMessage().get(key1));
    AssertJUnit.assertFalse("Cancelled ?",future.isCancelled());
    AssertJUnit.assertTrue("Is Done ? ",future.isDone());
    AssertJUnit.assertEquals("Reponse :",message,future.getOne());
    AssertJUnit.assertNull("No Error",future.getError());
    AssertJUnit.assertFalse("Listener Cancelled ?",listener.isCancelled());
    AssertJUnit.assertTrue("Listener Is Done ? ",listener.isDone());
    AssertJUnit.assertTrue("listener No Error :",listener.getError().isEmpty());
    AssertJUnit.assertEquals("listener Message",message,listener.getMessage().get(key1));
    executor.shutdown();
  }
{
    AsyncResponseFuture<String,String> future=new AsyncResponseFuture<String,String>(key1,"");
    Map<String,KeyedFuture<String,String>> futureMap=new HashMap<String,KeyedFuture<String,String>>();
    futureMap.put(key1,future);
    CompositeFuture<String,String> compositeFuture=new CompositeFuture<String,String>("a",GatherModeOnError.AND);
    compositeFuture.start(futureMap.values());
    ResponseCompositeFutureClientRunnerListener runner=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    ResponseCompositeFutureClientRunnerListener listener=new ResponseCompositeFutureClientRunnerListener(compositeFuture);
    String message="dummy Message";
    future.onSuccess(message);
    Exception expectedError=new Exception("error processing");
    future.onError(expectedError);
    compositeFuture.cancel(false);
    compositeFuture.addListener(listener,null);
    ThreadPoolExecutor executor=new ThreadPoolExecutor(1,1,1,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());
    executor.execute(runner);
    runner.waitForAboutToGet();
    Thread.sleep(100);
    runner.waitForDone();
    AssertJUnit.assertFalse("Composite Cancelled ?",runner.isCancelled());
    AssertJUnit.assertTrue("Composite Is Done ? ",runner.isDone());
    AssertJUnit.assertTrue("Composite No Error :",runner.getError().isEmpty());
    AssertJUnit.assertEquals("Composite Message",message,runner.getMessage().get(key1));
    AssertJUnit.assertFalse("Cancelled ?",future.isCancelled());
    AssertJUnit.assertTrue("Is Done ? ",future.isDone());
    AssertJUnit.assertEquals("Reponse :",message,future.getOne());
    AssertJUnit.assertNull("No Error",future.getError());
    AssertJUnit.assertFalse("Listener Cancelled ?",listener.isCancelled());
    AssertJUnit.assertTrue("Listener Is Done ? ",listener.isDone());
    AssertJUnit.assertTrue("listener No Error :",listener.getError().isEmpty());
    AssertJUnit.assertEquals("listener Message",message,listener.getMessage().get(key1));
    executor.shutdown();
  }
}
