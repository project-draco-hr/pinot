{
  final int numOperators=_operators.size();
  final IntermediateResultsBlock[] blocks=new IntermediateResultsBlock[numOperators];
  final CountDownLatch operatorLatch=new CountDownLatch(numOperators);
  final List<AggregationInfo> aggregationsInfo=_brokerRequest.getAggregationsInfo();
  final int numAggrFunctions=aggregationsInfo.size();
  final List<AggregationFunction> aggregationFunctions=AggregationFunctionFactory.getAggregationFunction(_brokerRequest);
  final Map<String,Serializable[]> resultsMap=new ConcurrentHashMap<>();
  for (int i=0; i < numOperators; i++) {
    final int index=i;
    _executorService.execute(new TraceRunnable(){
      @Override public void runJob(){
        AggregationGroupByResult groupByResult;
        try {
          blocks[index]=(IntermediateResultsBlock)_operators.get(index).nextBlock();
          groupByResult=blocks[index].getAggregationGroupByResult();
          if (groupByResult != null) {
            Iterator<GroupKeyGenerator.GroupKey> groupKeyIterator=groupByResult.getGroupKeyIterator();
            while (groupKeyIterator.hasNext()) {
              GroupKeyGenerator.GroupKey groupKey=groupKeyIterator.next();
              String groupKeyString=groupKey.getStringKey();
              int lockIndex=(groupKeyString.hashCode() & Integer.MAX_VALUE) % NUM_LOCKS;
synchronized (LOCKS[lockIndex]) {
                Serializable[] results=resultsMap.get(groupKeyString);
                if (results == null) {
                  results=new Serializable[numAggrFunctions];
                  for (int j=0; j < numAggrFunctions; j++) {
                    results[j]=groupByResult.getResultForKey(groupKey,j);
                  }
                  resultsMap.put(groupKeyString,results);
                }
 else {
                  for (int j=0; j < numAggrFunctions; j++) {
                    results[j]=aggregationFunctions.get(j).combineTwoValues(results[j],groupByResult.getResultForKey(groupKey,j));
                  }
                }
              }
            }
          }
        }
 catch (        Exception e) {
          LOGGER.error("Exception processing CombineGroupBy for index {}, operator {}",index,_operators.get(index).getClass().getName(),e);
          blocks[index]=new IntermediateResultsBlock(e);
        }
        operatorLatch.countDown();
      }
    }
);
  }
  boolean opCompleted=operatorLatch.await(_timeOutMs,TimeUnit.SECONDS);
  if (!opCompleted) {
    LOGGER.error("Timed out while combining group-by results, after {}ms.",_timeOutMs);
    return new IntermediateResultsBlock(new TimeoutException("CombineGroupBy timed out."));
  }
  AggregationGroupByOperatorService aggregationGroupByOperatorService=new AggregationGroupByOperatorService(_brokerRequest.getAggregationsInfo(),_brokerRequest.getGroupBy());
  List<Map<String,Serializable>> trimmedResults=aggregationGroupByOperatorService.trimToSize(resultsMap,numAggrFunctions);
  return buildResultBlock(aggregationFunctions,trimmedResults,blocks);
}
