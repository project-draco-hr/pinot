{
  FileSystem fs=FileSystem.get(new Configuration());
  Path collectionDir=new Path(getCollectionDir(root,collection));
  PathFilter dataDirFilter=new PathFilter(){
    public boolean accept(    Path path){
      return path.getName().startsWith("data_");
    }
  }
;
  Comparator<FileStatus> dataDirComparator=new Comparator<FileStatus>(){
    public int compare(    FileStatus dataDir1,    FileStatus dataDir2){
      return getMaxTimeFromPath(dataDir2.getPath().toString()) - getMaxTimeFromPath(dataDir1.getPath().toString());
    }
    private int getMaxTimeFromPath(    String path){
      String[] tokens=path.split("/");
      String dataDirName=tokens[tokens.length - 1];
      tokens=dataDirName.split("-");
      return Integer.parseInt(tokens[tokens.length - 1]);
    }
  }
;
  List<FileStatus> listFiles=Arrays.asList(fs.listStatus(collectionDir,dataDirFilter));
  Collections.sort(listFiles,dataDirComparator);
  for (int i=0; i < listFiles.size(); i++) {
    System.out.println(listFiles.get(i).getPath().toString());
    RemoteIterator<LocatedFileStatus> fileStatusListIterator=fs.listFiles(listFiles.get(i).getPath(),true);
    while (fileStatusListIterator.hasNext()) {
      LocatedFileStatus fileStatus=fileStatusListIterator.next();
      if (fileStatus.getPath().getName().endsWith(TREE_FILE_FORMAT)) {
        return getCollectionDir(root,collection) + File.separator + listFiles.get(i).getPath().getName();
      }
    }
  }
  throw new IllegalStateException("Could not find star tree directory");
}
