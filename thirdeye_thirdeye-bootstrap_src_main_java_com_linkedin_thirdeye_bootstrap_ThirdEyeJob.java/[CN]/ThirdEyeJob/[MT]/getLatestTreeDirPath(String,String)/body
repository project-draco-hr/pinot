{
  FileSystem fs=FileSystem.get(new Configuration());
  Path bootstrapDir=new Path(getCollectionDir(root,collection),FlowSpec.BOOTSTRAP.name());
  PathFilter dataDirFilter=new PathFilter(){
    public boolean accept(    Path path){
      return path.getName().startsWith("data_");
    }
  }
;
  Comparator<FileStatus> dataDirComparator=new Comparator<FileStatus>(){
    public int compare(    FileStatus dataDir1,    FileStatus dataDir2){
      return (int)(getMaxTimeFromPath(dataDir2.getPath().toString()) - getMaxTimeFromPath(dataDir1.getPath().toString()));
    }
    private long getMaxTimeFromPath(    String path){
      try {
        String[] pathTokens=path.split(File.separator);
        String[] dataDirTokens=pathTokens[pathTokens.length - 1].split("_");
        String maxTimeString=URLDecoder.decode(dataDirTokens[dataDirTokens.length - 1],ENCODING);
        DateTime maxTime=StarTreeConstants.DATE_TIME_FORMATTER.parseDateTime(maxTimeString);
        return maxTime.getMillis();
      }
 catch (      Exception e) {
        throw new IllegalStateException(e);
      }
    }
  }
;
  List<FileStatus> listFiles=Arrays.asList(fs.listStatus(bootstrapDir,dataDirFilter));
  Collections.sort(listFiles,dataDirComparator);
  for (int i=0; i < listFiles.size(); i++) {
    RemoteIterator<LocatedFileStatus> fileStatusListIterator=fs.listFiles(listFiles.get(i).getPath(),true);
    while (fileStatusListIterator.hasNext()) {
      LocatedFileStatus fileStatus=fileStatusListIterator.next();
      if (fileStatus.getPath().getName().endsWith(TREE_FILE_FORMAT)) {
        return listFiles.get(i).getPath().toString();
      }
    }
  }
  throw new IllegalStateException("Could not find star tree directory");
}
