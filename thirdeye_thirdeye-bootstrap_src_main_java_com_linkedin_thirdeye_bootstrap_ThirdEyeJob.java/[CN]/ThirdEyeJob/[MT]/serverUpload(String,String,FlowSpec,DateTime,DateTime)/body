{
  String thirdEyeServerUri=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getName());
  if (thirdEyeServerUri == null) {
    throw new IllegalArgumentException("Must provide " + ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getName() + " in properties");
  }
  FileSystem fileSystem=FileSystem.get(new Configuration());
  Path configPath=new Path(root + File.separator + collection+ File.separator+ StarTreeConstants.CONFIG_FILE_NAME);
  InputStream configData=fileSystem.open(configPath);
  int responseCode=StarTreeJobUtils.pushConfig(configData,thirdEyeServerUri,collection);
  configData.close();
  LOGGER.info("Load {} #=> {}",configPath,responseCode);
  String schedule=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_FLOW_SCHEDULE.getName());
  String metricIndexDir=PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getMetricIndexDir(root,collection,flowSpec,minTime,maxTime);
  String outputTarGzFile=metricIndexDir + "/data.tar.gz";
  Path outputTarGzFilePath=new Path(outputTarGzFile);
  if (fileSystem.exists(outputTarGzFilePath)) {
    LOGGER.info("Uploading {} of size:{} to ThirdEye Server: {}",outputTarGzFile,fileSystem.getFileStatus(outputTarGzFilePath).getLen(),thirdEyeServerUri);
    FSDataInputStream outputDataStream=fileSystem.open(outputTarGzFilePath);
    responseCode=StarTreeJobUtils.pushData(outputDataStream,thirdEyeServerUri,collection,minTime,maxTime,schedule);
    LOGGER.info("Load {} #=> response code: {}",outputTarGzFile,responseCode);
  }
 else {
    throw new RuntimeException("Uploading of" + outputTarGzFile + " failed");
  }
}
