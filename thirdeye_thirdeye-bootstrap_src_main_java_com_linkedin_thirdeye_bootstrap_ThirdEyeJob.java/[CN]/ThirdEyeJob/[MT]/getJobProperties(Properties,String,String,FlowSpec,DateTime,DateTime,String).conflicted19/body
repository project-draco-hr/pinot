{
  Properties config=new Properties();
  config.setProperty(PartitionPhaseConstants.PARTITION_PHASE_CONFIG_PATH.toString(),getConfigPath(root,collection));
  boolean isTopK=Boolean.parseBoolean(inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TOPK.getName(),DEFAULT_TOPK));
  if (isTopK) {
    config.setProperty(PartitionPhaseConstants.PARTITION_PHASE_INPUT_PATH.toString(),getMetricIndexDir(root,collection,flowSpec,minTime,maxTime) + File.separator + TOPK_ROLLUP_PHASE3.getName());
  }
 else {
    config.setProperty(PartitionPhaseConstants.PARTITION_PHASE_INPUT_PATH.toString(),getMetricIndexDir(root,collection,flowSpec,minTime,maxTime) + File.separator + ROLLUP_PHASE4.getName());
  }
  config.setProperty(PartitionPhaseConstants.PARTITION_PHASE_OUTPUT_PATH.toString(),getMetricIndexDir(root,collection,flowSpec,minTime,maxTime) + File.separator + PARTITION.getName());
  config.setProperty(PartitionPhaseConstants.PARTITION_PHASE_NUM_PARTITIONS.toString(),inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_NUM_PARTITIONS.getName(),DEFAULT_NUM_PARTITIONS));
  return config;
}
