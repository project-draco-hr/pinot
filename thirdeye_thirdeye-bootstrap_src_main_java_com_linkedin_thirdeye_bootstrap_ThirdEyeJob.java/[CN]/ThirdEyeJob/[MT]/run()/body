{
  LOG.info("Input config:{}",inputConfig);
  PhaseSpec phaseSpec;
  try {
    phaseSpec=PhaseSpec.valueOf(phaseName.toUpperCase());
  }
 catch (  Exception e) {
    usage();
    throw e;
  }
  if (PhaseSpec.JOIN.equals(phaseSpec)) {
    JoinPhaseJob job=new JoinPhaseJob("Join Job",inputConfig);
    job.run();
    return;
  }
  String root=getAndCheck(ThirdEyeJobConstants.THIRDEYE_ROOT.getName(),inputConfig);
  String collection=getAndCheck(ThirdEyeJobConstants.THIRDEYE_COLLECTION.getName(),inputConfig);
  String inputPaths=getAndCheck(ThirdEyeJobConstants.INPUT_PATHS.getName(),inputConfig);
  FlowSpec flowSpec=null;
switch (phaseSpec) {
case ANALYSIS:
case AGGREGATION:
case ROLLUP_PHASE1:
case ROLLUP_PHASE2:
case ROLLUP_PHASE3:
case ROLLUP_PHASE4:
case STARTREE_GENERATION:
    flowSpec=FlowSpec.DIMENSION_INDEX;
  break;
case STARTREE_BOOTSTRAP_PHASE1:
case STARTREE_BOOTSTRAP_PHASE2:
case SERVER_PUSH:
flowSpec=FlowSpec.METRIC_INDEX;
break;
default :
break;
}
DateTime minTime;
DateTime maxTime;
String minTimeProp=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MIN.getName());
String maxTimeProp=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MAX.getName());
String timePathProp=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_PATH.getName());
if (minTimeProp != null && maxTimeProp != null) {
minTime=ISODateTimeFormat.dateTimeParser().parseDateTime(minTimeProp);
maxTime=ISODateTimeFormat.dateTimeParser().parseDateTime(maxTimeProp);
}
 else if (timePathProp != null) {
FileSystem fileSystem=FileSystem.get(new Configuration());
InputStream inputStream=fileSystem.open(new Path(timePathProp));
Properties timePathProps=new Properties();
timePathProps.load(inputStream);
inputStream.close();
minTimeProp=timePathProps.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MIN.getName());
maxTimeProp=timePathProps.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MAX.getName());
minTime=ISODateTimeFormat.dateTimeParser().parseDateTime(minTimeProp);
maxTime=ISODateTimeFormat.dateTimeParser().parseDateTime(maxTimeProp);
}
 else {
throw new IllegalStateException("Must specify either " + ThirdEyeJobConstants.THIRDEYE_TIME_PATH.getName() + " or "+ ThirdEyeJobConstants.THIRDEYE_TIME_MIN.getName()+ " and "+ ThirdEyeJobConstants.THIRDEYE_TIME_MAX.getName());
}
if (PhaseSpec.SERVER_PUSH.equals(phaseSpec)) {
String thirdEyeServerUri=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getName());
if (thirdEyeServerUri == null) {
throw new IllegalArgumentException("Must provide " + ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getName() + " in properties");
}
FileSystem fileSystem=FileSystem.get(new Configuration());
Path configPath=new Path(root + File.separator + collection+ File.separator+ StarTreeConstants.CONFIG_FILE_NAME);
InputStream configData=fileSystem.open(configPath);
int responseCode=StarTreeJobUtils.pushConfig(configData,thirdEyeServerUri,collection);
configData.close();
LOG.info("Load {} #=> {}",configPath,responseCode);
String schedule=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_FLOW_SCHEDULE.getName());
String metricIndexDir=PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getMetricIndexDir(root,collection,flowSpec,minTime,maxTime);
String bootstrapPhase2Output=metricIndexDir + File.separator + PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getName();
Path dataPath=new Path(bootstrapPhase2Output);
String outputTarGzFile=metricIndexDir + "/data.tar.gz";
Path outputTarGzFilePath=new Path(outputTarGzFile);
if (!fileSystem.exists(outputTarGzFilePath)) {
LOG.info("START: Creating output {} to upload to server ",outputTarGzFilePath.getName());
TarGzBuilder builder=new TarGzBuilder(outputTarGzFile,fileSystem,fileSystem);
RemoteIterator<LocatedFileStatus> listFiles=fileSystem.listFiles(dataPath,false);
while (listFiles.hasNext()) {
Path path=listFiles.next().getPath();
LOG.info("Adding {}, to {}",path,outputTarGzFile);
if (path.getName().equals("tree.bin") || path.getName().equals("metadata.txt")) {
builder.addFileEntry(path);
}
 else {
builder.addTarGzFile(path);
}
}
builder.finish();
if (fileSystem.exists(outputTarGzFilePath)) {
LOG.info("Successfully created {}.",outputTarGzFilePath);
}
 else {
throw new RuntimeException("Creation of" + outputTarGzFile + " failed");
}
}
 else {
LOG.info(outputTarGzFile + " already exists. Skipping the tar.gz creation step");
}
if (fileSystem.exists(outputTarGzFilePath)) {
LOG.info("Uploading {} of size:{} to ThirdEye Server: {}",outputTarGzFile,fileSystem.getFileStatus(outputTarGzFilePath).getLen(),thirdEyeServerUri);
FSDataInputStream outputDataStream=fileSystem.open(outputTarGzFilePath);
responseCode=StarTreeJobUtils.pushData(outputDataStream,thirdEyeServerUri,collection,minTime,maxTime,schedule);
LOG.info("Load {} #=> response code: {}",outputTarGzFile,responseCode);
}
 else {
throw new RuntimeException("Creation of" + outputTarGzFile + " failed");
}
}
 else {
if (FlowSpec.METRIC_INDEX.equals(flowSpec)) {
String dimensionIndexRef=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_DIMENSION_INDEX_REF.getName());
if (dimensionIndexRef == null) {
String msg="dimensionIndexRef:" + dimensionIndexRef + ".Must provide "+ ThirdEyeJobConstants.THIRDEYE_DIMENSION_INDEX_REF.getName()+ " in properties";
LOG.error(msg);
throw new IllegalArgumentException(msg);
}
}
Properties jobProperties=phaseSpec.getJobProperties(inputConfig,root,collection,flowSpec,minTime,maxTime,inputPaths);
String numReducers=inputConfig.getProperty(phaseSpec.getName() + ".num.reducers");
if (numReducers != null) {
jobProperties.put("num.reducers",numReducers);
}
Constructor<Configured> constructor=(Constructor<Configured>)phaseSpec.getKlazz().getConstructor(String.class,Properties.class);
Configured instance=constructor.newInstance(phaseSpec.getName(),jobProperties);
Method runMethod=instance.getClass().getMethod("run");
Job job=(Job)runMethod.invoke(instance);
JobStatus status=job.getStatus();
if (status.getState() != JobStatus.State.SUCCEEDED) {
throw new RuntimeException("Job " + job.getJobName() + " failed to execute: Ran with config:"+ jobProperties);
}
}
}
