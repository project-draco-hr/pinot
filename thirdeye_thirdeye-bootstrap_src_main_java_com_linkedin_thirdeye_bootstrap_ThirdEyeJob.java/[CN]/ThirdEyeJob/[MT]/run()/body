{
  PhaseSpec phaseSpec;
  try {
    phaseSpec=PhaseSpec.valueOf(phaseName.toUpperCase());
  }
 catch (  Exception e) {
    usage();
    throw e;
  }
  if (PhaseSpec.JOIN.equals(phaseSpec)) {
    JoinPhaseJob job=new JoinPhaseJob("Join Job",inputConfig);
    job.run();
    return;
  }
  String root=getAndCheck(ThirdEyeJobConstants.THIRDEYE_ROOT.getPropertyName(),inputConfig);
  String collection=getAndCheck(ThirdEyeJobConstants.THIRDEYE_COLLECTION.getPropertyName(),inputConfig);
  String inputPaths=getAndCheck(ThirdEyeJobConstants.INPUT_PATHS.getPropertyName(),inputConfig);
  FlowSpec flowSpec=FlowSpec.valueOf(getAndCheck(ThirdEyeJobConstants.THIRDEYE_FLOW.getPropertyName(),inputConfig).toUpperCase());
  String numberReducersProp=StarTreeBootstrapPhaseTwoConstants.THIRDEYE_STARTREE_BOOTSTRAP_PHASE2_REDUCERS.name();
  String numberOfReducers=inputConfig.getProperty(numberReducersProp);
  DateTime minTime;
  DateTime maxTime;
  String minTimeProp=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MIN.getPropertyName());
  String maxTimeProp=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MAX.getPropertyName());
  String timePathProp=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_PATH.getPropertyName());
  if (minTimeProp != null && maxTimeProp != null) {
    minTime=ISODateTimeFormat.dateTimeParser().parseDateTime(minTimeProp);
    maxTime=ISODateTimeFormat.dateTimeParser().parseDateTime(maxTimeProp);
  }
 else   if (timePathProp != null) {
    FileSystem fileSystem=FileSystem.get(new Configuration());
    InputStream inputStream=fileSystem.open(new Path(timePathProp));
    Properties timePathProps=new Properties();
    timePathProps.load(inputStream);
    inputStream.close();
    minTimeProp=timePathProps.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MIN.getPropertyName());
    maxTimeProp=timePathProps.getProperty(ThirdEyeJobConstants.THIRDEYE_TIME_MAX.getPropertyName());
    minTime=ISODateTimeFormat.dateTimeParser().parseDateTime(minTimeProp);
    maxTime=ISODateTimeFormat.dateTimeParser().parseDateTime(maxTimeProp);
  }
 else {
    throw new IllegalStateException("Must specify either " + ThirdEyeJobConstants.THIRDEYE_TIME_PATH.getPropertyName() + " or "+ ThirdEyeJobConstants.THIRDEYE_TIME_MIN.getPropertyName()+ " and "+ ThirdEyeJobConstants.THIRDEYE_TIME_MAX.getPropertyName());
  }
  if (PhaseSpec.SERVER_PUSH.equals(phaseSpec)) {
    String thirdEyeServerUri=inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getPropertyName());
    if (thirdEyeServerUri == null) {
      throw new IllegalArgumentException("Must provide " + ThirdEyeJobConstants.THIRDEYE_SERVER_URI.getPropertyName() + " in properties");
    }
    FileSystem fileSystem=FileSystem.get(new Configuration());
    Path configPath=new Path(root + File.separator + collection+ File.separator+ StarTreeConstants.CONFIG_FILE_NAME);
    InputStream configData=fileSystem.open(configPath);
    int responseCode=StarTreeJobUtils.pushConfig(configData,thirdEyeServerUri,collection);
    configData.close();
    LOG.info("Load {} #=> {}",configPath,responseCode);
    Path dataPath=new Path(PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getTimeDir(root,collection,flowSpec,minTime,maxTime) + File.separator + PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.getName());
    RemoteIterator<LocatedFileStatus> itr=fileSystem.listFiles(dataPath,false);
    while (itr.hasNext()) {
      LocatedFileStatus fileStatus=itr.next();
      if (fileStatus.getPath().getName().startsWith("task_")) {
        InputStream leafData=fileSystem.open(fileStatus.getPath());
        responseCode=StarTreeJobUtils.pushData(leafData,thirdEyeServerUri,collection,minTime,maxTime,inputConfig.getProperty(ThirdEyeJobConstants.THIRDEYE_FLOW_SCHEDULE.getPropertyName()));
        leafData.close();
        LOG.info("Load {} #=> {}",fileStatus.getPath(),responseCode);
      }
    }
  }
 else {
    Properties jobProperties=phaseSpec.getJobProperties(inputConfig,root,collection,flowSpec,minTime,maxTime,inputPaths);
    if (PhaseSpec.STARTREE_BOOTSTRAP_PHASE2.equals(phaseSpec) && numberOfReducers != null) {
      jobProperties.setProperty(numberReducersProp,numberOfReducers);
    }
    Constructor<?> constructor=phaseSpec.getKlazz().getConstructor(String.class,Properties.class);
    Object instance=constructor.newInstance(phaseSpec.getName(),jobProperties);
    Method runMethod=instance.getClass().getMethod("run");
    runMethod.invoke(instance);
  }
}
