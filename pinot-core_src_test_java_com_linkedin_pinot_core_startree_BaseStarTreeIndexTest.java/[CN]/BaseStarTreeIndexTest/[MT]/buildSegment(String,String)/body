{
  int ROWS=(int)MathUtils.factorial(NUM_DIMENSIONS);
  Schema schema=new Schema();
  for (int i=0; i < NUM_DIMENSIONS; i++) {
    String dimName="d" + (i + 1);
    DimensionFieldSpec dimensionFieldSpec=new DimensionFieldSpec(dimName,FieldSpec.DataType.STRING,true);
    schema.addField(dimName,dimensionFieldSpec);
  }
  schema.setTimeFieldSpec(new TimeFieldSpec(TIME_COLUMN_NAME,FieldSpec.DataType.INT,TimeUnit.DAYS));
  for (int i=0; i < NUM_METRICS; i++) {
    String metricName="m" + (i + 1);
    MetricFieldSpec metricFieldSpec=new MetricFieldSpec(metricName,FieldSpec.DataType.INT);
    schema.addField(metricName,metricFieldSpec);
  }
  SegmentGeneratorConfig config=new SegmentGeneratorConfig(schema);
  config.setEnableStarTreeIndex(true);
  config.setOutDir(segmentDirName);
  config.setFormat(FileFormat.AVRO);
  config.setSegmentName(segmentName);
  final List<GenericRow> data=new ArrayList<>();
  for (int row=0; row < ROWS; row++) {
    HashMap<String,Object> map=new HashMap<>();
    for (int i=0; i < NUM_DIMENSIONS; i++) {
      String dimName=schema.getDimensionFieldSpecs().get(i).getName();
      map.put(dimName,dimName + "-v" + row % (NUM_DIMENSIONS - i));
    }
    Random random=new Random(_randomSeed);
    for (int i=0; i < NUM_METRICS; i++) {
      String metName=schema.getMetricFieldSpecs().get(i).getName();
      map.put(metName,random.nextInt(METRIC_MAX_VALUE));
    }
    map.put("daysSinceEpoch",row % 7);
    GenericRow genericRow=new GenericRow();
    genericRow.init(map);
    data.add(genericRow);
  }
  SegmentIndexCreationDriverImpl driver=new SegmentIndexCreationDriverImpl();
  RecordReader reader=createReader(schema,data);
  driver.init(config,reader);
  driver.build();
  LOGGER.info("Built segment {} at {}",segmentName,segmentDirName);
  return schema;
}
