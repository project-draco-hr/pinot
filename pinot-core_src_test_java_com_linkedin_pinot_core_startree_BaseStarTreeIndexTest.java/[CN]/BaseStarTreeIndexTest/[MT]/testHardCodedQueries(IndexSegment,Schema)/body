{
  List<String> metricNames=schema.getMetricNames();
  SegmentMetadata segmentMetadata=segment.getSegmentMetadata();
  for (int i=0; i < _hardCodedQueries.length; i++) {
    Pql2Compiler compiler=new Pql2Compiler();
    BrokerRequest brokerRequest=compiler.compileToBrokerRequest(_hardCodedQueries[i]);
    FilterQueryTree filterQueryTree=RequestUtils.generateFilterQueryTree(brokerRequest);
    Assert.assertTrue(RequestUtils.isFitForStarTreeIndex(segmentMetadata,filterQueryTree,brokerRequest));
    Map<String,double[]> expectedResult=computeSumUsingRawDocs(segment,metricNames,brokerRequest);
    Map<String,double[]> actualResult=computeSumUsingAggregatedDocs(segment,metricNames,brokerRequest);
    Assert.assertEquals(expectedResult.size(),actualResult.size(),"Mis-match in number of groups");
    for (    Map.Entry<String,double[]> entry : expectedResult.entrySet()) {
      String expectedKey=entry.getKey();
      Assert.assertTrue(actualResult.containsKey(expectedKey));
      double[] expectedSums=entry.getValue();
      double[] actualSums=actualResult.get(expectedKey);
      for (int j=0; j < expectedSums.length; j++) {
        Assert.assertEquals(actualSums[j],expectedSums[j],"Mis-match sum for key '" + expectedKey + "', Metric: "+ metricNames.get(j)+ ", Random Seed: "+ _randomSeed);
      }
    }
  }
}
