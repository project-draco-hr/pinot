{
  ThirdEyeRequestBuilder builder=new ThirdEyeRequestBuilder();
  builder.setCollection(comparisonRequest.getCollectionName());
  List<Range<DateTime>> baselineTimeranges=new ArrayList<>();
  List<Range<DateTime>> currentTimeranges=new ArrayList<>();
  TimeGranularity aggregationTimeGranularity=comparisonRequest.getAggregationTimeGranularity();
  DateTime baselineStart=comparisonRequest.getBaselineStart();
  DateTime baselineEnd=comparisonRequest.getBaselineEnd();
  DateTime currentStart=comparisonRequest.getCurrentStart();
  DateTime currentEnd=comparisonRequest.getCurrentEnd();
  if (comparisonRequest.isEndDateInclusive()) {
    long aggTimeBucketMillis=aggregationTimeGranularity.toMillis();
    currentEnd=currentEnd.plus(aggTimeBucketMillis);
    baselineEnd=baselineEnd.plus(aggTimeBucketMillis);
  }
  baselineTimeranges=TimeRangeUtils.computeTimeRanges(aggregationTimeGranularity,baselineStart,baselineEnd);
  currentTimeranges=TimeRangeUtils.computeTimeRanges(aggregationTimeGranularity,currentStart,currentEnd);
  ThirdEyeRequest baselineRequest=createThirdEyeRequest(BASELINE,comparisonRequest,baselineStart,baselineEnd);
  ThirdEyeRequest currentRequest=createThirdEyeRequest(CURRENT,comparisonRequest,currentStart,currentEnd);
  List<ThirdEyeRequest> requests=new ArrayList<>();
  requests.add(baselineRequest);
  requests.add(currentRequest);
  Map<ThirdEyeRequest,Future<ThirdEyeResponse>> futureResponseMap;
  futureResponseMap=queryCache.getQueryResultsAsync(requests);
  ThirdEyeResponse baselineResponse=null;
  ThirdEyeResponse currentResponse=null;
  for (  Entry<ThirdEyeRequest,Future<ThirdEyeResponse>> entry : futureResponseMap.entrySet()) {
    ThirdEyeRequest request=entry.getKey();
    Future<ThirdEyeResponse> responseFuture=entry.getValue();
    ThirdEyeResponse response=responseFuture.get(60,TimeUnit.SECONDS);
    if (BASELINE.equals(request.getRequestReference())) {
      baselineResponse=response;
    }
 else     if (CURRENT.equals(request.getRequestReference())) {
      currentResponse=response;
    }
  }
  TimeOnTimeResponseParser timeOnTimeResponseParser=new TimeOnTimeResponseParser(baselineResponse,currentResponse,baselineTimeranges,currentTimeranges,comparisonRequest.getAggregationTimeGranularity(),comparisonRequest.getGroupByDimensions());
  List<Row> rows=timeOnTimeResponseParser.parseResponse();
  computeDerivedMetrics(comparisonRequest,rows);
  return new TimeOnTimeComparisonResponse(rows);
}
