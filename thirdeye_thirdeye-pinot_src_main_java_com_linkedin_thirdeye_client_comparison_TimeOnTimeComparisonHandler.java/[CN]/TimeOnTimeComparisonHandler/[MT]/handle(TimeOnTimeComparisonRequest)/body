{
  ThirdEyeRequestBuilder builder=new ThirdEyeRequestBuilder();
  builder.setCollection(comparisonRequest.getCollectionName());
  List<Range<DateTime>> baselineTimeranges=new ArrayList<>();
  List<Range<DateTime>> currentTimeranges=new ArrayList<>();
  TimeGranularity aggregationTimeGranularity=comparisonRequest.getAggregationTimeGranularity();
  List<Range<DateTime>> timeRanges;
  timeRanges=TimeRangeUtils.computeTimeRanges(aggregationTimeGranularity,comparisonRequest.getBaselineStart(),comparisonRequest.getBaselineEnd());
  baselineTimeranges.addAll(timeRanges);
  timeRanges=TimeRangeUtils.computeTimeRanges(aggregationTimeGranularity,comparisonRequest.getCurrentStart(),comparisonRequest.getCurrentEnd());
  currentTimeranges.addAll(timeRanges);
  int numTimeRanges=baselineTimeranges.size();
  boolean hasGroupByDimensions=CollectionUtils.isNotEmpty(comparisonRequest.getGroupByDimensions());
  List<Map<ThirdEyeRequest,Future<PinotThirdEyeResponse>>> responseFutureList=new ArrayList<>();
  List<TimeOnTimeComparisonRequest> comparisonRequests=new ArrayList<>(numTimeRanges);
  for (int i=0; i < numTimeRanges; i++) {
    Range<DateTime> baselineRange=baselineTimeranges.get(i);
    Range<DateTime> currentRange=currentTimeranges.get(i);
    TimeOnTimeComparisonRequest request=new TimeOnTimeComparisonRequest(comparisonRequest);
    request.setBaselineStart(baselineRange.lowerEndpoint());
    request.setBaselineEnd(baselineRange.upperEndpoint());
    request.setCurrentStart(currentRange.lowerEndpoint());
    request.setCurrentEnd(currentRange.upperEndpoint());
    comparisonRequests.add(request);
    if (hasGroupByDimensions) {
      List<ThirdEyeRequest> requests=ThirdEyeRequestGenerator.generateRequestsForGroupByDimensions(request);
      Map<ThirdEyeRequest,Future<PinotThirdEyeResponse>> queryResultMap=queryCache.getQueryResultsAsync(requests);
      responseFutureList.add(queryResultMap);
    }
 else {
      List<ThirdEyeRequest> requests=ThirdEyeRequestGenerator.generateRequestsForAggregation(request);
      Map<ThirdEyeRequest,Future<PinotThirdEyeResponse>> queryResultMap=queryCache.getQueryResultsAsync(requests);
      responseFutureList.add(queryResultMap);
    }
  }
  List<Row> rows=new ArrayList<>();
  for (int i=0; i < timeRanges.size(); i++) {
    Map<ThirdEyeRequest,Future<PinotThirdEyeResponse>> futureResponseMap=responseFutureList.get(i);
    Map<ThirdEyeRequest,PinotThirdEyeResponse> responseMap=new LinkedHashMap<>();
    for (    Entry<ThirdEyeRequest,Future<PinotThirdEyeResponse>> entry : futureResponseMap.entrySet()) {
      responseMap.put(entry.getKey(),entry.getValue().get(60,TimeUnit.SECONDS));
    }
    if (hasGroupByDimensions) {
      List<Row> rowList=TimeOnTimeResponseParser.parseGroupByDimensionResponse(comparisonRequests.get(i),responseMap);
      rows.addAll(rowList);
    }
 else {
      Row row=TimeOnTimeResponseParser.parseAggregationOnlyResponse(comparisonRequests.get(i),responseMap);
      rows.add(row);
    }
  }
  List<MetricFunction> metricFunctionsFromExpressions=Utils.computeMetricFunctionsFromExpressions(comparisonRequest.getMetricExpressions());
  Set<String> metricNameSet=new HashSet<>();
  for (  MetricFunction function : metricFunctionsFromExpressions) {
    metricNameSet.add(function.getMetricName());
  }
  List<MetricExpression> derivedMetricExpressions=new ArrayList<>();
  for (  MetricExpression expression : comparisonRequest.getMetricExpressions()) {
    if (!metricNameSet.contains(expression.getExpressionName())) {
      derivedMetricExpressions.add(expression);
    }
  }
  if (derivedMetricExpressions.size() > 0) {
    Map<String,Double> baselineValueContext=new HashMap<>();
    Map<String,Double> currentValueContext=new HashMap<>();
    for (    Row row : rows) {
      baselineValueContext.clear();
      currentValueContext.clear();
      List<Metric> metrics=row.getMetrics();
      for (      Metric metric : metrics) {
        baselineValueContext.put(metric.getMetricName(),metric.getBaselineValue());
        currentValueContext.put(metric.getMetricName(),metric.getCurrentValue());
      }
      for (      MetricExpression expression : derivedMetricExpressions) {
        String derivedMetricExpression=expression.getExpression();
        double derivedMetricBaselineValue=MetricExpression.evaluateExpression(derivedMetricExpression,baselineValueContext);
        if (Double.isInfinite(derivedMetricBaselineValue) || Double.isNaN(derivedMetricBaselineValue)) {
          derivedMetricBaselineValue=0;
        }
        double currentMetricBaselineValue=MetricExpression.evaluateExpression(derivedMetricExpression,currentValueContext);
        if (Double.isInfinite(currentMetricBaselineValue) || Double.isNaN(currentMetricBaselineValue)) {
          currentMetricBaselineValue=0;
        }
        row.getMetrics().add(new Metric(expression.getExpressionName(),derivedMetricBaselineValue,currentMetricBaselineValue));
      }
    }
  }
  return new TimeOnTimeComparisonResponse(rows);
}
