{
  ThirdEyeRequestBuilder builder=new ThirdEyeRequestBuilder();
  builder.setCollection(comparisonRequest.getCollectionName());
  List<Range<DateTime>> baselineTimeranges=new ArrayList<>();
  List<Range<DateTime>> currentTimeranges=new ArrayList<>();
  TimeGranularity aggregationTimeGranularity=comparisonRequest.getAggregationTimeGranularity();
  baselineTimeranges=TimeRangeUtils.computeTimeRanges(aggregationTimeGranularity,comparisonRequest.getBaselineStart(),comparisonRequest.getBaselineEnd());
  currentTimeranges=TimeRangeUtils.computeTimeRanges(aggregationTimeGranularity,comparisonRequest.getCurrentStart(),comparisonRequest.getCurrentEnd());
  ThirdEyeRequest baselineRequest=createThirdEyeRequest("baseline",comparisonRequest,comparisonRequest.getBaselineStart(),comparisonRequest.getBaselineEnd());
  ThirdEyeRequest currentRequest=createThirdEyeRequest("current",comparisonRequest,comparisonRequest.getCurrentStart(),comparisonRequest.getCurrentEnd());
  List<ThirdEyeRequest> requests=new ArrayList<>();
  requests.add(baselineRequest);
  requests.add(currentRequest);
  Map<ThirdEyeRequest,Future<ThirdEyeResponse>> futureResponseMap;
  futureResponseMap=queryCache.getQueryResultsAsync(requests);
  ThirdEyeResponse baselineResponse=null;
  ThirdEyeResponse currentResponse=null;
  for (  Entry<ThirdEyeRequest,Future<ThirdEyeResponse>> entry : futureResponseMap.entrySet()) {
    ThirdEyeRequest request=entry.getKey();
    Future<ThirdEyeResponse> responseFuture=entry.getValue();
    ThirdEyeResponse response=responseFuture.get(60,TimeUnit.SECONDS);
    if ("baseline".equals(request.getRequestReference())) {
      baselineResponse=response;
    }
 else     if ("current".equals(request.getRequestReference())) {
      currentResponse=response;
    }
  }
  TimeOnTimeResponseParser timeOnTimeResponseParser=new TimeOnTimeResponseParser(baselineResponse,currentResponse,baselineTimeranges,currentTimeranges,comparisonRequest.getAggregationTimeGranularity(),comparisonRequest.getGroupByDimensions());
  List<Row> rows=timeOnTimeResponseParser.parseResponse();
  computeDerivedMetrics(comparisonRequest,rows);
  return new TimeOnTimeComparisonResponse(rows);
}
