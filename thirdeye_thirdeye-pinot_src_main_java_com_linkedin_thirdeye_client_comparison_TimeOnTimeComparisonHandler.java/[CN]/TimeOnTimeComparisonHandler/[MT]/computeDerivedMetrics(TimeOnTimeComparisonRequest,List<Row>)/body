{
  List<MetricFunction> metricFunctionsFromExpressions=Utils.computeMetricFunctionsFromExpressions(comparisonRequest.getMetricExpressions());
  Set<String> metricNameSet=new HashSet<>();
  for (  MetricFunction function : metricFunctionsFromExpressions) {
    metricNameSet.add(function.getMetricName());
  }
  List<MetricExpression> derivedMetricExpressions=new ArrayList<>();
  for (  MetricExpression expression : comparisonRequest.getMetricExpressions()) {
    if (!metricNameSet.contains(expression.getExpressionName())) {
      derivedMetricExpressions.add(expression);
    }
  }
  if (derivedMetricExpressions.size() > 0) {
    Map<String,Double> baselineValueContext=new HashMap<>();
    Map<String,Double> currentValueContext=new HashMap<>();
    for (    Row row : rows) {
      baselineValueContext.clear();
      currentValueContext.clear();
      List<Metric> metrics=row.getMetrics();
      for (      Metric metric : metrics) {
        baselineValueContext.put(metric.getMetricName(),metric.getBaselineValue());
        currentValueContext.put(metric.getMetricName(),metric.getCurrentValue());
      }
      for (      MetricExpression expression : derivedMetricExpressions) {
        String derivedMetricExpression=expression.getExpression();
        double derivedMetricBaselineValue=MetricExpression.evaluateExpression(derivedMetricExpression,baselineValueContext);
        if (Double.isInfinite(derivedMetricBaselineValue) || Double.isNaN(derivedMetricBaselineValue)) {
          derivedMetricBaselineValue=0;
        }
        double currentMetricBaselineValue=MetricExpression.evaluateExpression(derivedMetricExpression,currentValueContext);
        if (Double.isInfinite(currentMetricBaselineValue) || Double.isNaN(currentMetricBaselineValue)) {
          currentMetricBaselineValue=0;
        }
        row.getMetrics().add(new Metric(expression.getExpressionName(),derivedMetricBaselineValue,currentMetricBaselineValue));
      }
    }
  }
}
