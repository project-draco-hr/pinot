{
  LOGGER.info("AggregatePhaseJob.AggregationMapper.setup()");
  Configuration configuration=context.getConfiguration();
  FileSystem fileSystem=FileSystem.get(configuration);
  Path configPath=new Path(configuration.get(AGG_CONFIG_PATH.toString()));
  try {
    starTreeConfig=StarTreeConfig.decode(fileSystem.open(configPath));
    config=AggregationJobConfig.fromStarTreeConfig(starTreeConfig);
    dimensionNames=config.getDimensionNames();
    metricNames=config.getMetricNames();
    metricTypes=config.getMetricTypes();
    metricSchema=new MetricSchema(config.getMetricNames(),metricTypes);
    sourceTimeUnit=TimeUnit.valueOf(config.getTimeUnit());
    dimensionValues=new String[dimensionNames.size()];
    String className=config.getThresholdFuncClassName();
    Map<String,String> params=config.getThresholdFuncParams();
    Constructor<?> constructor=Class.forName(className).getConstructor(Map.class);
    rollupThresholdFunction=(RollupThresholdFunction)constructor.newInstance(params);
    preserveTime=Boolean.parseBoolean(configuration.get(AGG_PRESERVE_TIME_COMPACTION.toString()));
    converterClassName=configuration.get(AGG_CONVERTER_CLASS.toString());
    converterClass=Class.forName(converterClassName);
    LOGGER.info("Using converter class {}",converterClassName);
  }
 catch (  Exception e) {
    throw new IOException(e);
  }
}
