{
  StarTreeRecord starTreeRecord=null;
  try {
    if (converterClassName.equals(DEFAULT_CONVERTER_CLASS)) {
      AvroKey<GenericRecord> avroKey=(AvroKey<GenericRecord>)key;
      converterMethod=converterClass.getDeclaredMethod(StarTreeConstants.CONVERT_METHOD_NAME,StarTreeConfig.class,GenericRecord.class);
      starTreeRecord=(StarTreeRecord)converterMethod.invoke(null,starTreeConfig,avroKey.datum());
    }
 else {
      Text textValue=(Text)value;
      converterMethod=converterClass.getDeclaredMethod(StarTreeConstants.CONVERT_METHOD_NAME,StarTreeConfig.class,Text.class);
      starTreeRecord=(StarTreeRecord)converterMethod.invoke(null,starTreeConfig,textValue);
    }
  }
 catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
    LOGGER.error("Exception in reading converter classes",e);
  }
  MetricTimeSeries originalSeries=starTreeRecord.getMetricTimeSeries();
  for (  Long time : originalSeries.getTimeWindowSet()) {
    for (    MetricSpec metricSpec : starTreeConfig.getMetrics()) {
      Number metricValue=originalSeries.get(time,metricSpec.getName());
      context.getCounter(starTreeConfig.getCollection(),metricSpec.getName()).increment(metricValue.longValue());
    }
  }
  MetricTimeSeries series=originalSeries;
  LOGGER.info("Preserve time {} ",preserveTime);
  if (!preserveTime) {
    MetricTimeSeries flattenedSeries=new MetricTimeSeries(metricSchema);
    for (    Long time : originalSeries.getTimeWindowSet()) {
      for (int i=0; i < metricNames.size(); i++) {
        String name=metricNames.get(i);
        flattenedSeries.increment(-1,name,originalSeries.get(time,name));
      }
    }
    series=flattenedSeries;
  }
  byte[] serializedKey=starTreeRecord.getDimensionKey().toBytes();
  byte[] serializedMetrics=series.toBytes();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  baos.write(serializedKey.length);
  baos.write(serializedKey);
  baos.write(serializedMetrics.length);
  baos.write(serializedMetrics);
  context.write(new BytesWritable(serializedKey),new BytesWritable(serializedMetrics));
  context.getCounter(AggregationCounter.NUMBER_OF_RECORDS).increment(1);
}
