{
  List<Pair<File,File>> enabledRealtimeSegments=new ArrayList<>();
  TreeMap<File,File> sortedRealtimeSegments=new TreeMap<File,File>(new Comparator<File>(){
    @Override public int compare(    File o1,    File o2){
      return _realtimeAvroToSegmentMap.get(o1).getName().compareTo(_realtimeAvroToSegmentMap.get(o2).getName());
    }
  }
);
  sortedRealtimeSegments.putAll(_realtimeAvroToSegmentMap);
  for (  File avroFile : sortedRealtimeSegments.keySet()) {
    enabledRealtimeSegments.add(Pair.of(avroFile,sortedRealtimeSegments.get(avroFile)));
    System.out.println("pushing avroFile = " + avroFile);
    pushAvroIntoKafka(Collections.singletonList(avroFile),KafkaStarterUtils.DEFAULT_KAFKA_BROKER,KAFKA_TOPIC);
    configureScanBasedComparator(enabledRealtimeSegments);
    QueryResponse queryResponse=_scanBasedQueryProcessor.processQuery("select count(*) from mytable");
    int expectedRecordCount=queryResponse.getNumDocsScanned();
    waitForRecordCountToStabilizeToExpectedCount(expectedRecordCount,System.currentTimeMillis() + 120000L);
    testMethod.call();
  }
}
