{
  ensureDirectoryExistsAndIsEmpty(_tmpDir);
  ensureDirectoryExistsAndIsEmpty(_segmentDir);
  ensureDirectoryExistsAndIsEmpty(_offlineSegmentDir);
  ensureDirectoryExistsAndIsEmpty(_realtimeSegmentDir);
  ensureDirectoryExistsAndIsEmpty(_offlineTarDir);
  ensureDirectoryExistsAndIsEmpty(_realtimeTarDir);
  ensureDirectoryExistsAndIsEmpty(_unpackedSegments);
  startHybridCluster();
  extractAvroIfNeeded();
  int avroFileCount=getAvroFileCount();
  Preconditions.checkArgument(3 <= avroFileCount,"Need at least three Avro files for this test");
  setSegmentCount(avroFileCount);
  setOfflineSegmentCount(2);
  setRealtimeSegmentCount(avroFileCount - 1);
  final List<File> avroFiles=getAllAvroFiles();
  _schemaFile=getSchemaFile();
  _schema=Schema.fromFile(_schemaFile);
  setUpTable("mytable",getTimeColumnName(),getTimeColumnType(),KafkaStarterUtils.DEFAULT_ZK_STR,KAFKA_TOPIC,_schemaFile,avroFiles.get(0),getSortedColumn(),invertedIndexColumns);
  final List<File> offlineAvroFiles=getOfflineAvroFiles(avroFiles);
  final List<File> realtimeAvroFiles=getRealtimeAvroFiles(avroFiles);
  ExecutorService executor;
  if (_createSegmentsInParallel) {
    executor=Executors.newCachedThreadPool();
  }
 else {
    executor=Executors.newSingleThreadExecutor();
  }
  Future<Map<File,File>> offlineAvroToSegmentMapFuture=buildSegmentsFromAvro(offlineAvroFiles,executor,0,_offlineSegmentDir,_offlineTarDir,"mytable",false,_schema);
  Future<Map<File,File>> realtimeAvroToSegmentMapFuture=buildSegmentsFromAvro(realtimeAvroFiles,executor,0,_realtimeSegmentDir,_realtimeTarDir,"mytable",false,_schema);
  setupQueryGenerator(avroFiles,executor);
  _offlineAvroToSegmentMap=offlineAvroToSegmentMapFuture.get();
  _realtimeAvroToSegmentMap=realtimeAvroToSegmentMapFuture.get();
  LOGGER.info("Offline avro to segment map: {}",_offlineAvroToSegmentMap);
  LOGGER.info("Realtime avro to segment map: {}",_realtimeAvroToSegmentMap);
  executor.shutdown();
  executor.awaitTermination(10,TimeUnit.MINUTES);
  final CountDownLatch latch=setupSegmentCountCountDownLatch("mytable",getOfflineSegmentCount());
  int i=0;
  for (  String segmentName : _offlineTarDir.list()) {
    i++;
    LOGGER.info("Uploading segment {} : {}",i,segmentName);
    File file=new File(_offlineTarDir,segmentName);
    FileUploadUtils.sendSegmentFile("localhost","8998",segmentName,new FileInputStream(file),file.length());
  }
  latch.await();
  _fileWriter=getLogWriter();
  _fileWriter.write("Start time:" + System.currentTimeMillis() + "\n");
  _fileWriter.flush();
  startTimeMs=System.currentTimeMillis();
  LOGGER.info("Setup completed");
}
