{
  TreeMap<AnomalyResult,String> chronologicalAnomaliesWithLabels=new TreeMap<AnomalyResult,String>(new Comparator<AnomalyResult>(){
    @Override public int compare(    AnomalyResult o1,    AnomalyResult o2){
      int diff=Long.compare(o1.getStartTimeUtc(),o2.getStartTimeUtc());
      if (diff == 0) {
        diff=o1.compareTo(o2);
      }
      return diff;
    }
  }
);
  chronologicalAnomaliesWithLabels.putAll(anomaliesWithLabels);
  Long intervalStart=null;
  Long intervalEnd=null;
  List<Marker> anomalyMarkers=new ArrayList<>();
  for (  Entry<AnomalyResult,String> entry : chronologicalAnomaliesWithLabels.entrySet()) {
    AnomalyResult anomalyResult=entry.getKey();
    Long anomalyStart=anomalyResult.getStartTimeUtc();
    Long anomalyEnd=anomalyResult.getEndTimeUtc();
    anomalyEnd=anomalyEnd == null ? anomalyStart : anomalyEnd;
    if (intervalStart == null || anomalyStart > intervalEnd) {
      if (intervalStart != null) {
        Marker anomalyMarker=createGraphMarker(intervalStart,intervalEnd,null);
        anomalyMarkers.add(anomalyMarker);
      }
      intervalStart=anomalyStart;
      intervalEnd=anomalyEnd;
    }
 else {
      intervalEnd=Math.max(intervalEnd,anomalyEnd);
    }
  }
  if (intervalStart != null) {
    Marker anomalyMarker=createGraphMarker(intervalStart,intervalEnd,null);
    anomalyMarkers.add(anomalyMarker);
  }
  return anomalyMarkers;
}
