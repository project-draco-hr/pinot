{
  DoubleMatrix[] trainingTimeSeries=DataUtils.getTrainingData(inputTimeSeries,inputTimeStamps,trainStart,trainEnd);
  DoubleMatrix[] processTrainingTimeSeries=DataUtils.removeTimeStamps(trainingTimeSeries,inputTimeStamps,omitTimestamps);
  double estimateMean=DataUtils.estimateTrainingMean(processTrainingTimeSeries,seasonal);
  Map<Long,FanomalyDataPoint> output=new HashMap<Long,FanomalyDataPoint>();
  for (int ii=0; ii < processTrainingTimeSeries.length; ii++) {
    if (processTrainingTimeSeries[ii] == null) {
      output.put(inputTimeStamps[ii],new FanomalyDataPoint(Double.NaN,Double.NaN,Double.NaN,0.0,inputTimeStamps[ii],ii));
    }
 else {
      if (processTrainingTimeSeries[ii].get(0,0) == estimateMean) {
        output.put(inputTimeStamps[ii],new FanomalyDataPoint(estimateMean,estimateMean,1.0,0.0,inputTimeStamps[ii],ii));
      }
    }
  }
  return output;
}
